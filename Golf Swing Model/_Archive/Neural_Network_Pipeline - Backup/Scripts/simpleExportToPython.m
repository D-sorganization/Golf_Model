function simpleExportToPython(dataset_file)
% simpleExportToPython.m
% Simple export of MATLAB dataset to Python-friendly CSV format
% 
% Inputs:
%   dataset_file - Path to .mat dataset file

fprintf('=== Simple Export to Python ===\n');
fprintf('Dataset: %s\n\n', dataset_file);

% Check if dataset exists
if ~exist(dataset_file, 'file')
    error('Dataset file not found: %s', dataset_file);
end

% Load dataset
fprintf('Loading dataset...\n');
data = load(dataset_file);
if ~isfield(data, 'dataset')
    error('Invalid dataset file: missing "dataset" field');
end

dataset = data.dataset;
num_simulations = length(dataset.simulations);
successful_sims = sum(dataset.success_flags);

fprintf('✓ Dataset loaded: %d simulations (%d successful)\n', num_simulations, successful_sims);

% Create output directory
output_dir = 'python_export';
if ~exist(output_dir, 'dir')
    mkdir(output_dir);
    fprintf('✓ Created output directory: %s\n', output_dir);
end

% Extract timestamp for filenames
[~, name, ~] = fileparts(dataset_file);
timestamp = datestr(now, 'yyyymmdd_HHMMSS');

% Initialize data collection
all_data = [];
simulation_summary = [];

fprintf('Processing simulations...\n');
fprintf('Progress: [');
progress_bar_length = 50;

successful_count = 0;

for sim_idx = 1:num_simulations
    % Update progress bar
    progress = sim_idx / num_simulations;
    filled_length = round(progress * progress_bar_length);
    fprintf('\rProgress: [%s%s] %d/%d (%.1f%%)', ...
            repmat('█', 1, filled_length), ...
            repmat('░', 1, progress_bar_length - filled_length), ...
            sim_idx, num_simulations, progress * 100);
    
    if ~dataset.success_flags(sim_idx)
        continue; % Skip failed simulations
    end
    
    try
        sim_data = dataset.simulations{sim_idx};
        sim_params = dataset.parameters{sim_idx};
        
        % Get time vector
        time = sim_data.time;
        num_timepoints = length(time);
        
        % Create basic data structure for this simulation
        sim_table = table();
        sim_table.simulation_id = repmat(sim_idx, num_timepoints, 1);
        sim_table.time = time;
        
        % Add polynomial input coefficients as metadata
        poly_inputs = sim_params.polynomial_inputs;
        
        % Hip torque coefficients (assuming 4th order polynomial)
        if isfield(poly_inputs, 'hip_torque') && length(poly_inputs.hip_torque) >= 4
            sim_table.hip_torque_a0 = repmat(poly_inputs.hip_torque(1), num_timepoints, 1);
            sim_table.hip_torque_a1 = repmat(poly_inputs.hip_torque(2), num_timepoints, 1);
            sim_table.hip_torque_a2 = repmat(poly_inputs.hip_torque(3), num_timepoints, 1);
            sim_table.hip_torque_a3 = repmat(poly_inputs.hip_torque(4), num_timepoints, 1);
        end
        
        % Spine torque coefficients
        if isfield(poly_inputs, 'spine_torque') && length(poly_inputs.spine_torque) >= 4
            sim_table.spine_torque_a0 = repmat(poly_inputs.spine_torque(1), num_timepoints, 1);
            sim_table.spine_torque_a1 = repmat(poly_inputs.spine_torque(2), num_timepoints, 1);
            sim_table.spine_torque_a2 = repmat(poly_inputs.spine_torque(3), num_timepoints, 1);
            sim_table.spine_torque_a3 = repmat(poly_inputs.spine_torque(4), num_timepoints, 1);
        end
        
        % Shoulder torque coefficients
        if isfield(poly_inputs, 'shoulder_torque') && length(poly_inputs.shoulder_torque) >= 4
            sim_table.shoulder_torque_a0 = repmat(poly_inputs.shoulder_torque(1), num_timepoints, 1);
            sim_table.shoulder_torque_a1 = repmat(poly_inputs.shoulder_torque(2), num_timepoints, 1);
            sim_table.shoulder_torque_a2 = repmat(poly_inputs.shoulder_torque(3), num_timepoints, 1);
            sim_table.shoulder_torque_a3 = repmat(poly_inputs.shoulder_torque(4), num_timepoints, 1);
        end
        
        % Elbow torque coefficients
        if isfield(poly_inputs, 'elbow_torque') && length(poly_inputs.elbow_torque) >= 4
            sim_table.elbow_torque_a0 = repmat(poly_inputs.elbow_torque(1), num_timepoints, 1);
            sim_table.elbow_torque_a1 = repmat(poly_inputs.elbow_torque(2), num_timepoints, 1);
            sim_table.elbow_torque_a2 = repmat(poly_inputs.elbow_torque(3), num_timepoints, 1);
            sim_table.elbow_torque_a3 = repmat(poly_inputs.elbow_torque(4), num_timepoints, 1);
        end
        
        % Wrist torque coefficients
        if isfield(poly_inputs, 'wrist_torque') && length(poly_inputs.wrist_torque) >= 4
            sim_table.wrist_torque_a0 = repmat(poly_inputs.wrist_torque(1), num_timepoints, 1);
            sim_table.wrist_torque_a1 = repmat(poly_inputs.wrist_torque(2), num_timepoints, 1);
            sim_table.wrist_torque_a2 = repmat(poly_inputs.wrist_torque(3), num_timepoints, 1);
            sim_table.wrist_torque_a3 = repmat(poly_inputs.wrist_torque(4), num_timepoints, 1);
        end
        
        % Add starting positions if available
        if isfield(sim_params, 'starting_positions')
            start_pos = sim_params.starting_positions;
            if isfield(start_pos, 'hip_x')
                sim_table.start_hip_x = repmat(start_pos.hip_x, num_timepoints, 1);
            end
            if isfield(start_pos, 'hip_y')
                sim_table.start_hip_y = repmat(start_pos.hip_y, num_timepoints, 1);
            end
            if isfield(start_pos, 'hip_z')
                sim_table.start_hip_z = repmat(start_pos.hip_z, num_timepoints, 1);
            end
            if isfield(start_pos, 'spine_rx')
                sim_table.start_spine_rx = repmat(start_pos.spine_rx, num_timepoints, 1);
            end
            if isfield(start_pos, 'spine_ry')
                sim_table.start_spine_ry = repmat(start_pos.spine_ry, num_timepoints, 1);
            end
        end
        
        % Add simulation metadata
        sim_table.simulation_time = repmat(sim_params.simulation_time, num_timepoints, 1);
        
        % Add to main dataset
        all_data = [all_data; sim_table];
        
        % Create simulation summary
        summary_row = table();
        summary_row.simulation_id = sim_idx;
        summary_row.num_timepoints = num_timepoints;
        summary_row.time_min = min(time);
        summary_row.time_max = max(time);
        summary_row.simulation_time = sim_params.simulation_time;
        summary_row.success = true;
        
        simulation_summary = [simulation_summary; summary_row];
        
        successful_count = successful_count + 1;
        
    catch ME
        fprintf('\n✗ Error processing simulation %d: %s\n', sim_idx, ME.message);
        
        % Add failed simulation to summary
        summary_row = table();
        summary_row.simulation_id = sim_idx;
        summary_row.num_timepoints = 0;
        summary_row.time_min = NaN;
        summary_row.time_max = NaN;
        summary_row.simulation_time = NaN;
        summary_row.success = false;
        
        simulation_summary = [simulation_summary; summary_row];
        continue;
    end
end

fprintf('\n\n✓ Processed %d successful simulations\n', successful_count);

% Export data
fprintf('\nExporting to CSV...\n');

% Export main dataset
main_file = fullfile(output_dir, sprintf('%s_dataset_%s.csv', name, timestamp));
writetable(all_data, main_file);
fprintf('✓ Main dataset: %s\n', main_file);

% Export simulation summary
summary_file = fullfile(output_dir, sprintf('%s_summary_%s.csv', name, timestamp));
writetable(simulation_summary, summary_file);
fprintf('✓ Simulation summary: %s\n', summary_file);

% Create Python helper script
createSimplePythonHelper(output_dir, name, timestamp);

fprintf('\n=== Export Complete ===\n');
fprintf('Output directory: %s\n', output_dir);
fprintf('Total data points: %d\n', size(all_data, 1));
fprintf('Successful simulations: %d\n', successful_count);
fprintf('Time range: %.3f to %.3f seconds\n', min(all_data.time), max(all_data.time));

end

function createSimplePythonHelper(output_dir, name, timestamp)
% Create simple Python helper script
python_script = fullfile(output_dir, sprintf('load_simple_dataset_%s.py', timestamp));

script_content = sprintf([...
'#!/usr/bin/env python3\n', ...
'"""\n', ...
'Simple Python helper script to load golf swing dataset\n', ...
'Generated: %s\n', ...
'"""\n\n', ...
'import pandas as pd\n', ...
'import numpy as np\n', ...
'import matplotlib.pyplot as plt\n', ...
'from pathlib import Path\n\n', ...
'def load_dataset(base_name="%s", timestamp="%s"):\n', ...
'    """Load golf swing dataset from CSV files"""\n', ...
'    data_dir = Path(".")\n', ...
'    \n', ...
'    # Load main dataset\n', ...
'    dataset_file = data_dir / f"{base_name}_dataset_{timestamp}.csv"\n', ...
'    dataset = pd.read_csv(dataset_file)\n', ...
'    \n', ...
'    # Load simulation summary\n', ...
'    summary_file = data_dir / f"{base_name}_summary_{timestamp}.csv"\n', ...
'    summary = pd.read_csv(summary_file)\n', ...
'    \n', ...
'    return dataset, summary\n\n', ...
'def get_simulation_data(dataset, simulation_id):\n', ...
'    """Get data for a specific simulation"""\n', ...
'    return dataset[dataset.simulation_id == simulation_id].copy()\n\n', ...
'def plot_polynomial_coefficients(dataset, simulation_id=1):\n', ...
'    """Plot polynomial coefficients for a simulation"""\n', ...
'    sim_data = get_simulation_data(dataset, simulation_id)\n', ...
'    \n', ...
'    # Get polynomial coefficients\n', ...
'    hip_coeffs = [\n', ...
'        sim_data.hip_torque_a0.iloc[0],\n', ...
'        sim_data.hip_torque_a1.iloc[0],\n', ...
'        sim_data.hip_torque_a2.iloc[0],\n', ...
'        sim_data.hip_torque_a3.iloc[0]\n', ...
'    ]\n', ...
'    \n', ...
'    # Create time array for polynomial evaluation\n', ...
'    time = np.linspace(0, sim_data.time.max(), 100)\n', ...
'    \n', ...
'    # Evaluate polynomial\n', ...
'    hip_torque = np.polyval(hip_coeffs[::-1], time)  # Reverse for polyval\n', ...
'    \n', ...
'    plt.figure(figsize=(10, 6))\n', ...
'    plt.plot(time, hip_torque, "b-", linewidth=2, label="Hip Torque Polynomial")\n', ...
'    plt.xlabel("Time (s)")\n', ...
'    plt.ylabel("Torque (N⋅m)")\n', ...
'    plt.title(f"Hip Torque Polynomial - Simulation {simulation_id}")\n', ...
'    plt.grid(True, alpha=0.3)\n', ...
'    plt.legend()\n', ...
'    plt.show()\n\n', ...
'def analyze_dataset(dataset, summary):\n', ...
'    """Analyze dataset statistics"""\n', ...
'    print("=== Dataset Analysis ===\\n")\n', ...
'    \n', ...
'    print(f"Total data points: {len(dataset):,}")\n', ...
'    print(f"Number of simulations: {dataset.simulation_id.nunique()}")\n', ...
'    print(f"Time range: {dataset.time.min():.3f} to {dataset.time.max():.3f} seconds")\n', ...
'    print(f"Average simulation time: {summary.simulation_time.mean():.2f} seconds")\n', ...
'    print(f"Successful simulations: {summary.success.sum()}/{len(summary)}")\n', ...
'    \n', ...
'    # Show polynomial coefficient ranges\n', ...
'    print("\\n=== Polynomial Coefficient Ranges ===")\n', ...
'    coeff_columns = [col for col in dataset.columns if "_a" in col]\n', ...
'    for col in coeff_columns:\n', ...
'        print(f"{col}: [{dataset[col].min():.3f}, {dataset[col].max():.3f}]")\n', ...
'    \n', ...
'    # Show starting position ranges\n', ...
'    print("\\n=== Starting Position Ranges ===")\n', ...
'    start_columns = [col for col in dataset.columns if "start_" in col]\n', ...
'    for col in start_columns:\n', ...
'        print(f"{col}: [{dataset[col].min():.3f}, {dataset[col].max():.3f}]")\n\n', ...
'def create_training_data(dataset):\n', ...
'    """Create training data for neural network"""\n', ...
'    # Extract polynomial coefficients as features\n', ...
'    feature_columns = [col for col in dataset.columns if "_a" in col]\n', ...
'    \n', ...
'    # For now, we only have polynomial inputs as features\n', ...
'    # In the future, this would include joint kinematics\n', ...
'    X = dataset[feature_columns].iloc[::10, :]  # Sample every 10th point\n', ...
'    \n', ...
'    # Create dummy target (in real implementation, this would be joint torques)\n', ...
'    y = np.random.randn(len(X), 15)  # 15 joint torques (3D x 5 joints)\n', ...
'    \n', ...
'    return X, y\n\n', ...
'if __name__ == "__main__":\n', ...
'    # Example usage\n', ...
'    print("Loading golf swing dataset...")\n', ...
'    try:\n', ...
'        dataset, summary = load_dataset()\n', ...
'        print("✓ Dataset loaded successfully!\\n")\n', ...
'        \n', ...
'        # Analyze dataset\n', ...
'        analyze_dataset(dataset, summary)\n', ...
'        \n', ...
'        # Plot sample polynomial\n', ...
'        plot_polynomial_coefficients(dataset, simulation_id=1)\n', ...
'        \n', ...
'        # Create training data\n', ...
'        X, y = create_training_data(dataset)\n', ...
'        print(f"\\nTraining data shape: X={X.shape}, y={y.shape}")\n', ...
'        \n', ...
'    except FileNotFoundError as e:\n', ...
'        print(f"✗ Error: {e}")\n', ...
'        print("Make sure you are in the correct directory with the exported files.")\n'], ...
datestr(now), name, timestamp);

% Write Python script
fid = fopen(python_script, 'w');
fprintf(fid, '%s', script_content);
fclose(fid);

fprintf('✓ Python helper: %s\n', python_script);

end 