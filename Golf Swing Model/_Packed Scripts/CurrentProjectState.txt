%%% MATLAB PROJECT PACKER - v1.0 %%%
%%% Source Folder Base: C:\Users\diete\MATLAB Drive\_Golf Swing Model Rebuild\_Rebuilt Assembly %%%
%%% Pack Time: 02-May-2025 20:57:59 %%%

%%% START FILE: MASTER_SCRIPT_ZTCF_ZVCF_PLOT_GENERATOR_3D.m %%%
%%% START FILE: MASTER_SCRIPT_ZTCF_ZVCF_PLOT_GENERATOR_3D.m %%%
% ZTCF and ZVCF Data Generation Script
% This script runs the main simulation (BaseData), generates Zero Torque
% Counterfactual (ZTCF) data by simulating with zeroed torques at different
% time points, calculates the Delta (Base - ZTCF), generates Zero Velocity
% Counterfactual (ZVCF) data, saves the resulting tables, and calls
% subsequent scripts for further calculations and plotting.

% The ZTCF represents the passive effect of non-torque forces.
% It is calculated by simulating with joint torques set to zero after a
% step time, matching the original position/velocity at that time point.

% The ZVCF represents the effect of joint torques in a static pose.
% It is calculated by simulating the ZVCF model with zero initial velocity
% and constant joint torques taken from the BaseData at specific time points.

% --- Initial Setup ---

% Define the root directory of your 3DModel project
% Assuming this script is located in the '3DModel' folder
projectRoot = fileparts(mfilename('fullpath'));
cd(projectRoot); % Change to the project root directory

% Add necessary script folders to the MATLAB path
addpath(fullfile(projectRoot, 'Scripts'));
addpath(fullfile(projectRoot, 'Scripts', '_BaseData Scripts'));
addpath(fullfile(projectRoot, 'Scripts', '_ZTCF Scripts'));
addpath(fullfile(projectRoot, 'Scripts', '_Delta Scripts'));
addpath(fullfile(projectRoot, 'Scripts', '_Comparison Scripts'));
addpath(fullfile(projectRoot, 'Scripts', '_ZVCF Scripts'));
% Add other necessary folders if you have them (e.g., models folder)
% addpath(fullfile(projectRoot, 'Models'));

% Define the target uniform time step for the 'Q' tables (for plotting/analysis)
TsQ = 0.0025; % Your desired uniform time step

% Load the main kinetic model and its model workspace
kineticModelName = 'GolfSwing3D_KineticallyDriven';
open_system(kineticModelName); % Open the model without displaying the window
mdlWks = get_param(kineticModelName, 'ModelWorkspace');

% Load model inputs into the model workspace (assuming ModelInputs.mat is in project root)
mdlWks.DataSource = 'MAT-File';
mdlWks.FileName = fullfile(projectRoot, 'ModelInputs.mat');
mdlWks.reload;

% Configure simulation parameters for the main run and ZTCF runs
% Set the killswitch time to a value that won't trigger during the initial Base run
assignin(mdlWks, 'KillswitchStepTime', Simulink.Parameter(1));
% Set the stop time for the main BaseData simulation
assignin(mdlWks, 'StopTime', Simulink.Parameter(0.28)); % As seen in original script

% Set up the model to return a single matlab object as output.
set_param(kineticModelName, 'ReturnWorkspaceOutputs', 'on');
set_param(kineticModelName, 'FastRestart', 'on'); % Keep Fast Restart for ZTCF loop efficiency
set_param(kineticModelName, 'MaxStep', '0.001'); % Set maximum time step

% Turn off specific warnings that are expected and deemed benign
warning('off', 'MATLAB:MKDIR:DirectoryExists'); % For mkdir
warning('off', 'Simulink:Masking:NonTunableParameterChangedDuringSimulation');
warning('off', 'Simulink:Engine:NonTunableVarChangedInFastRestart');
warning('off', 'Simulink:Engine:NonTunableVarChangedMaxWarnings');
% Consider adding more specific warnings if they appear frequently and are understood

% --- Generate BaseData ---
fprintf('Running BaseData simulation...\n');
out_base = sim(kineticModelName);

% Generate BaseData table from simulation output using refactored function
% Assuming generateDataTable3D function is available on the path
BaseData = generateDataTable3D(out_base);
fprintf('BaseData table generated.\n');

% --- Generate ZTCF Data by Looping ---
% The ZTCF simulations are run by stepping the KillswitchStepTime.
% The data point of interest from each run is where the killswitch state becomes zero.

% Define the times at which to step the killswitch for ZTCF
% Using 0:28 with a scaling factor of 1/100 as seen in your script
ztcfSampleTimes = (0:28) / 100;
numZTCSims = length(ztcfSampleTimes);

% Initialize ZTCFTable with the structure of BaseData, but empty
% This is less efficient than pre-allocation if the number of variables is large
% A better approach is to pre-allocate the table size and variable types
% Let's stick closer to your original logic for now, but pre-allocation is recommended.
ZTCFTable = BaseData(false, :); % Create an empty table with same columns as BaseData

fprintf('Generating ZTCF data (%d simulations)...\n', numZTCSims);
% Loop through each desired killswitch step time
for i = 1:numZTCSims
    currentTime = ztcfSampleTimes(i);

    % Display percentage complete
    ztcfPercentComplete = (i / numZTCSims) * 100;
    fprintf('ZTCF Progress: %.1f%%\n', ztcfPercentComplete);

    % Write step time to model workspace using setVariable on a SimulationInput object
    % Create a SimulationInput object for this specific run
    in_ztcf = Simulink.SimulationInput(kineticModelName);
    in_ztcf = in_ztcf.setVariable('KillswitchStepTime', currentTime);
    % Inherit other model workspace variables from the base model setup

    % Run the simulation for this step time
    out_ztcf = sim(in_ztcf);

    % Generate table from simulation output using refactored function
    ztcfSimData = generateDataTable3D(out_ztcf);

    % Find the row where the KillswitchState first becomes zero
    % Assuming KillswitchState is a logged signal in ztcfSimData
    row = find(ztcfSimData.KillswitchState == 0, 1);

    % Extract the data row at the killswitch time
    if ~isempty(row)
        ztcfDataRow = ztcfSimData(row, :);
        % Overwrite the time in the extracted row with the actual sample time
        ztcfDataRow.Time = currentTime;
    else
        % Handle cases where the killswitch might not reach zero (e.g., simulation ends first)
        % You might want to log a warning or skip this time point
        warning('KillswitchState did not reach zero for time %g. Skipping data point.', currentTime);
        continue; % Skip to the next iteration
    end

    % Append the extracted row to the ZTCFTable
    % This is inefficient. Pre-allocation is strongly recommended.
    ZTCFTable = [ZTCFTable; ztcfDataRow];
end
fprintf('ZTCF data generation complete.\n');

% --- Data Processing: Generate BASEQ, ZTCFQ, DELTAQ on Uniform TsQ Grid ---
% This section replaces the original re-timing logic and the call to SCRIPT_QTableTimeChange_3D.m

fprintf('Processing data and resampling to uniform TsQ grid...\n');

% Convert BaseData and ZTCF to timetables using their original time steps
BaseDataTimetable = table2timetable(BaseData, 'RowTimes', 'Time');
ZTCFTimetable = table2timetable(ZTCFTable, 'RowTimes', 'Time'); % Use ZTCFTable generated in loop

% Resample both BaseDataTimetable and ZTCFTimetable directly to the final uniform TsQ grid
% This generates the final BASEQ and ZTCFQ timetables
fprintf('Resampling BaseData and ZTCF to TsQ = %g...\n', TsQ);
BASEQTimetable = retime(BaseDataTimetable, 'regular', 'spline', 'TimeStep', seconds(TsQ));
ZTCFQTimetable = retime(ZTCFTimetable, 'regular', 'spline', 'TimeStep', seconds(TsQ));

% Calculate DELTAQ by subtracting the two re-timed timetables
% This generates the final DELTAQ timetable directly
fprintf('Calculating DELTAQ = BASEQ - ZTCFQ...\n');
DELTAQTimetable = BASEQTimetable - ZTCFQTimetable;

% Convert the uniform timetables back to tables
fprintf('Converting uniform timetables back to tables...\n');
BASEQ = timetable2table(BASEQTimetable, 'ConvertRowTimes', true);
BASEQ = renamevars(BASEQ, 't', 'Time'); % Rename the time column added by timetable2table

ZTCFQ = timetable2table(ZTCFQTimetable, 'ConvertRowTimes', true);
ZTCFQ = renamevars(ZTCFQ, 't', 'Time'); % Rename the time column

DELTAQ = timetable2table(DELTAQTimetable, 'ConvertRowTimes', true);
DELTAQ = renamevars(DELTAQ, 't', 'Time'); % Rename the time column

fprintf('BASEQ, ZTCFQ, DELTAQ tables generated on uniform TsQ grid.\n');

% --- Cleanup intermediate variables from ZTCF generation and re-timing ---
% Be careful not to clear variables needed later (like BASEQ, ZTCFQ, DELTAQ)
clear out_base out_ztcf ztcfSimData row ztcfDataRow ztcfPercentComplete;
clear BaseDataTimetable ZTCFTimetable BASEQTimetable ZTCFQTimetable DELTAQTimetable;
% You might choose to clear BaseData and ZTCFTable here if they are no longer needed
% clear BaseData ZTCFTable;


% --- Perform further Calculations using the Q Tables ---
fprintf('Performing additional calculations...\n');

% Run the correction program for linear work and linear impulse for ZTCF and DELTA.
% Assuming SCRIPT_UpdateCalcsforImpulseandWork_3D is a function now
% It should accept ZTCF and DELTA tables and return updated tables
% [ZTCF, DELTA] = SCRIPT_UpdateCalcsforImpulseandWork_3D(ZTCF, DELTA); % If using non-Q tables
[ZTCFQ, DELTAQ] = SCRIPT_UpdateCalcsforImpulseandWork_3D(ZTCFQ, DELTAQ); % Assuming it operates on Q tables

% Run the Q spacing program for the plots: (This script is now redundant and should be removed)
% cd(fullfile(projectRoot, 'Scripts')); % Already on path, no need to cd
% SCRIPT_QTableTimeChange_3D; % REMOVE THIS CALL

% Run the Calculation for Total Work and Power at Each Joint
% Assuming SCRIPT_TotalWorkandPowerCalculation_3D is a function now
% It should accept tables and return updated tables
% [BASE, ZTCF, DELTA, BASEQ, ZTCFQ, DELTAQ] = SCRIPT_TotalWorkandPowerCalculation_3D(BASE, ZTCF, DELTA, BASEQ, ZTCFQ, DELTAQ); % Example if it updates all
[BASEQ, ZTCFQ, DELTAQ] = SCRIPT_TotalWorkandPowerCalculation_3D(BASEQ, ZTCFQ, DELTAQ); % Assuming it operates on Q tables

% Generate Club and Hand Path Vectors in the Tables
% Assuming SCRIPT_CHPandMPPCalculation_3D is a function now named calculatePathVectors3D
% It should accept tables and return updated tables
[BASEQ, ZTCFQ, DELTAQ] = calculatePathVectors3D(BASEQ, ZTCFQ, DELTAQ);


% Run Table of Values Script and Generate Data for Shaft Quivers at Times of interest
% Assuming SCRIPT_TableofValues_3D is a function now named generateSummaryTableAndQuiverData3D
% It should accept BASEQ, ZTCFQ, DELTAQ and return summary tables/structs
[SummaryTable, ClubQuiverAlphaReversal, ClubQuiverMaxCHS, ClubQuiverZTCFAlphaReversal, ClubQuiverDELTAAlphaReversal] = generateSummaryTableAndQuiverData3D(BASEQ, ZTCFQ, DELTAQ);


% --- Save the tables ---
fprintf('Saving tables...\n');
tablesDir = fullfile(projectRoot, 'Tables');
mkdir(tablesDir); % Create directory if it doesn't exist

% Save the primary Q tables
save(fullfile(tablesDir, 'BASEQ.mat'), 'BASEQ');
save(fullfile(tablesDir, 'ZTCFQ.mat'), 'ZTCFQ');
save(fullfile(tablesDir, 'DELTAQ.mat'), 'DELTAQ');

% Save other calculated summary tables/structs
save(fullfile(tablesDir, 'ClubQuiverAlphaReversal.mat'), 'ClubQuiverAlphaReversal');
save(fullfile(tablesDir, 'ClubQuiverMaxCHS.mat'), 'ClubQuiverMaxCHS');
save(fullfile(tablesDir, 'ClubQuiverZTCFAlphaReversal.mat'), 'ClubQuiverZTCFAlphaReversal');
save(fullfile(tablesDir, 'ClubQuiverDELTAAlphaReversal.mat'), 'ClubQuiverDELTAAlphaReversal');
save(fullfile(tablesDir, 'SummaryTable.mat'), 'SummaryTable');

fprintf('Tables saved to %s.\n', tablesDir);

% --- Generate ZVCF Data ---
% The ZVCF simulations are run with zero initial velocity and constant
% joint torques taken from the BaseData at specific time points.

fprintf('Generating ZVCF data...\n');

% Define the ZVCF model name
zvcfModelName = 'GolfSwing3D_ZVCF';

% Load the ZVCF model and its model workspace
open_system(zvcfModelName); % Open the model
mdlWks_zvcf = get_param(zvcfModelName, 'ModelWorkspace');

% Load model inputs into the ZVCF model workspace (assuming ModelInputsZVCF.mat exists)
% Your original script copied/renamed ModelInputs.mat for this.
% A cleaner approach is to create ModelInputsZVCF.mat separately or
% configure the ZVCF model workspace differently.
% Assuming ModelInputsZVCF.mat is available for the ZVCF model's base parameters
% mdlWks_zvcf.DataSource = 'MAT-File';
% mdlWks_zvcf.FileName = fullfile(projectRoot, 'ModelInputsZVCF.mat'); % Adjust path if needed
% mdlWks_zvcf.reload;

% Set up ZVCF model simulation parameters
set_param(zvcfModelName, 'ReturnWorkspaceOutputs', 'on');
set_param(zvcfModelName, 'FastRestart', 'off'); % Keep Fast Restart off as in original ZVCF script
set_param(zvcfModelName, 'MaxStep', '0.001');
% Set the stop time for the short ZVCF simulation runs
set_param(zvcfModelName, 'StopTime', '0.05'); % As in original ZVCF script

% Define the times at which to sample BaseData for ZVCF inputs
% Using the same sample times as ZTCF for consistency
zvcfSampleTimes = ztcfSampleTimes; % Use the same times as ZTCF
numZVCFSims = length(zvcfSampleTimes);

% Initialize ZVCFTable to store results (pre-allocate is better)
% Use the structure of a table generated from a single ZVCF sim output
% Run one dummy sim or inspect the model output structure to get var names/types
fprintf('Running one dummy ZVCF simulation to get table structure...\n');
in_zvcf_dummy = Simulink.SimulationInput(zvcfModelName);
% Set minimal required variables for dummy run if model needs them
% e.g., in_zvcf_dummy = in_zvcf_dummy.setVariable('HipStartPosition', 0);
out_zvcf_dummy = sim(in_zvcf_dummy);
dummyZVCFDataTable = generateDataTable3D(out_zvcf_dummy); % Use your table generation function
ZVCFTable = table('Size', [numZVCFSims, width(dummyZVCFDataTable)], ...
                  'VariableTypes', varfun(@class, dummyZVCFDataTable(1,:), 'OutputFormat', 'cell'), ...
                  'VariableNames', dummyZVCFDataTable.Properties.VariableNames);
clear out_zvcf_dummy dummyZVCFDataTable; % Clean up dummy run variables

fprintf('Generating ZVCF data (%d simulations)...\n', numZVCFSims);

% Begin Generation of ZVCF Data by Looping
% Create an array of SimulationInput objects for ZVCF runs
in_zvcf_array = Simulink.SimulationInput.empty(0, numZVCFSims);

for i = 1:numZVCFSims
    currentTime = zvcfSampleTimes(i);

    % Display percentage complete
    zvcfPercentComplete = (i / numZVCFSims) * 100;
    fprintf('ZVCF Progress: %.1f%%\n', zvcfPercentComplete);

    % Read the joint torque and position values from BaseData at the current time
    % These values will be used as constant inputs and initial positions for the ZVCF model
    % NOTE: Ensure these column names match your 3D model's logged outputs
    hipJointTorque = interp1(BaseData.Time, BaseData.HipTorqueZInput, currentTime, 'linear'); % Assuming Z is primary input axis
    torsoJointTorque = interp1(BaseData.Time, BaseData.TorsoTorqueInput, currentTime, 'linear'); % Assuming single input
    lscapJointTorqueX = interp1(BaseData.Time, BaseData.LScapTorqueXInput, currentTime, 'linear');
    lscapJointTorqueY = interp1(BaseData.Time, BaseData.LScapTorqueYInput, currentTime, 'linear');
    rscapJointTorqueX = interp1(BaseData.Time, BaseData.RScapTorqueXInput, currentTime, 'linear');
    rscapJointTorqueY = interp1(BaseData.Time, BaseData.RScapTorqueYInput, currentTime, 'linear');
    lshoulderJointTorqueX = interp1(BaseData.Time, BaseData.LSTorqueXInput, currentTime, 'linear');
    lshoulderJointTorqueY = interp1(BaseData.Time, BaseData.LSTorqueYInput, currentTime, 'linear');
    lshoulderJointTorqueZ = interp1(BaseData.Time, BaseData.LSTorqueZInput, currentTime, 'linear');
    rshoulderJointTorqueX = interp1(BaseData.Time, BaseData.RSTorqueXInput, currentTime, 'linear');
    rshoulderJointTorqueY = interp1(BaseData.Time, BaseData.RSTorqueYInput, currentTime, 'linear');
    rshoulderJointTorqueZ = interp1(BaseData.Time, BaseData.RSTorqueZInput, currentTime, 'linear');
    lelbowJointTorque = interp1(BaseData.Time, BaseData.LETorqueInput, currentTime, 'linear'); % Assuming single input
    relbowJointTorque = interp1(BaseData.Time, BaseData.RETorqueInput, currentTime, 'linear'); % Assuming single input
    lwristJointTorqueX = interp1(BaseData.Time, BaseData.LWTorqueXInput, currentTime, 'linear');
    lwristJointTorqueY = interp1(BaseData.Time, BaseData.LWTorqueYInput, currentTime, 'linear');
    rwristJointTorqueX = interp1(BaseData.Time, BaseData.RWTorqueXInput, currentTime, 'linear');
    rwristJointTorqueY = interp1(BaseData.Time, BaseData.RWTorqueYInput, currentTime, 'linear');


    % Read the position values from BaseData at the current time and convert to degrees if necessary
    % NOTE: Ensure these column names match your 3D model's logged outputs
    % NOTE: Verify units (radians vs. degrees) expected by your ZVCF model parameters
    hipPosition = interp1(BaseData.Time, BaseData.HipPositionZ, currentTime, 'linear'); % Assuming Z position is relevant
    torsoPosition = interp1(BaseData.Time, BaseData.TorsoPosition, currentTime, 'linear'); % Assuming single position
    lscapPositionX = interp1(BaseData.Time, BaseData.LScapPositionX, currentTime, 'linear');
    lscapPositionY = interp1(BaseData.Time, BaseData.LScapPositionY, currentTime, 'linear');
    rscapPositionX = interp1(BaseData.Time, BaseData.RScapPositionX, currentTime, 'linear');
    rscapPositionY = interp1(BaseData.Time, BaseData.RScapPositionY, currentTime, 'linear');
    lshoulderPositionX = interp1(BaseData.Time, BaseData.LSPositionX, currentTime, 'linear');
    lshoulderPositionY = interp1(BaseData.Time, BaseData.LSPositionY, currentTime, 'linear');
    lshoulderPositionZ = interp1(BaseData.Time, BaseData.LSPositionZ, currentTime, 'linear');
    rshoulderPositionX = interp1(BaseData.Time, BaseData.RSPositionX, currentTime, 'linear');
    rshoulderPositionY = interp1(BaseData.Time, BaseData.RSPositionY, currentTime, 'linear');
    rshoulderPositionZ = interp1(BaseData.Time, BaseData.RSPositionZ, currentTime, 'linear');
    lelbowPosition = interp1(BaseData.Time, BaseData.LEPosition, currentTime, 'linear'); % Assuming single position
    relbowPosition = interp1(BaseData.Time, BaseData.REPosition, currentTime, 'linear'); % Assuming single position
    lwristPositionX = interp1(BaseData.Time, BaseData.LWPositionX, currentTime, 'linear');
    lwristPositionY = interp1(BaseData.Time, BaseData.LWPositionY, currentTime, 'linear');
    rwristPositionX = interp1(BaseData.Time, BaseData.RWPositionX, currentTime, 'linear');
    rwristPositionY = interp1(BaseData.Time, BaseData.RWPositionY, currentTime, 'linear');


    % Create a new SimulationInput object for this ZVCF run
    in_zvcf_array(i) = Simulink.SimulationInput(zvcfModelName);

    % Assign in the torque values as constant inputs to the ZVCF model using setVariable
    % NOTE: Ensure parameter names match your ZVCF model's input blocks/parameters
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueHip', hipJointTorque);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueTorso', torsoJointTorque);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLScapX', lscapJointTorqueX);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLScapY', lscapJointTorqueY);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRScapX', rscapJointTorqueX);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRScapY', rscapJointTorqueY);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLShoulderX', lshoulderJointTorqueX);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLShoulderY', lshoulderJointTorqueY);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLShoulderZ', lshoulderJointTorqueZ);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRShoulderX', rshoulderJointTorqueX);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRShoulderY', rshoulderJointTorqueY);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRShoulderZ', rshoulderJointTorqueZ);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLElbow', lelbowJointTorque);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRElbow', relbowJointTorque);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLWristX', lwristJointTorqueX);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueLWristY', lwristJointTorqueY);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRWristX', rwristJointTorqueX);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('JointTorqueRWristY', rwristJointTorqueY);


    % Assign in position values as initial positions for the ZVCF model using setVariable
    % Convert to degrees if the ZVCF model parameters expect degrees
    % NOTE: Ensure parameter names match your ZVCF model's initial condition parameters
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('HipStartPosition', hipPosition * 180/pi); % Example conversion
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('TorsoStartPosition', torsoPosition * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LScapStartPositionX', lscapPositionX * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LScapStartPositionY', lscapPositionY * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RScapStartPositionX', rscapPositionX * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RScapStartPositionY', rscapPositionY * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LShoulderStartPositionX', lshoulderPositionX * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LShoulderStartPositionY', lshoulderPositionY * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LShoulderStartPositionZ', lshoulderPositionZ * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RShoulderStartPositionX', rshoulderPositionX * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RShoulderStartPositionY', rshoulderPositionY * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RShoulderStartPositionZ', rshoulderPositionZ * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LElbowStartPosition', lelbowPosition * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RElbowStartPosition', relbowPosition * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LWristStartPositionX', lwristPositionX * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LWristStartPositionY', lwristPositionY * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RWristStartPositionX', rwristPositionX * 180/pi);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RWristStartPositionY', rwristPositionY * 180/pi);


    % Set initial velocities to zero using setVariable
    % NOTE: Ensure parameter names match your ZVCF model's initial condition parameters
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('HipStartVelocity', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('TorsoStartVelocity', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LScapStartVelocityX', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LScapStartVelocityY', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RScapStartVelocityX', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RScapStartVelocityY', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LShoulderStartVelocityX', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LShoulderStartVelocityY', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LShoulderStartVelocityZ', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RShoulderStartVelocityX', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RShoulderStartVelocityY', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RShoulderStartVelocityZ', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LElbowStartVelocity', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RElbowStartVelocity', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LWristStartVelocityX', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('LWristStartVelocityY', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RWristStartVelocityX', 0);
    in_zvcf_array(i) = in_zvcf_array(i).setVariable('RWristStartVelocityY', 0);


    % Ensure logging is configured in the model or via the input object
    % in_zvcf_array(i) = in_zvcf_array(i).setLoggingOption('all'); % Example if needed
end

% Run all ZVCF simulations (consider using parsim if Parallel Computing Toolbox is available)
fprintf('Running ZVCF simulations...\n');
% out_zvcf_results = sim(in_zvcf_array); % Sequential
out_zvcf_results = parsim(in_zvcf_array, 'ShowProgress', 'on'); % Parallel (requires PCT)
fprintf('ZVCF simulations complete.\n');

% Process ZVCF results and populate ZVCFTable
fprintf('Processing ZVCF simulation outputs...\n');
for i = 1:numZVCFSims
    currentOutput = out_zvcf_results(i);
    currentTime = zvcfSampleTimes(i); % Get the sample time for this run

    % Generate table from simulation output using refactored function
    currentZVCFDataTable = generateDataTable3D(currentOutput);

    % Extract the data row at time zero (or the specific point needed for ZVCF)
    % Your original code extracts the first row (time zero)
    zvcfRow = currentZVCFDataTable(1,:);

    % Assign the correct time from the loop (currentTime)
    zvcfRow.Time = currentTime; % Assign the original sample time

    % Populate the pre-allocated ZVCFTable
    ZVCFTable(i,:) = zvcfRow;
end
fprintf('ZVCFTable generated.\n');

% --- Save the ZVCF Tables ---
fprintf('Saving ZVCF tables...\n');
tablesDir = fullfile(projectRoot, 'Tables');
mkdir(tablesDir); % Ensure directory exists

% Assuming you also want a ZVCFTableQ on the TsQ grid
% Since ZVCFTable is already on the zvcfSampleTimes grid (which is ztcfSampleTimes)
% and ztcfSampleTimes is likely a subset of the TsQ grid,
% you might need to re-time ZVCFTable to the full TsQ grid if needed for comparison/plotting.
% Let's re-time ZVCFTable to TsQ to create ZVCFTableQ for consistency with BASEQ/ZTCFQ/DELTAQ.

ZVCFTableTimetable = table2timetable(ZVCFTable, 'RowTimes', 'Time');
ZVCFTableQTimetable = retime(ZVCFTableTimetable, 'regular', 'spline', 'TimeStep', seconds(TsQ));
ZVCFTableQ = timetable2table(ZVCFTableQTimetable, 'ConvertRowTimes', true);
ZVCFTableQ = renamevars(ZVCFTableQ, 't', 'Time');

save(fullfile(tablesDir, 'ZVCFTable.mat'), 'ZVCFTable');
save(fullfile(tablesDir, 'ZVCFTableQ.mat'), 'ZVCFTableQ');
fprintf('ZVCF tables saved to %s.\n', tablesDir);

% --- Call Plotting Scripts ---
fprintf('Generating plots...\n');
% Assuming plotting scripts are functions that accept the Q tables
% and other necessary data (like the ClubQuiver structs) as inputs.
% Update these calls to pass the tables and structs.

% Example calls (adjust function names and arguments as needed)
% MASTER_SCRIPT_BaseDataCharts_3D(BASEQ, ClubQuiverAlphaReversal, ClubQuiverMaxCHS); % Example
% MASTER_SCRIPT_ZTCFCharts_3D(ZTCFQ, ClubQuiverZTCFAlphaReversal, ClubQuiverMaxCHS); % Example
% MASTER_SCRIPT_DeltaCharts_3D(DELTAQ, ClubQuiverDELTAAlphaReversal, ClubQuiverMaxCHS); % Example
% MASTER_SCRIPT_ComparisonCharts_3D(BASEQ, ZTCFQ, DELTAQ, ClubQuiverAlphaReversal, ClubQuiverMaxCHS, ClubQuiverZTCFAlphaReversal, ClubQuiverDELTAAlphaReversal); % Example
% MASTER_SCRIPT_ZVCF_CHARTS_3D(ZVCFTableQ, DELTAQ); % Example ZVCF vs Delta comparison

% Your original script just called other master scripts.
% If those master scripts handle loading data themselves, ensure they load the correct .mat files saved above.
% If they are also converted to functions, call them with the generated tables.
% For now, let's assume they load from the 'Tables' directory.
cd(fullfile(projectRoot, 'Scripts')); % Change back to Scripts directory to call other scripts by name

% Call the main plotting orchestrator script/function
% Assuming MASTER_SCRIPT_AllCharts_3D is now a function
MASTER_SCRIPT_AllCharts_3D(BASEQ, ZTCFQ, DELTAQ, ZVCFTableQ); % Pass the Q tables and ZVCFQ

fprintf('Plot generation complete.\n');

% --- Generate Results Folder ---
fprintf('Generating results folder...\n');
% Assuming SCRIPT_ResultsFolderGeneration_3D is updated to use fullfile
% and copy the correct files (including the new Q tables)
SCRIPT_ResultsFolderGeneration_3D;
fprintf('Results folder generated.\n');

% --- Final Cleanup ---
% Close models if desired
close_system(kineticModelName, 0); % Close without saving changes
close_system(zvcfModelName, 0); % Close without saving changes

% Clear variables that are no longer needed
clear mdlWks mdlWks_zvcf;
clear BaseData ZTCFTable; % Clear the original time step tables
clear BASEQTimetable ZTCFQTimetable DELTAQTimetable ZVCFTableTimetable ZVCFTableQTimetable;
clear zvcfSampleTimes numZVCFSims in_zvcf_array zvcfPercentComplete currentOutput currentZVCFDataTable zvcfRow;
clear hipJointTorque torsoJointTorque lscapJointTorqueX lscapJointTorqueY rscapJointTorqueX rscapJointTorqueY lshoulderJointTorqueX lshoulderJointTorqueY lshoulderJointTorqueZ rshoulderJointTorqueX rshoulderJointTorqueY rshoulderJointTorqueZ lelbowJointTorque relbowJointTorque lwristJointTorqueX lwristJointTorqueY rwristJointTorqueX rwristJointTorqueY;
clear hipPosition torsoPosition lscapPositionX lscapPositionY rscapPositionX rscapPositionY lshoulderPositionX lshoulderPositionY lshoulderPositionZ rshoulderPositionX rshoulderPositionY rshoulderPositionZ lelbowPosition relbowPosition lwristPositionX lwristPositionY rwristPositionX rwristPositionY;
clear in_ztcf_array in_ztcf currentTime numZTCSims ztcfSampleTimes;
clear projectRoot tablesDir; % Clear path variables if not needed
clear SummaryTable ClubQuiverAlphaReversal ClubQuiverMaxCHS ClubQuiverZTCFAlphaReversal ClubQuiverDELTAAlphaReversal; % Clear these after saving if not needed later

fprintf('Master script execution finished.\n');

%%% END FILE: MASTER_SCRIPT_ZTCF_ZVCF_PLOT_GENERATOR_3D.m %%%

%%% END FILE: MASTER_SCRIPT_ZTCF_ZVCF_PLOT_GENERATOR_3D.m %%%

%%% START FILE: Functions\IdentifyLoggedSignals.m %%%
% Identify Logged Signals (Option to Delete)

% Load model if not already open
if ~bdIsLoaded('GolfSwing3D_KineticallyDriven')
    load_system('GolfSwing3D_KineticallyDriven');
end

% Find all lines with signal logging enabled
loggedLines = find_system('GolfSwing3D_KineticallyDriven', 'FindAll', 'on', 'Type', 'line', 'SignalLogging', 'on');

% % Disable signal logging for each
% for i = 1:length(loggedLines)
%     set(loggedLines(i), 'SignalLogging', 'off');
% end
% 
% % Save the model (optional)
% save_system('GolfSwing3D_KineticallyDriven');

fprintf('Logged Signals', loggedLines);

%%% END FILE: Functions\IdentifyLoggedSignals.m %%%

%%% START FILE: Functions\calculatePathVectors3D.m %%%
function [BASEQ, ZTCFQ, DELTAQ] = calculatePathVectors3D(BASEQ, ZTCFQ, DELTAQ)
% CALCULATEPATHVECTORS3D Computes 3D path vectors for Clubhead and Midpoint Hand.
%   [BASEQ, ZTCFQ, DELTAQ] = CALCULATEPATHVECTORS3D(BASEQ, ZTCFQ, DELTAQ)
%   calculates the 3D displacement vectors between consecutive time steps
%   for the Clubhead (CH) and Midpoint Hand (MP) based on their position
%   coordinates in the input tables. The calculated vectors (CHPx, CHPy,
%   CHPz, MPPx, MPPy, MPPz) are added as new columns to the respective tables.
%
%   This function operates on tables that are expected to be on a uniform
%   time grid, typically the 'Q' tables (BASEQ, ZTCFQ, DELTAQ).
%
%   Input:
%       BASEQ  - Table containing Base data on a uniform time grid,
%                including columns 'CHx', 'CHy', 'CHz', 'MPx', 'MPy', 'MPz'.
%       ZTCFQ  - Table containing ZTCF data on the same uniform time grid,
%                including columns 'CHx', 'CHy', 'CHz', 'MPx', 'MPy', 'MPz'.
%       DELTAQ - Table containing Delta data on the same uniform time grid,
%                including columns 'CHx', 'CHy', 'CHz', 'MPx', 'MPy', 'MPz'.
%
%   Output:
%       BASEQ  - Updated BASEQ table with added path vector columns.
%       ZTCFQ  - Updated ZTCFQ table with added path vector columns.
%       DELTAQ - Updated DELTAQ table with added path vector columns.

% --- Compute Clubhead Path Vectors (CHPx, CHPy, CHPz) ---
% Calculated as the displacement from one time step to the next.
% The original script assigned the difference (t+dt - t) to time t.
% It also copied the second-to-last difference to the last row.
% We replicate this logic using vectorized operations.

% Calculate differences using diff. This results in a vector of size N-1.
diffCHx_BASEQ = diff(BASEQ.CHx);
diffCHy_BASEQ = diff(BASEQ.CHy);
diffCHz_BASEQ = diff(BASEQ.CHz);

diffCHx_ZTCFQ = diff(ZTCFQ.CHx);
diffCHy_ZTCFQ = diff(ZTCFQ.CHy);
diffCHz_ZTCFQ = diff(ZTCFQ.CHz);

diffCHx_DELTAQ = diff(DELTAQ.CHx);
diffCHy_DELTAQ = diff(DELTAQ.CHy);
diffCHz_DELTAQ = diff(DELTAQ.CHz);

% Replicate the original script's logic: copy the last difference to the final row.
% This makes the resulting vector the same length as the original table.
BASEQ.("CHPx") = [diffCHx_BASEQ; diffCHx_BASEQ(end)];
BASEQ.("CHPy") = [diffCHy_BASEQ; diffCHy_BASEQ(end)];
BASEQ.("CHPz") = [diffCHz_BASEQ; diffCHz_BASEQ(end)];

ZTCFQ.("CHPx") = [diffCHx_ZTCFQ; diffCHx_ZTCFQ(end)];
ZTCFQ.("CHPy") = [diffCHy_ZTCFQ; diffCHy_ZTCFQ(end)];
ZTCFQ.("CHPz") = [diffCHz_ZTCFQ; diffCHz_ZTCFQ(end)];

DELTAQ.("CHPx") = [diffCHx_DELTAQ; diffCHx_DELTAQ(end)];
DELTAQ.("CHPy") = [diffCHy_DELTAQ; diffCHy_DELTAQ(end)];
DELTAQ.("CHPz") = [diffCHz_DELTAQ; diffCHz_DELTAQ(end)];


% --- Compute Midpoint Hand Path Vectors (MPPx, MPPy, MPPz) ---
% Calculated as the displacement from one time step to the next, similar to CH.

% Calculate differences using diff.
diffMPx_BASEQ = diff(BASEQ.MPx);
diffMPy_BASEQ = diff(BASEQ.MPy);
diffMPz_BASEQ = diff(BASEQ.MPz);

diffMPx_ZTCFQ = diff(ZTCFQ.MPx);
diffMPy_ZTCFQ = diff(ZTCFQ.MPy);
diffMPz_ZTCFQ = diff(ZTCFQ.MPz);

diffMPx_DELTAQ = diff(DELTAQ.MPx);
diffMPy_DELTAQ = diff(DELTAQ.MPy);
diffMPz_DELTAQ = diff(DELTAQ.MPz);

% Replicate the original script's logic: copy the last difference to the final row.
BASEQ.("MPPx") = [diffMPx_BASEQ; diffMPx_BASEQ(end)];
BASEQ.("MPPy") = [diffMPy_BASEQ; diffMPy_BASEQ(end)];
BASEQ.("MPPz") = [diffMPz_BASEQ; diffMPz_BASEQ(end)];

ZTCFQ.("MPPx") = [diffMPx_ZTCFQ; diffMPx_ZTCFQ(end)];
ZTCFQ.("MPPy") = [diffMPy_ZTCFQ; diffMPy_ZTCFQ(end)];
ZTCFQ.("MPPz") = [diffMPz_ZTCFQ; diffMPz_ZTCFQ(end)];

DELTAQ.("MPPx") = [diffMPx_DELTAQ; diffMPx_DELTAQ(end)];
DELTAQ.("MPPy") = [diffMPy_DELTAQ; diffMPy_DELTAQ(end)];
DELTAQ.("MPPz") = [diffMPz_DELTAQ; diffMPz_DELTAQ(end)];

% No need for explicit 'clear' statements within a function.
% Temporary variables like diffCHx_BASEQ are local and will be cleared automatically.

end

%%% END FILE: Functions\calculatePathVectors3D.m %%%

%%% START FILE: Functions\calculateTotalWorkAndPower3D.m %%%
function [BASEQ_updated, ZTCFQ_updated, DELTAQ_updated] = calculateTotalWorkAndPower3D(BASEQ, ZTCFQ, DELTAQ)
% CALCULATETOTALWORKANDPOWER3D Computes total and fractional work and power for segments.
%   [BASEQ_updated, ZTCFQ_updated, DELTAQ_updated] = CALCULATETOTALWORKANDPOWER3D(BASEQ, ZTCFQ, DELTAQ)
%   Calculates the total work (Linear Work + Angular Work) and total power
%   (Linear Power + Angular Power) for various body segments in the BASEQ,
%   ZTCFQ, and DELTAQ tables. It also calculates the fractional work and
%   power contributed by the ZTCF and DELTA components relative to the BASE
%   case and adds these as new columns to the BASEQ table.
%
%   This function is the converted version of SCRIPT_TotalWorkandPowerCalculation_3D.m.
%   It operates on tables expected to be on a uniform time grid (like the 'Q' tables),
%   and assumes that linear and angular work/power columns have already been added
%   (e.g., by calculateWorkAndImpulse3D).
%
%   Input:
%       BASEQ  - Table containing Base data on a uniform time grid,
%                including linear/angular work and power columns.
%       ZTCFQ  - Table containing ZTCF data on the same uniform time grid,
%                including linear/angular work and power columns.
%       DELTAQ - Table containing Delta data on the same uniform time grid,
%                including linear/angular work and power columns.
%
%   Output:
%       BASEQ_updated  - Updated BASEQ table with total and fractional work/power columns.
%       ZTCFQ_updated  - Updated ZTCFQ table with total work/power columns.
%       DELTAQ_updated - Updated DELTAQ table with total work/power columns.

% Assign input tables to internal variables for modification
BASEQ_updated = BASEQ;
ZTCFQ_updated = ZTCFQ;
DELTAQ_updated = DELTAQ;

% --- Generate Total Work and Power Vectors ---
% Sum the linear and angular components for each segment and table.
% Ensure the required linear and angular work/power columns exist before summing.

% Define the required columns for calculating total work and power
requiredWorkPowerInputCols = {
    'LSLinearWorkonArm', 'LSAngularWorkonArm', 'LSonArmLinearPower', 'LSonArmAngularPower', ...
    'RSLinearWorkonArm', 'RSAngularWorkonArm', 'RSonArmLinearPower', 'RSonArmAngularPower', ...
    'LELinearWorkonForearm', 'LEAngularWorkonForearm', 'LEonForearmLinearPower', 'LEonForearmAngularPower', ...
    'RELinearWorkonForearm', 'REAngularWorkonForearm', 'REonForearmLinearPower', 'REonForearmAngularPower', ...
    'LHLinearWorkonClub', 'LHAngularWorkonClub', 'LHonClubLinearPower', 'LHonClubAngularPower', ... % Assuming LH/RH naming
    'RHLinearWorkonClub', 'RHAngularWorkonClub', 'RHonClubLinearPower', 'RHonClubAngularPower' % Assuming LH/RH naming
};

% Helper function to check if all columns exist in a table
checkCols = @(tbl, cols) all(ismember(cols, tbl.Properties.VariableNames));

% Check if input tables have the necessary columns
if checkCols(BASEQ_updated, requiredWorkPowerInputCols) && ...
   checkCols(ZTCFQ_updated, requiredWorkPowerInputCols) && ...
   checkCols(DELTAQ_updated, requiredWorkPowerInputCols)

    % BASEQ
    BASEQ_updated.TotalLSWork = BASEQ_updated.LSLinearWorkonArm + BASEQ_updated.LSAngularWorkonArm;
    BASEQ_updated.TotalRSWork = BASEQ_updated.RSLinearWorkonArm + BASEQ_updated.RSAngularWorkonArm;
    BASEQ_updated.TotalLEWork = BASEQ_updated.LELinearWorkonForearm + BASEQ_updated.LEAngularWorkonForearm;
    BASEQ_updated.TotalREWork = BASEQ_updated.RELinearWorkonForearm + BASEQ_updated.REAngularWorkonForearm;
    BASEQ_updated.TotalLHWork = BASEQ_updated.LHLinearWorkonClub + BASEQ_updated.LHAngularWorkonClub; % Assuming LH/RH naming
    BASEQ_updated.TotalRHWork = BASEQ_updated.RHLinearWorkonClub + BASEQ_updated.RHAngularWorkonClub; % Assuming LH/RH naming

    BASEQ_updated.TotalLSPower = BASEQ_updated.LSonArmLinearPower + BASEQ_updated.LSonArmAngularPower;
    BASEQ_updated.TotalRSPower = BASEQ_updated.RSonArmLinearPower + BASEQ_updated.RSonArmAngularPower;
    BASEQ_updated.TotalLEPower = BASEQ_updated.LEonForearmLinearPower + BASEQ_updated.LEonForearmAngularPower;
    BASEQ_updated.TotalREPower = BASEQ_updated.REonForearmLinearPower + BASEQ_updated.REonForearmAngularPower;
    BASEQ_updated.TotalLHPower = BASEQ_updated.LHonClubLinearPower + BASEQ_updated.LHonClubAngularPower; % Assuming LH/RH naming
    BASEQ_updated.TotalRHPower = BASEQ_updated.RHonClubLinearPower + BASEQ_updated.RHonClubAngularPower; % Assuming LH/RH naming

    % ZTCFQ
    ZTCFQ_updated.TotalLSWork = ZTCFQ_updated.LSLinearWorkonArm + ZTCFQ_updated.LSAngularWorkonArm;
    ZTCFQ_updated.TotalRSWork = ZTCFQ_updated.RSLinearWorkonArm + ZTCFQ_updated.RSAngularWorkonArm;
    ZTCFQ_updated.TotalLEWork = ZTCFQ_updated.LELinearWorkonForearm + ZTCFQ_updated.LEAngularWorkonForearm;
    ZTCFQ_updated.TotalREWork = ZTCFQ_updated.RELinearWorkonForearm + ZTCFQ_updated.REAngularWorkonForearm;
    ZTCFQ_updated.TotalLHWork = ZTCFQ_updated.LHLinearWorkonClub + ZTCFQ_updated.LHAngularWorkonClub; % Assuming LH/RH naming
    ZTCFQ_updated.TotalRHWork = ZTCFQ_updated.RHLinearWorkonClub + ZTCFQ_updated.RHAngularWorkonClub; % Assuming LH/RH naming

    ZTCFQ_updated.TotalLSPower = ZTCFQ_updated.LSonArmLinearPower + ZTCFQ_updated.LSonArmAngularPower;
    ZTCFQ_updated.TotalRSPower = ZTCFQ_updated.RSonArmLinearPower + ZTCFQ_updated.RSonArmAngularPower;
    ZTCFQ_updated.TotalLEPower = ZTCFQ_updated.LEonForearmLinearPower + ZTCFQ_updated.LEonForearmAngularPower;
    ZTCFQ_updated.TotalREPower = ZTCFQ_updated.REonForearmLinearPower + ZTCFQ_updated.REonForearmAngularPower;
    ZTCFQ_updated.TotalLHPower = ZTCFQ_updated.LHonClubLinearPower + ZTCFQ_updated.LHonClubAngularPower; % Assuming LH/RH naming
    ZTCFQ_updated.TotalRHPower = ZTCFQ_updated.RHonClubLinearPower + ZTCFQ_updated.RHonClubAngularPower; % Assuming LH/RH naming

    % DELTAQ
    DELTAQ_updated.TotalLSWork = DELTAQ_updated.LSLinearWorkonArm + DELTAQ_updated.LSAngularWorkonArm;
    DELTAQ_updated.TotalRSWork = DELTAQ_updated.RSLinearWorkonArm + DELTAQ_updated.RSAngularWorkonArm;
    DELTAQ_updated.TotalLEWork = DELTAQ_updated.LELinearWorkonForearm + DELTAQ_updated.LEAngularWorkonForearm;
    DELTAQ_updated.TotalREWork = DELTAQ_updated.RELinearWorkonForearm + DELTAQ_updated.REAngularWorkonForearm;
    DELTAQ_updated.TotalLHWork = DELTAQ_updated.LHLinearWorkonClub + DELTAQ_updated.LHAngularWorkonClub; % Assuming LH/RH naming
    DELTAQ_updated.TotalRHWork = DELTAQ_updated.RHLinearWorkonClub + DELTAQ_updated.RHAngularWorkonClub; % Assuming LH/RH naming

    DELTAQ_updated.TotalLSPower = DELTAQ_updated.LSonArmLinearPower + DELTAQ_updated.LSonArmAngularPower;
    DELTAQ_updated.TotalRSPower = DELTAQ_updated.RSonArmLinearPower + DELTAQ_updated.RSonArmAngularPower;
    DELTAQ_updated.TotalLEPower = DELTAQ_updated.LEonForearmLinearPower + DELTAQ_updated.LEonForearmAngularPower;
    DELTAQ_updated.TotalREPower = DELTAQ_updated.REonForearmLinearPower + DELTAQ_updated.REonForearmAngularPower;
    DELTAQ_updated.TotalLHPower = DELTAQ_updated.LHonClubLinearPower + DELTAQ_updated.LHonClubAngularPower; % Assuming LH/RH naming
    DELTAQ_updated.TotalRHPower = DELTAQ_updated.RHonClubLinearPower + DELTAQ_updated.RHonClubAngularPower; % Assuming LH/RH naming

else
    warning('Required linear/angular work/power columns not found in input tables. Cannot calculate total work/power.');
    % Return updated tables as is if columns are missing
    BASEQ_updated = BASEQ;
    ZTCFQ_updated = ZTCFQ;
    DELTAQ_updated = DELTAQ;
    return; % Exit the function
end


% --- Calculate the fraction of work and power being done by the ZTCF and DELTA ---
% This calculation is added as new columns to the BASEQ table.
% Avoid division by zero or very small numbers in the denominator (BASEQ Total values).
% Replace Inf/NaN results with 0 or NaN as appropriate.

% Define the required Total columns for fractional calculations
requiredTotalCols = {
    'TotalLSWork', 'TotalLSPower', 'TotalRSWork', 'TotalRSPower', ...
    'TotalLEWork', 'TotalLEPower', 'TotalREWork', 'TotalREPower', ...
    'TotalLHWork', 'TotalLHPower', 'TotalRHWork', 'TotalRHPower' % Assuming LH/RH naming
};

% Check if input tables have the necessary total columns
if checkCols(BASEQ_updated, requiredTotalCols) && ...
   checkCols(ZTCFQ_updated, requiredTotalCols) && ...
   checkCols(DELTAQ_updated, requiredTotalCols)

    % Helper function to safely divide, handling division by zero or near-zero denominators
    safeDivide = @(numerator, denominator) numerator ./ (denominator + eps(class(denominator)) * (abs(denominator) < eps(class(denominator)))); % Use eps based on data type

    % Calculate Fraction of Work and Power Done by ZTCF
    BASEQ_updated.ZTCFQLSFractionalWork = safeDivide(ZTCFQ_updated.TotalLSWork, BASEQ_updated.TotalLSWork);
    BASEQ_updated.ZTCFQRSFractionalWork = safeDivide(ZTCFQ_updated.TotalRSWork, BASEQ_updated.TotalRSWork);
    BASEQ_updated.ZTCFQLEFractionalWork = safeDivide(ZTCFQ_updated.TotalLEWork, BASEQ_updated.TotalLEWork);
    BASEQ_updated.ZTCFQREFractionalWork = safeDivide(ZTCFQ_updated.TotalREWork, BASEQ_updated.TotalREWork);
    BASEQ_updated.ZTCFQLHFractionalWork = safeDivide(ZTCFQ_updated.TotalLHWork, BASEQ_updated.TotalLHWork); % Assuming LH/RH naming
    BASEQ_updated.ZTCFQRHFractionalWork = safeDivide(ZTCFQ_updated.TotalRHWork, BASEQ_updated.TotalRHWork); % Assuming LH/RH naming

    BASEQ_updated.ZTCFQLSFractionalPower = safeDivide(ZTCFQ_updated.TotalLSPower, BASEQ_updated.TotalLSPower);
    BASEQ_updated.ZTCFQRSFractionalPower = safeDivide(ZTCFQ_updated.TotalRSPower, BASEQ_updated.TotalRSPower);
    BASEQ_updated.ZTCFQLEFractionalPower = safeDivide(ZTCFQ_updated.TotalLEPower, BASEQ_updated.TotalLEPower);
    BASEQ_updated.ZTCFQREFractionalPower = safeDivide(ZTCFQ_updated.TotalREPower, BASEQ_updated.TotalREPower);
    BASEQ_updated.ZTCFQLHFractionalPower = safeDivide(ZTCFQ_updated.TotalLHPower, BASEQ_updated.TotalLHPower); % Assuming LH/RH naming
    BASEQ_updated.ZTCFQRHFractionalPower = safeDivide(ZTCFQ_updated.TotalRHPower, BASEQ_updated.TotalRHPower); % Assuming LH/RH naming

    % Calculate Fraction of Work and Power Done by DELTA
    BASEQ_updated.DELTAQLSFractionalWork = safeDivide(DELTAQ_updated.TotalLSWork, BASEQ_updated.TotalLSWork);
    BASEQ_updated.DELTAQRSFractionalWork = safeDivide(DELTAQ_updated.TotalRSWork, BASEQ_updated.TotalRSWork);
    BASEQ_updated.DELTAQLEFractionalWork = safeDivide(DELTAQ_updated.TotalLEWork, BASEQ_updated.TotalLEWork);
    BASEQ_updated.DELTAQREFractionalWork = safeDivide(DELTAQ_updated.TotalREWork, BASEQ_updated.TotalREWork);
    BASEQ_updated.DELTAQLHFractionalWork = safeDivide(DELTAQ_updated.TotalLHWork, BASEQ_updated.TotalLHWork); % Assuming LH/RH naming
    BASEQ_updated.DELTAQRHFractionalWork = safeDivide(DELTAQ_updated.TotalRHWork, BASEQ_updated.TotalRHWork); % Assuming LH/RH naming

    BASEQ_updated.DELTAQLSFractionalPower = safeDivide(DELTAQ_updated.TotalLSPower, BASEQ_updated.TotalLSPower);
    BASEQ_updated.DELTAQRSFractionalPower = safeDivide(DELTAQ_updated.TotalRSPower, BASEQ_updated.TotalRSPower);
    BASEQ_updated.DELTAQLEFractionalPower = safeDivide(DELTAQ_updated.TotalLEPower, BASEQ_updated.TotalLEPower);
    BASEQ_updated.DELTAQREFractionalPower = safeDivide(DELTAQ_updated.TotalREPower, BASEQ_updated.TotalREPower);
    BASEQ_updated.DELTAQLHFractionalPower = safeDivide(DELTAQ_updated.TotalLHPower, BASEQ_updated.TotalLHPower); % Assuming LH/RH naming
    BASEQ_updated.DELTAQRHFractionalPower = safeDivide(DELTAQ_updated.TotalRHPower, BASEQ_updated.TotalRHPower); % Assuming LH/RH naming

else
    warning('Required total work/power columns not found for fractional calculations. Skipping fractional calculations.');
    % Initialize fractional columns to NaN if needed for consistency
    fractionalWorkFields = {'ZTCFQLSFractionalWork', 'ZTCFQRSFractionalWork', 'ZTCFQLEFractionalWork', 'ZTCFQREFractionalWork', 'ZTCFQLHFractionalWork', 'ZTCFQRHFractionalWork', ...
                            'DELTAQLSFractionalWork', 'DELTAQRSFractionalWork', 'DELTAQLEFractionalWork', 'DELTAQREFractionalWork', 'DELTAQLHFractionalWork', 'DELTAQRHFractionalWork'};
    fractionalPowerFields = {'ZTCFQLSFractionalPower', 'ZTCFQRSFractionalPower', 'ZTCFQLEFractionalPower', 'ZTCFQREFractionalPower', 'ZTCFQLHFractionalPower', 'ZTCFQRHFractionalPower', ...
                             'DELTAQLSFractionalPower', 'DELTAQRSFractionalPower', 'DELTAQLEFractionalPower', 'DELTAQREFractionalPower', 'DELTAQLHFractionalPower', 'DELTAQRHFractionalPower'};

     for k = 1:length(fractionalWorkFields)
         BASEQ_updated.(fractionalWorkFields{k}) = NaN(height(BASEQ_updated), 1);
     end
      for k = 1:length(fractionalPowerFields)
         BASEQ_updated.(fractionalPowerFields{k}) = NaN(height(BASEQ_updated), 1);
     end
end


% No need for explicit 'clear' statements within a function.
% All intermediate variables are local and cleared automatically.

end

%%% END FILE: Functions\calculateTotalWorkAndPower3D.m %%%

%%% START FILE: Functions\calculateWorkAndImpulse3D.m %%%
function [ZTCFQ_updated, DELTAQ_updated] = calculateWorkAndImpulse3D(ZTCFQ, DELTAQ)
% CALCULATEWORKANDIMPULSE3D Numerically computes work and impulse for segments.
%   [ZTCFQ_updated, DELTAQ_updated] = CALCULATEWORKANDIMPULSE3D(ZTCFQ, DELTAQ)
%   Calculates linear work (integral of Power = F.V), linear impulse (integral of F),
%   angular work (integral of Angular Power = T.AV), and angular impulse
%   (integral of Sum of Moments) for various body segments based on the
%   data in the ZTCFQ and DELTAQ tables. New columns for these calculated
%   values are added to the output tables.
%
%   This function is the converted version of SCRIPT_UpdateCalcsforImpulseandWork_3D.m.
%   It operates on tables expected to be on a uniform time grid (like the 'Q' tables).
%
%   Input:
%       ZTCFQ  - Table containing ZTCF data on a uniform time grid,
%                including columns for forces, torques, velocities,
%                angular velocities, and sum of moments.
%       DELTAQ - Table containing Delta data on the same uniform time grid,
%                including columns for forces, torques, velocities,
%                angular velocities, and sum of moments.
%
%   Output:
%       ZTCFQ_updated  - Updated ZTCFQ table with added work and impulse columns.
%       DELTAQ_updated - Updated DELTAQ table with added work and impulse columns.

% Assign input tables to internal variables for modification
ZTCFQ_updated = ZTCFQ;
DELTAQ_updated = DELTAQ;

% --- Get Time Step (Assuming Uniform Grid) ---
% Calculate the time step from the input table's time vector.
% Since the tables are on a uniform TsQ grid, the difference between
% any two consecutive time points should be the time step.
if height(ZTCFQ_updated) > 1
    TsQ = ZTCFQ_updated.Time(2) - ZTCFQ_updated.Time(1);
else
    % Handle case with 0 or 1 data point (cannot calculate impulse/work)
    warning('Input table has less than 2 rows. Cannot calculate work/impulse.');
    % Return the original tables without adding columns
    return;
end

% --- Process ZTCFQ Table ---

fprintf('Calculating work and impulse for ZTCFQ...\n');

% Extract necessary data columns from ZTCFQ
% Ensure these column names match your logged signals from the 3D model
try
    % Forces (Global frame, expected as Nx3)
    F_ZTCF = ZTCFQ_updated{:, ["TotalHandForceGlobalX", "TotalHandForceGlobalY", "TotalHandForceGlobalZ"]};
    LHF_ZTCF = ZTCFQ_updated{:, ["LHonClubFGlobalX", "LHonClubFGlobalY", "LHonClubFGlobalZ"]};
    RHF_ZTCF = ZTCFQ_updated{:, ["RHonClubFGlobalX", "RHonClubFGlobalY", "RHonClubFGlobalZ"]};
    LEF_ZTCF = ZTCFQ_updated{:, ["LArmonLForearmFGlobalX", "LArmonLForearmFGlobalY", "LArmonLForearmFGlobalZ"]};
    REF_ZTCF = ZTCFQ_updated{:, ["RArmonRForearmFGlobalX", "RArmonRForearmFGlobalY", "RArmonRForearmFGlobalZ"]};
    LSF_ZTCF = ZTCFQ_updated{:, ["LSonLArmFGlobalX", "LSonLArmFGlobalY", "LSonLArmFGlobalZ"]};
    RSF_ZTCF = ZTCFQ_updated{:, ["RSonRArmFGlobalX", "RSonRArmFGlobalY", "RSonRArmFGlobalZ"]};

    % Sum of Moments (Global frame, expected as Nx3) - Used for Angular Impulse
    SUMLS_ZTCF = ZTCFQ_updated{:, ["SumofMomentsLSonLArmX", "SumofMomentsLSonLArmY", "SumofMomentsLSonLArmZ"]};
    SUMRS_ZTCF = ZTCFQ_updated{:, ["SumofMomentsRSonRArmX", "SumofMomentsRSonRArmY", "SumofMomentsRSonRArmZ"]};
    SUMLE_ZTCF = ZTCFQ_updated{:, ["SumofMomentsLEonLForearmX", "SumofMomentsLEonLForearmY", "SumofMomentsLEonLForearmZ"]};
    SUMRE_ZTCF = ZTCFQ_updated{:, ["SumofMomentsREonRForearmX", "SumofMomentsREonRForearmY", "SumofMomentsREonRForearmZ"]};
    % Assuming LH/RH naming for wrist moments
    SUMLH_ZTCF = ZTCFQ_updated{:, ["SumofMomentsLHonClubX", "SumofMomentsLHonClubY", "SumofMomentsLHonClubZ"]};
    SUMRH_ZTCF = ZTCFQ_updated{:, ["SumofMomentsRHonClubX", "SumofMomentsRHonClubY", "SumofMomentsRHonClubZ"]};

    % Torques (Global frame, expected as Nx3) - Used for Angular Work
    TLS_ZTCF = ZTCFQ_updated{:, ["LSonLArmTGlobalX", "LSonLArmTGlobalY", "LSonLArmTGlobalZ"]};
    TRS_ZTCF = ZTCFQ_updated{:, ["RSonRArmTGlobalX", "RSonRArmTGlobalY", "RSonRArmTGlobalZ"]};
    TLE_ZTCF = ZTCFQ_updated{:, ["LArmonLForearmTGlobalX", "LArmonLForearmTGlobalY", "LArmonLForearmTGlobalZ"]};
    TRE_ZTCF = ZTCFQ_updated{:, ["RArmonRForearmTGlobalX", "RArmonRForearmTGlobalY", "RArmonRForearmTGlobalZ"]};
    % Assuming LH/RH naming for wrist torques
    TLH_ZTCF = ZTCFQ_updated{:, ["LHonClubTGlobalX", "LHonClubTGlobalY", "LHonClubTGlobalZ"]};
    TRH_ZTCF = ZTCFQ_updated{:, ["RHonClubTGlobalX", "RHonClubTGlobalY", "RHonClubTGlobalZ"]};

    % Velocities (Global frame, expected as Nx3)
    V_ZTCF = ZTCFQ_updated{:, ["MidHandVelocityX", "MidHandVelocityY", "MidHandVelocityZ"]};
    LHV_ZTCF = ZTCFQ_updated{:, ["LeftHandVelocityX", "LeftHandVelocityY", "LeftHandVelocityZ"]};
    RHV_ZTCF = ZTCFQ_updated{:, ["RightHandVelocityX", "RightHandVelocityY", "RightHandVelocityZ"]};
    LEV_ZTCF = ZTCFQ_updated{:, ["LEvGlobalX", "LEvGlobalY", "LEvGlobalZ"]};
    REV_ZTCF = ZTCFQ_updated{:, ["REvGlobalX", "REvGlobalY", "REvGlobalZ"]};
    LSV_ZTCF = ZTCFQ_updated{:, ["LSvGlobalX", "LSvGlobalY", "LSvGlobalZ"]};
    RSV_ZTCF = ZTCFQ_updated{:, ["RSvGlobalX", "RSvGlobalY", "RSvGlobalZ"]};

    % Angular Velocities (Global frame, expected as Nx3)
    LSAV_ZTCF = ZTCFQ_updated{:, ["LSAVGlobalX", "LSAVGlobalY", "LSAVGlobalZ"]};
    RSAV_ZTCF = ZTCFQ_updated{:, ["RSAVGlobalX", "RSAVGlobalY", "RSAVGlobalZ"]};
    LEAV_ZTCF = ZTCFQ_updated{:, ["LEAVGlobalX", "LEAVGlobalY", "LEAVGlobalZ"]};
    REAV_ZTCF = ZTCFQ_updated{:, ["REAVGlobalX", "REAVGlobalY", "REAVGlobalZ"]};
    LHAV_ZTCF = ZTCFQ_updated{:, ["LeftWristGlobalAVX", "LeftWristGlobalAVY", "LeftWristGlobalAVZ"]};
    RHAV_ZTCF = ZTCFQ_updated{:, ["RightWristGlobalAVX", "RightWristGlobalAVY", "RightWristGlobalAVZ"]};

catch ME
    warning('Error extracting required columns for ZTCFQ calculations: %s', ME.message);
    % Return the original tables as is if columns are missing
    ZTCFQ_updated = ZTCFQ;
    DELTAQ_updated = DELTAQ;
    return; % Exit the function
end


% Calculate Linear Power (Dot product of Force and Linear Velocity)
P_ZTCF = sum(F_ZTCF .* V_ZTCF, 2); % Element-wise product then sum across columns
LHP_ZTCF = sum(LHF_ZTCF .* LHV_ZTCF, 2);
RHP_ZTCF = sum(RHF_ZTCF .* RHV_ZTCF, 2);
LEP_ZTCF = sum(LEF_ZTCF .* LEV_ZTCF, 2);
REP_ZTCF = sum(REF_ZTCF .* REV_ZTCF, 2);
LSP_ZTCF = sum(LSF_ZTCF .* LSV_ZTCF, 2);
RSP_ZTCF = sum(RSF_ZTCF .* RSV_ZTCF, 2);

% Calculate Angular Power (Dot product of Torque and Angular Velocity)
LSAP_ZTCF = sum(TLS_ZTCF .* LSAV_ZTCF, 2);
RSAP_ZTCF = sum(TRS_ZTCF .* RSAV_ZTCF, 2);
LEAP_ZTCF = sum(TLE_ZTCF .* LEAV_ZTCF, 2);
REAP_ZTCF = sum(TRE_ZTCF .* REAV_ZTCF, 2);
LHAP_ZTCF = sum(TLH_ZTCF .* LHAV_ZTCF, 2);
RHAP_ZTCF = sum(TRH_ZTCF .* RHAV_ZTCF, 2);


% Numerically Integrate to find Work and Impulse (using cumtrapz)
% cumtrapz(X, Y) integrates Y with respect to X. Using Time is more robust.
timeVec = ZTCFQ_updated.Time;

% Linear Work (Integral of Linear Power)
ZTCFQ_updated.("LinearWorkonClub") = cumtrapz(timeVec, P_ZTCF);
ZTCFQ_updated.("LHLinearWorkonClub") = cumtrapz(timeVec, LHP_ZTCF);
ZTCFQ_updated.("RHLinearWorkonClub") = cumtrapz(timeVec, RHP_ZTCF);
ZTCFQ_updated.("LELinearWorkonForearm") = cumtrapz(timeVec, LEP_ZTCF);
ZTCFQ_updated.("RELinearWorkonForearm") = cumtrapz(timeVec, REP_ZTCF);
ZTCFQ_updated.("LSLinearWorkonArm") = cumtrapz(timeVec, LSP_ZTCF);
ZTCFQ_updated.("RSLinearWorkonArm") = cumtrapz(timeVec, RSP_ZTCF);

% Linear Impulse (Integral of Force) - Note: cumtrapz on Nx3 matrix integrates each column
ZTCFQ_updated.("LinearImpulseonClub") = cumtrapz(timeVec, F_ZTCF);
ZTCFQ_updated.("LHLinearImpulseonClub") = cumtrapz(timeVec, LHF_ZTCF);
ZTCFQ_updated.("RHLinearImpulseonClub") = cumtrapz(timeVec, RHF_ZTCF);
ZTCFQ_updated.("LELinearImpulseonForearm") = cumtrapz(timeVec, LEF_ZTCF);
ZTCFQ_updated.("RELinearImpulseonForearm") = cumtrapz(timeVec, REF_ZTCF);
ZTCFQ_updated.("LSLinearImpulseonArm") = cumtrapz(timeVec, LSF_ZTCF);
ZTCFQ_updated.("RSLinearImpulseonArm") = cumtrapz(timeVec, RSF_ZTCF);

% Angular Impulse (Integral of Sum of Moments)
ZTCFQ_updated.("LSAngularImpulseonArm") = cumtrapz(timeVec, SUMLS_ZTCF);
ZTCFQ_updated.("RSAngularImpulseonArm") = cumtrapz(timeVec, SUMRS_ZTCF);
ZTCFQ_updated.("LEAngularImpulseonForearm") = cumtrapz(timeVec, SUMLE_ZTCF);
ZTCFQ_updated.("REAngularImpulseonForearm") = cumtrapz(timeVec, SUMRE_ZTCF);
ZTCFQ_updated.("LHAngularImpulseonClub") = cumtrapz(timeVec, SUMLH_ZTCF);
ZTCFQ_updated.("RHAngularImpulseonClub") = cumtrapz(timeVec, SUMRH_ZTCF);

% Angular Work (Integral of Angular Power)
ZTCFQ_updated.("LSAngularWorkonArm") = cumtrapz(timeVec, LSAP_ZTCF);
ZTCFQ_updated.("RSAngularWorkonArm") = cumtrapz(timeVec, RSAP_ZTCF);
ZTCFQ_updated.("LEAngularWorkonForearm") = cumtrapz(timeVec, LEAP_ZTCF);
ZTCFQ_updated.("REAngularWorkonForearm") = cumtrapz(timeVec, REAP_ZTCF);
ZTCFQ_updated.("LHAngularWorkonClub") = cumtrapz(timeVec, LHAP_ZTCF);
ZTCFQ_updated.("RHAngularWorkonClub") = cumtrapz(timeVec, RHAP_ZTCF);

fprintf('ZTCFQ work and impulse calculations complete.\n');

% --- Process DELTAQ Table ---

fprintf('Calculating work and impulse for DELTAQ...\n');

% Extract necessary data columns from DELTAQ
% Ensure these column names match your logged signals
try
    % Forces (Global frame, expected as Nx3)
    F_DELTA = DELTAQ_updated{:, ["TotalHandForceGlobalX", "TotalHandForceGlobalY", "TotalHandForceGlobalZ"]};
    LHF_DELTA = DELTAQ_updated{:, ["LHonClubFGlobalX", "LHonClubFGlobalY", "LHonClubFGlobalZ"]};
    RHF_DELTA = DELTAQ_updated{:, ["RHonClubFGlobalX", "RHonClubFGlobalY", "RHonClubFGlobalZ"]};
    LEF_DELTA = DELTAQ_updated{:, ["LArmonLForearmFGlobalX", "LArmonLForearmFGlobalY", "LArmonLForearmFGlobalZ"]};
    REF_DELTA = DELTAQ_updated{:, ["RArmonRForearmFGlobalX", "RArmonRForearmFGlobalY", "RArmonRForearmFGlobalZ"]};
    LSF_DELTA = DELTAQ_updated{:, ["LSonLArmFGlobalX", "LSonLArmFGlobalY", "LSonLArmFGlobalZ"]};
    RSF_DELTA = DELTAQ_updated{:, ["RSonRArmFGlobalX", "RSonRArmFGlobalY", "RSonRArmFGlobalZ"]};

    % Sum of Moments (Global frame, expected as Nx3) - Used for Angular Impulse
    SUMLS_DELTA = DELTAQ_updated{:, ["SumofMomentsLSonLArmX", "SumofMomentsLSonLArmY", "SumofMomentsLSonLArmZ"]};
    SUMRS_DELTA = DELTAQ_updated{:, ["SumofMomentsRSonRArmX", "SumofMomentsRSonRArmY", "SumofMomentsRSonRArmZ"]};
    SUMLE_DELTA = DELTAQ_updated{:, ["SumofMomentsLEonLForearmX", "SumofMomentsLEonLForearmY", "SumofMomentsLEonLForearmZ"]};
    SUMRE_DELTA = DELTAQ_updated{:, ["SumofMomentsREonRForearmX", "SumofMomentsREonRForearmY", "SumofMomentsREonRForearmZ"]};
    SUMLH_DELTA = DELTAQ_updated{:, ["SumofMomentsLHonClubX", "SumofMomentsLHonClubY", "SumofMomentsLHonClubZ"]};
    SUMRH_DELTA = DELTAQ_updated{:, ["SumofMomentsRHonClubX", "SumofMomentsRHonClubY", "SumofMomentsRHonClubZ"]};

    % Torques (Global frame, expected as Nx3) - Used for Angular Work
    TLS_DELTA = DELTAQ_updated{:, ["LSonLArmTGlobalX", "LSonLArmTGlobalY", "LSonLArmTGlobalZ"]};
    TRS_DELTA = DELTAQ_updated{:, ["RSonRArmTGlobalX", "RSonRArmTGlobalY", "RSonRArmTGlobalZ"]};
    TLE_DELTA = DELTAQ_updated{:, ["LArmonLForearmTGlobalX", "LArmonLForearmTGlobalY", "LArmonLForearmTGlobalZ"]};
    TRE_DELTA = DELTAQ_updated{:, ["RArmonRForearmTGlobalX", "RArmonRForearmTGlobalY", "RArmonRForearmTGlobalZ"]};
    TLH_DELTA = DELTAQ_updated{:, ["LHonClubTGlobalX", "LHonClubTGlobalY", "LHonClubTGlobalZ"]};
    TRH_DELTA = DELTAQ_updated{:, ["RHonClubTGlobalX", "RHonClubTGlobalY", "RHonClubTGlobalZ"]};

    % Velocities (Global frame, expected as Nx3) - NOTE: Using ZTCFQ velocities as in original script
    % This is a potential point of confusion/review. If DELTA represents the *difference*
    % in forces/torques, should it be multiplied by BASE velocities or DELTA velocities?
    % Sticking to original script's logic using ZTCFQ velocities for now.
    V_DELTA = ZTCFQ{:, ["MidHandVelocityX", "MidHandVelocityY", "MidHandVelocityZ"]};
    LHV_DELTA = ZTCFQ{:, ["LeftHandVelocityX", "LeftHandVelocityY", "LeftHandVelocityZ"]};
    RHV_DELTA = ZTCFQ{:, ["RightHandVelocityX", "RightHandVelocityY", "RightHandVelocityZ"]};
    LEV_DELTA = ZTCFQ{:, ["LEvGlobalX", "LEvGlobalY", "LEvGlobalZ"]};
    REV_DELTA = ZTCFQ{:, ["REvGlobalX", "REvGlobalY", "REvGlobalZ"]};
    LSV_DELTA = ZTCFQ{:, ["LSvGlobalX", "LSvGlobalY", "LSvGlobalZ"]};
    RSV_DELTA = ZTCFQ{:, ["RSvGlobalX", "RSvGlobalY", "RSvGlobalZ"]};

    % Angular Velocities (Global frame, expected as Nx3) - NOTE: Using ZTCFQ angular velocities as in original script
    LSAV_DELTA = ZTCFQ{:, ["LSAVGlobalX", "LSAVGlobalY", "LSAVGlobalZ"]};
    RSAV_DELTA = ZTCFQ{:, ["RSAVGlobalX", "RSAVGlobalY", "RSAVGlobalZ"]};
    LEAV_DELTA = ZTCFQ{:, ["LEAVGlobalX", "LEAVGlobalY", "LEAVGlobalZ"]};
    REAV_DELTA = ZTCFQ{:, ["REAVGlobalX", "REAVGlobalY", "REAVGlobalZ"]};
    LHAV_DELTA = ZTCFQ{:, ["LeftWristGlobalAVX", "LeftWristGlobalAVY", "LeftWristGlobalAVZ"]};
    RHAV_DELTA = ZTCFQ{:, ["RightWristGlobalAVX", "RightWristGlobalAVY", "RightWristGlobalAVZ"]};

catch ME
    warning('Error extracting required columns for DELTAQ calculations: %s', ME.message);
    % Return the original tables as is if columns are missing
    ZTCFQ_updated = ZTCFQ;
    DELTAQ_updated = DELTAQ;
    return; % Exit the function
end

% Calculate Linear Power (Dot product of Force and Linear Velocity)
P_DELTA = sum(F_DELTA .* V_DELTA, 2); % Element-wise product then sum across columns
LHP_DELTA = sum(LHF_DELTA .* LHV_DELTA, 2);
RHP_DELTA = sum(RHF_DELTA .* RHV_DELTA, 2);
LEP_DELTA = sum(LEF_DELTA .* LEV_DELTA, 2);
REP_DELTA = sum(REF_DELTA .* REV_DELTA, 2);
LSP_DELTA = sum(LSF_DELTA .* LSV_DELTA, 2);
RSP_DELTA = sum(RSF_DELTA .* RSV_DELTA, 2);

% Calculate Angular Power (Dot product of Torque and Angular Velocity)
LSAP_DELTA = sum(TLS_DELTA .* LSAV_DELTA, 2);
RSAP_DELTA = sum(TRS_DELTA .* RSAV_DELTA, 2);
LEAP_DELTA = sum(TLE_DELTA .* LEAV_DELTA, 2);
REAP_DELTA = sum(TRE_DELTA .* REAV_DELTA, 2);
LHAP_DELTA = sum(TLH_DELTA .* LHAV_DELTA, 2);
RHAP_DELTA = sum(TRH_DELTA .* RHAV_DELTA, 2);


% Numerically Integrate to find Work and Impulse (using cumtrapz)
% Use the time vector from DELTAQ (should be the same as ZTCFQ)
timeVec = DELTAQ_updated.Time;

% Linear Work (Integral of Linear Power)
DELTAQ_updated.("LinearWorkonClub") = cumtrapz(timeVec, P_DELTA);
DELTAQ_updated.("LHLinearWorkonClub") = cumtrapz(timeVec, LHP_DELTA);
DELTAQ_updated.("RHLinearWorkonClub") = cumtrapz(timeVec, RHP_DELTA);
DELTAQ_updated.("LELinearWorkonForearm") = cumtrapz(timeVec, LEP_DELTA);
DELTAQ_updated.("RELinearWorkonForearm") = cumtrapz(timeVec, REP_DELTA);
DELTAQ_updated.("LSLinearWorkonArm") = cumtrapz(timeVec, LSP_DELTA);
DELTAQ_updated.("RSLinearWorkonArm") = cumtrapz(timeVec, RSP_DELTA);

% Linear Impulse (Integral of Force)
DELTAQ_updated.("LinearImpulseonClub") = cumtrapz(timeVec, F_DELTA);
DELTAQ_updated.("LHLinearImpulseonClub") = cumtrapz(timeVec, LHF_DELTA);
DELTAQ_updated.("RHLinearImpulseonClub") = cumtrapz(timeVec, RHF_DELTA);
DELTAQ_updated.("LELinearImpulseonForearm") = cumtrapz(timeVec, LEF_DELTA);
DELTAQ_updated.("RELinearImpulseonForearm") = cumtrapz(timeVec, REF_DELTA);
DELTAQ_updated.("LSLinearImpulseonArm") = cumtrapz(timeVec, LSF_DELTA);
DELTAQ_updated.("RSLinearImpulseonArm") = cumtrapz(timeVec, RSF_DELTA);

% Angular Impulse (Integral of Sum of Moments)
DELTAQ_updated.("LSAngularImpulseonArm") = cumtrapz(timeVec, SUMLS_DELTA);
DELTAQ_updated.("RSAngularImpulseonArm") = cumtrapz(timeVec, SUMRS_DELTA);
DELTAQ_updated.("LEAngularImpulseonForearm") = cumtrapz(timeVec, SUMLE_DELTA);
DELTAQ_updated.("REAngularImpulseonForearm") = cumtrapz(timeVec, SUMRE_DELTA);
DELTAQ_updated.("LHAngularImpulseonClub") = cumtrapz(timeVec, SUMLH_DELTA);
DELTAQ_updated.("RHAngularImpulseonClub") = cumtrapz(timeVec, SUMRH_DELTA);

% Angular Work (Integral of Angular Power)
DELTAQ_updated.("LSAngularWorkonArm") = cumtrapz(timeVec, LSAP_DELTA);
DELTAQ_updated.("RSAngularWorkonArm") = cumtrapz(timeVec, RSAP_DELTA);
DELTAQ_updated.("LEAngularWorkonForearm") = cumtrapz(timeVec, LEAP_DELTA);
DELTAQ_updated.("REAngularWorkonForearm") = cumtrapz(timeVec, REAP_DELTA);
DELTAQ_updated.("LHAngularWorkonClub") = cumtrapz(timeVec, LHAP_DELTA);
DELTAQ_updated.("RHAngularWorkonClub") = cumtrapz(timeVec, RHAP_DELTA);

fprintf('DELTAQ work and impulse calculations complete.\n');

% No need for explicit 'clear' statements within a function.
% All intermediate variables are local and cleared automatically.

end

%%% END FILE: Functions\calculateWorkAndImpulse3D.m %%%

%%% START FILE: Functions\combine_plot_scripts.m %%%
function combine_plot_scripts()
% COMBINE_PLOT_SCRIPTS - Consolidates multiple plot() scripts into one master file.
% Prompts user to select scripts from a folder, determines prefix from folder name,
% and replaces detected variables unless they already belong to known prefixes.

% Define known prefixes to preserve
knownPrefixes = {'BASEQ', 'DELTAQ', 'ZTCFQ', 'ZVCFQ', 'ModelData', 'DataTable'};

[fileNames, pathName] = uigetfile('*.m', 'Select PLOT scripts to combine', 'MultiSelect', 'on');
if isequal(fileNames, 0)
    disp('No files selected.');
    return;
end
if ischar(fileNames)
    fileNames = {fileNames};
end

[~, folderName] = fileparts(pathName);
caseName = upper(regexprep(folderName, '[^a-zA-Z0-9]', ''));
varPrefix = caseName;  % Assume variable name matches case name
outputFileName = fullfile(pathName, ['PLOT_' caseName '_Plots.m']);

header = sprintf([...
    'function PLOT_%s_Plots(%s)\n',...
    '%%% Auto-generated combined script\n',...
    '%%% Generated from %d files on %s\n\n'], ...
    caseName, varPrefix, numel(fileNames), datestr(now));

fidOut = fopen(outputFileName, 'w');
fprintf(fidOut, '%s', header);

for i = 1:length(fileNames)
    filePath = fullfile(pathName, fileNames{i});
    fprintf('\nProcessing %s...\n', fileNames{i});

    fprintf(fidOut, '%%%% ====== Start of %s ======\n', fileNames{i});

    lines = readlines(filePath);
    lines = strtrim(lines);
    lines = lines(~cellfun('isempty', lines));

    for j = 1:numel(lines)
        line = lines(j);

        if contains(line, 'clear') || contains(line, 'close all') || contains(line, 'clearvars')
            continue;
        end

        alreadyPrefixed = false;
        for k = 1:numel(knownPrefixes)
            if contains(line, [knownPrefixes{k}, '.'])
                alreadyPrefixed = true;
                break;
            end
        end

        if ~alreadyPrefixed
            line = regexprep(line, '\b([A-Z][A-Za-z0-9_]+)\(', [varPrefix, '.$1(']);
            line = regexprep(line, '\b([A-Z][A-Za-z0-9_]+)\.', [varPrefix, '.$1.']);
        end

        fprintf(fidOut, '%s\n', line);
    end

    fprintf(fidOut, '\n%%%% ====== End of %s ======\n\n', fileNames{i});
end

fprintf(fidOut, 'end\n');
fclose(fidOut);
disp(['Combined script saved to: ', outputFileName]);
end

%%% END FILE: Functions\combine_plot_scripts.m %%%

%%% START FILE: Functions\generateDataTable3D.m %%%
function Data = generateDataTable3D(simOutput)
% GENERATEDATATABLE3D Extracts data from 3D Simulink simulation output into a table.
%   Data = GENERATEDATATABLE3D(simOutput) processes the Simulink
%   simulation output object 'simOutput' from the 3D golf swing model
%   and extracts the time vector and logged signals into a MATLAB table.
%   It also calculates and adds 3D segment direction vectors (Grip, Shaft,
%   Forearm, Upper Arm, Shoulder) to the table for visualization or analysis.
%
%   Input:
%       simOutput - A Simulink simulation output object logged as a single
%                   object, expected to contain 'tout' (time) and 'logsout'
%                   (logged signals). 'logsout' should be a Dataset object.
%
%   Output:
%       Data - A MATLAB table containing simulation time and all logged
%              signals from 'simOutput.logsout', plus calculated 3D segment vectors.

% --- Extract Time and Logged Signals ---

% Generate a table with a time column from the simulation output time vector.
Time = simOutput.tout;
Data = table(Time, 'VariableNames', {'Time'});

% Loop through each dataset element in logsout to add it to the table.
% This method is robust to changes in the number or order of logged signals
% in the Simulink model, as long as the signal names are valid table variable names.
if isfield(simOutput, 'logsout') && ~isempty(simOutput.logsout)
    for i = 1:simOutput.logsout.numElements
        % Get signal element from the logsout Dataset
        signalElement = simOutput.logsout.getElement(i);

        % Get signal name and data
        signalName = signalElement.Name;
        signalData = signalElement.Values.Data;

        % Add the data as a new column in the table, using the signal name.
        % The .(signalName) syntax allows using the string signalName as a field/variable name.
        % Ensure signalName is a valid MATLAB table variable name if necessary,
        % though logsout names are usually compatible.
        Data.(signalName) = signalData;
    end
else
    warning('Simulink output object does not contain logsout data.');
    % The table will contain only the time vector in this case.
end


% --- Generate 3D Segment Vector Components ---
% These vectors are calculated for visualization (e.g., quiver plots) or
% further analysis based on the positions of key points logged from the model.

% Grip Scale Factor (Optional: Scale up grip vector for graphics if needed)
% Adjust this value based on desired visualization size relative to other vectors.
GripScale = 1.5;

% Generate Grip Vector in Table (e.g., from Butt to RW, scaled)
% Assumes 'RWx', 'RWy', 'RWz', 'Buttx', 'Butty', 'Buttz' are logged signals.
if all(ismember({'RWx', 'RWy', 'RWz', 'Buttx', 'Butty', 'Buttz'}, Data.Properties.VariableNames))
    Data.Gripdx = GripScale .* (Data.RWx - Data.Buttx);
    Data.Gripdy = GripScale .* (Data.RWy - Data.Butty);
    Data.Gripdz = GripScale .* (Data.RWz - Data.Buttz);
end
% GripScale variable is local to this function, no need to clear explicitly.

% Generate Shaft Vector in Table (e.g., from RW to CH)
% Assumes 'CHx', 'CHy', 'CHz', 'RWx', 'RWy', 'RWz' are logged signals.
if all(ismember({'CHx', 'CHy', 'CHz', 'RWx', 'RWy', 'RWz'}, Data.Properties.VariableNames))
    Data.Shaftdx = Data.CHx - Data.RWx;
    Data.Shaftdy = Data.CHy - Data.RWy;
    Data.Shaftdz = Data.CHz - Data.RWz;
end

% Generate Left Forearm Vector in Table (e.g., from LE to LW)
% Assumes 'LWx', 'LWy', 'LWz', 'LEx', 'LEy', 'LEz' are logged signals.
if all(ismember({'LWx', 'LWy', 'LWz', 'LEx', 'LEy', 'LEz'}, Data.Properties.VariableNames))
    Data.LeftForearmdx = Data.LWx - Data.LEx;
    Data.LeftForearmdy = Data.LWy - Data.LEy;
    Data.LeftForearmdz = Data.LWz - Data.LEz;
end

% Generate Right Forearm Vector in Table (e.g., from RE to RW)
% Assumes 'RWx', 'RWy', 'RWz', 'REx', 'REy', 'REz' are logged signals.
if all(ismember({'RWx', 'RWy', 'RWz', 'REx', 'REy', 'REz'}, Data.Properties.VariableNames))
    Data.RightForearmdx = Data.RWx - Data.REx;
    Data.RightForearmdy = Data.RWy - Data.REy;
    Data.RightForearmdz = Data.RWz - Data.REz;
end

% Generate Left Upper Arm Vector in Table (e.g., from LS to LE)
% Assumes 'LEx', 'LEy', 'LEz', 'LSx', 'LSy', 'LSz' are logged signals.
if all(ismember({'LEx', 'LEy', 'LEz', 'LSx', 'LSy', 'LSz'}, Data.Properties.VariableNames))
    Data.LeftArmdx = Data.LEx - Data.LSx;
    Data.LeftArmdy = Data.LEy - Data.LSy;
    Data.LeftArmdz = Data.LEz - Data.LSz;
end

% Generate Right Upper Arm Vector in Table (e.g., from RS to RE)
% Assumes 'REx', 'REy', 'REz', 'RSx', 'RSy', 'RSz' are logged signals.
if all(ismember({'REx', 'REy', 'REz', 'RSx', 'RSy', 'RSz'}, Data.Properties.VariableNames))
    Data.RightArmdx = Data.REx - Data.RSx;
    Data.RightArmdy = Data.REy - Data.RSy;
    Data.RightArmdz = Data.REz - Data.RSz;
end

% Generate Left Shoulder Vector (e.g., from HUB to LS)
% Assumes 'LSx', 'LSy', 'LSz', 'HUBx', 'HUBy', 'HUBz' are logged signals.
if all(ismember({'LSx', 'LSy', 'LSz', 'HUBx', 'HUBy', 'HUBz'}, Data.Properties.VariableNames))
    Data.LeftShoulderdx = Data.LSx - Data.HUBx;
    Data.LeftShoulderdy = Data.LSy - Data.HUBy;
    Data.LeftShoulderdz = Data.LSz - Data.HUBz;
end

% Generate Right Shoulder Vector (e.g., from HUB to RS)
% Assumes 'RSx', 'RSy', 'RSz', 'HUBx', 'HUBy', 'HUBz' are logged signals.
if all(ismember({'RSx', 'RSy', 'RSz', 'HUBx', 'HUBy', 'HUBz'}, Data.Properties.VariableNames))
    Data.RightShoulderdx = Data.RSx - Data.HUBx;
    Data.RightShoulderdy = Data.RSy - Data.HUBy;
    Data.RightShoulderdz = Data.RSz - Data.HUBz;
end

% Variables created inside this function (Time, i, signalElement, signalName,
% signalData, GripScale, etc.) are local and automatically cleared when
% the function finishes execution. Explicit 'clear' statements are not needed.

end

%%% END FILE: Functions\generateDataTable3D.m %%%

%%% START FILE: Functions\generateResultsFolder3D.m %%%
function generateResultsFolder3D(projectRoot)
% GENERATERESULTSFOLDER3D Creates a results folder structure and copies output files.
%   GENERATERESULTSFOLDER3D(projectRoot) creates a 'Model Output' folder
%   structure within the specified projectRoot and copies various files
%   (scripts, models, parameters, charts, tables) into the corresponding
%   subfolders.
%
%   This function is the converted version of SCRIPT_ResultsFolderGeneration_3D.m.
%   It uses full paths to avoid reliance on the current working directory.
%
%   Input:
%       projectRoot - A string specifying the full path to the root
%                     directory of your MATLAB project.

% Turn off the warning that a directory already exists when you create it.
% Using mkdir with the 'dir' check is generally preferred over suppressing warnings.
warning('off', 'MATLAB:MKDIR:DirectoryExists');

% Define the main results folder path
resultsFolder = fullfile(projectRoot, 'Model Output');

% Create the main results folder and its subfolders
fprintf('Creating results folder structure at: %s\n', resultsFolder);
if ~exist(resultsFolder, 'dir')
    mkdir(resultsFolder);
end

scriptsFolder = fullfile(resultsFolder, 'Scripts');
if ~exist(scriptsFolder, 'dir')
    mkdir(scriptsFolder);
end

modelsFolder = fullfile(resultsFolder, 'Model and Parameters');
if ~exist(modelsFolder, 'dir')
    mkdir(modelsFolder);
end

chartsFolder = fullfile(resultsFolder, 'Charts');
if ~exist(chartsFolder, 'dir')
    mkdir(chartsFolder);
end

tablesFolder = fullfile(resultsFolder, 'Tables');
if ~exist(tablesFolder, 'dir')
    mkdir(tablesFolder);
end

% --- Copy Files to the Results Folder Structure ---
fprintf('Copying files to results folder...\n');

% Define source and destination base paths
sourceScriptsBase = fullfile(projectRoot, 'Scripts');
sourceTablesBase = fullfile(projectRoot, 'Tables');
sourceModelsBase = projectRoot; % Assuming models/params are in the project root

% Copy Chart Folders
% Use fullfile for source and destination paths
chartSources = {
    fullfile(sourceScriptsBase, '_BaseData Scripts', 'BaseData Charts'),
    fullfile(sourceScriptsBase, '_BaseData Scripts', 'BaseData Quiver Plots'),
    fullfile(sourceScriptsBase, '_ZTCF Scripts', 'ZTCF Charts'),
    fullfile(sourceScriptsBase, '_ZTCF Scripts', 'ZTCF Quiver Plots'),
    fullfile(sourceScriptsBase, '_Delta Scripts', 'Delta Charts'),
    fullfile(sourceScriptsBase, '_Delta Scripts', 'Delta Quiver Plots'),
    fullfile(sourceScriptsBase, '_Comparison Scripts', 'Comparison Charts'),
    fullfile(sourceScriptsBase, '_Comparison Scripts', 'Comparison Quiver Plots'),
    fullfile(sourceScriptsBase, '_ZVCF Scripts', 'ZVCF Charts'),
    fullfile(sourceScriptsBase, '_ZVCF Scripts', 'ZVCF Quiver Plots')
};

for i = 1:length(chartSources)
    if exist(chartSources{i}, 'dir')
        fprintf('Copying charts from: %s\n', chartSources{i});
        copyfile(chartSources{i}, chartsFolder);
    else
        warning('Source chart folder not found: %s', chartSources{i});
    end
end


% Copy Model and Parameters files
modelSources = {
    fullfile(sourceModelsBase, 'GolfSwing3D_KineticallyDriven.slx'), % Updated model name
    fullfile(sourceModelsBase, 'ModelInputs.mat'),
    fullfile(sourceModelsBase, 'GolfSwing3D_ZVCF.slx'), % Updated model name
    fullfile(sourceModelsBase, 'ModelInputsZVCF.mat') % Assuming this file exists
};

for i = 1:length(modelSources)
    if exist(modelSources{i}, 'file')
        fprintf('Copying model/parameter file: %s\n', modelSources{i});
        copyfile(modelSources{i}, modelsFolder);
    else
         warning('Source model/parameter file not found: %s', modelSources{i});
    end
end

% Copy Scripts folder (recursively)
% This copies the entire Scripts folder and its contents
if exist(sourceScriptsBase, 'dir')
    fprintf('Copying Scripts folder: %s\n', sourceScriptsBase);
    copyfile(sourceScriptsBase, scriptsFolder);
else
    warning('Source Scripts folder not found: %s', sourceScriptsBase);
end


% Copy Table files
% Ensure these match the files saved by your master script
tableSources = {
    fullfile(sourceTablesBase, 'BASEQ.mat'),
    fullfile(sourceTablesBase, 'ZTCFQ.mat'),
    fullfile(sourceTablesBase, 'DELTAQ.mat'),
    fullfile(sourceTablesBase, 'ZVCFTable.mat'), % Include ZVCFTable
    fullfile(sourceTablesBase, 'ZVCFTableQ.mat'), % Include ZVCFTableQ
    fullfile(sourceTablesBase, 'ClubQuiverAlphaReversal.mat'),
    fullfile(sourceTablesBase, 'ClubQuiverMaxCHS.mat'),
    fullfile(sourceTablesBase, 'ClubQuiverZTCFAlphaReversal.mat'),
    fullfile(sourceTablesBase, 'ClubQuiverDELTAAlphaReversal.mat'),
    fullfile(sourceTablesBase, 'SummaryTable.mat')
};

for i = 1:length(tableSources)
     if exist(tableSources{i}, 'file')
        fprintf('Copying table file: %s\n', tableSources{i});
        copyfile(tableSources{i}, tablesFolder);
     else
        warning('Source table file not found: %s', tableSources{i});
     end
end

fprintf('File copying to results folder complete.\n');

% No need for explicit 'clear' statements within a function.
% Variables created inside this function are local and automatically cleared.

end

%%% END FILE: Functions\generateResultsFolder3D.m %%%

%%% START FILE: Functions\generateSummaryTableAndQuiverData3D.m %%%
function [SummaryTable, ClubQuiverAlphaReversal, ClubQuiverMaxCHS, ClubQuiverZTCFAlphaReversal, ClubQuiverDELTAAlphaReversal] = generateSummaryTableAndQuiverData3D(BASEQ, ZTCFQ, DELTAQ)
% GENERATESUMMARYTABLEANDQUIVERDATA3D Calculates key values and generates data for quiver plots.
%   [SummaryTable, ClubQuiverAlphaReversal, ClubQuiverMaxCHS, ...
%    ClubQuiverZTCFAlphaReversal, ClubQuiverDELTAAlphaReversal] = ...
%    GENERATESUMMARYTABLEANDQUIVERDATA3D(BASEQ, ZTCFQ, DELTAQ)
%   Analyzes the BASEQ, ZTCFQ, and DELTAQ tables (expected on a uniform
%   time grid) to find maximum speeds, times of specific events (like
%   alpha reversal and zero AoA), and generates data structures containing
%   coordinates and vectors at these key times for potential quiver plotting.
%
%   This function is the converted version of SCRIPT_TableofValues_3D.m.
%
%   Input:
%       BASEQ  - Table containing Base data on a uniform time grid.
%       ZTCFQ  - Table containing ZTCF data on the same uniform time grid.
%       DELTAQ - Table containing Delta data on the same uniform time grid.
%                These tables are expected to contain various kinematic
%                and force/torque data, including 'Time', 'CHS (mph)',
%                'Hand Speed (mph)', 'BaseAV', 'ChestAV', 'LScapAV',
%                'LUpperArmAV', 'LForearmAV', 'ClubhandleAV',
%                'EquivalentMidpointCoupleLocal', 'AoA', and position/vector
%                components for 'Butt', 'RW', 'CH', 'Gripdx/dy/dz', 'Shaftdx/dy/dz'.
%
%   Output:
%       SummaryTable              - Table summarizing key values (max speeds, event times).
%       ClubQuiverAlphaReversal   - Struct with data for club/shaft quiver at Base Alpha Reversal time.
%       ClubQuiverMaxCHS          - Struct with data for club/shaft quiver at Base Max CHS time.
%       ClubQuiverZTCFAlphaReversal - Struct with data for club/shaft quiver at ZTCF Alpha Reversal time.
%       ClubQuiverDELTAAlphaReversal - Struct with data for club/shaft quiver at DELTA Alpha Reversal time.

% Initialize outputs
SummaryTable = table();
ClubQuiverMaxCHS = struct();
ClubQuiverAlphaReversal = struct();
ClubQuiverZTCFAlphaReversal = struct();
ClubQuiverDELTAAlphaReversal = struct();

% --- Calculate Maximum Speeds and the Times They Occur (from BASEQ) ---

% Check if required columns exist in BASEQ for speed calculations
requiredSpeedCols_BASEQ = {'CHS (mph)', 'Hand Speed (mph)', 'BaseAV', 'ChestAV', 'LScapAV', 'LUpperArmAV', 'LForearmAV', 'ClubhandleAV'};
if all(ismember(requiredSpeedCols_BASEQ, BASEQ.Properties.VariableNames))

    % Generate CHS Array
    CHS = BASEQ{:, "CHS (mph)"};
    % Find Max CHS Value
    MaxCHS = max(CHS);
    SummaryTable.("MaxCHS") = MaxCHS;

    % Generate Hand Speed Array
    HS = BASEQ{:, "Hand Speed (mph)"};
    % Find Max Hand Speed Value
    MaxHandSpeed = max(HS);
    SummaryTable.("MaxHandSpeed") = MaxHandSpeed;

    % Generate Hip Angular Velocity (AV) Array
    HipAV = BASEQ{:, "BaseAV"};
    % Find Max Hip AV Value
    MaxHipAV = max(HipAV);
    SummaryTable.("MaxHipAV") = MaxHipAV;

    % Generate Torso Angular Velocity (AV) Array
    TorsoAV = BASEQ{:, "ChestAV"};
    % Find Max Torso AV Value
    MaxTorsoAV = max(TorsoAV);
    SummaryTable.("MaxTorsoAV") = MaxTorsoAV;

    % Generate LScap Angular Velocity (AV) Array
    LScapAV = BASEQ{:, "LScapAV"};
    % Find Max LScap AV Value
    MaxLScapAV = max(LScapAV);
    SummaryTable.("MaxLScapAV") = MaxLScapAV;

    % Generate LUpperArm Angular Velocity (AV) Array
    LUpperArmAV = BASEQ{:, "LUpperArmAV"};
    % Find Max LUpperArm AV Value
    MaxLUpperArmAV = max(LUpperArmAV);
    SummaryTable.("MaxLUpperArmAV") = MaxLUpperArmAV;

    % Generate LForearm Angular Velocity (AV) Array
    LForearmAV = BASEQ{:, "LForearmAV"};
    % Find Max LForearm AV Value
    MaxLForearmAV = max(LForearmAV);
    SummaryTable.("MaxLForearmAV") = MaxLForearmAV;

    % Generate Club Angular Velocity (AV) Array
    ClubAV = BASEQ{:, "ClubhandleAV"};
    % Find Max Club AV Value
    MaxClubAV = max(ClubAV);
    SummaryTable.("MaxClubAV") = MaxClubAV;

    % Find the row in the table where each maximum occurs
    CHSMaxRow = find(CHS == MaxCHS, 1);
    HSMaxRow = find(HS == MaxHandSpeed, 1);
    HipAVMaxRow = find(HipAV == MaxHipAV, 1);
    TorsoAVMaxRow = find(TorsoAV == MaxTorsoAV, 1);
    LScapAVMaxRow = find(LScapAV == MaxLScapAV, 1);
    LUpperArmAVMaxRow = find(LUpperArmAV == MaxLUpperArmAV, 1);
    LForearmAVMaxRow = find(LForearmAV == MaxLForearmAV, 1);
    ClubAVMaxRow = find(ClubAV == MaxClubAV, 1);

    % Find the time in the table where the maximum occurs
    CHSMaxTime = BASEQ.Time(CHSMaxRow, 1);
    SummaryTable.("CHSMaxTime") = CHSMaxTime;

    HandSpeedMaxTime = BASEQ.Time(HSMaxRow, 1);
    SummaryTable.("HandSpeedMaxTime") = HandSpeedMaxTime;

    HipAVMaxTime = BASEQ.Time(HipAVMaxRow, 1);
    SummaryTable.("HipAVMaxTime") = HipAVMaxTime;

    TorsoAVMaxTime = BASEQ.Time(TorsoAVMaxRow, 1);
    SummaryTable.("TorsoAVMaxTime") = TorsoAVMaxTime;

    LScapAVMaxTime = BASEQ.Time(LScapAVMaxRow, 1);
    SummaryTable.("LScapAVMaxTime") = LScapAVMaxTime;

    LUpperArmAVMaxTime = BASEQ.Time(LUpperArmAVMaxRow, 1);
    SummaryTable.("LUpperArmAVMaxTime") = LUpperArmAVMaxTime;

    LForearmAVMaxTime = BASEQ.Time(LForearmAVMaxRow, 1);
    SummaryTable.("LForearmAVMaxTime") = LForearmAVMaxTime;

    ClubAVMaxTime = BASEQ.Time(ClubAVMaxRow, 1);
    SummaryTable.("MaxClubAVTime") = ClubAVMaxTime; % Renamed from ClubAVMaxTime for clarity

    % Find AoA at time of maximum CHS
    if ismember('AoA', BASEQ.Properties.VariableNames)
        AoAatMaxCHS = BASEQ.AoA(CHSMaxRow, 1);
        SummaryTable.("AoAatMaxCHS") = AoAatMaxCHS;
    else
        warning('Required data column "AoA" not found in BASEQ for AoAatMaxCHS.');
        SummaryTable.("AoAatMaxCHS") = NaN;
    end

else
    warning('Required columns for speed calculations not found in BASEQ.');
    % Initialize speed/time fields in SummaryTable to NaN
    speedFields = {'MaxCHS', 'MaxHandSpeed', 'HipAV', 'TorsoAV', 'LScapAV', 'LUpperArmAV', 'LForearmAV', 'ClubAV'};
    timeFields = {'CHSMaxTime', 'HandSpeedMaxTime', 'HipAVMaxTime', 'TorsoAVMaxTime', 'LScapAVMaxTime', 'LUpperArmAVMaxTime', 'LForearmAVMaxTime', 'MaxClubAVTime'};
     for k = 1:length(speedFields)
         SummaryTable.(speedFields{k}) = NaN;
     end
     for k = 1:length(timeFields)
         SummaryTable.(timeFields{k}) = NaN;
     end
     SummaryTable.("AoAatMaxCHS") = NaN;
end


% --- Calculate Times of Specific Events ---

% Calculate the time that the equivalent midpoint couple goes negative in late downswing (BaseData)
% Interpolate where the 3rd component of EquivalentMidpointCoupleLocal crosses zero.
% Starting interpolation from index 50 as in original script to avoid startup effects.
% Ensure the data column exists and has enough points.
if ismember('EquivalentMidpointCoupleLocal', BASEQ.Properties.VariableNames) && height(BASEQ) >= 50
    timeData = BASEQ.Time(50:end, 1);
    coupleData = BASEQ.EquivalentMidpointCoupleLocal(50:end, 3); % Assuming 3rd component is relevant
    % Check if interpolation range is valid (at least 2 points) and data is not constant
    if length(timeData) >= 2 && range(coupleData) > 0
         TimeofAlphaReversal = interp1(coupleData, timeData, 0.0, 'linear', 'extrap'); % Use 'extrap' if zero is outside range
         SummaryTable.("TimeofAlphaReversal") = TimeofAlphaReversal;
    else
         warning('Not enough varying data points to calculate TimeofAlphaReversal for BASEQ.');
         SummaryTable.("TimeofAlphaReversal") = NaN;
    end
else
    warning('Required data column "EquivalentMidpointCoupleLocal" not found or not enough data in BASEQ for TimeofAlphaReversal.');
    SummaryTable.("TimeofAlphaReversal") = NaN;
end

% Calculate the time that the ZTCF equivalent midpoint couple goes negative.
if ismember('EquivalentMidpointCoupleLocal', ZTCFQ.Properties.VariableNames) && height(ZTCFQ) >= 50
     timeData_ZTCF = ZTCFQ.Time(50:end, 1);
     coupleData_ZTCF = ZTCFQ.EquivalentMidpointCoupleLocal(50:end, 3);
     if length(timeData_ZTCF) >= 2 && range(coupleData_ZTCF) > 0
        TimeofZTCFAlphaReversal = interp1(coupleData_ZTCF, timeData_ZTCF, 0.0, 'linear', 'extrap');
        SummaryTable.("TimeofZTCFAlphaReversal") = TimeofZTCFAlphaReversal;
     else
        warning('Not enough varying data points to calculate TimeofZTCFAlphaReversal for ZTCFQ.');
        SummaryTable.("TimeofZTCFAlphaReversal") = NaN;
     end
else
    warning('Required data column "EquivalentMidpointCoupleLocal" not found or not enough data in ZTCFQ for TimeofZTCFAlphaReversal.');
    SummaryTable.("TimeofZTCFAlphaReversal") = NaN;
end

% Calculate the time that the DELTA equivalent midpoint couple goes negative.
if ismember('EquivalentMidpointCoupleLocal', DELTAQ.Properties.VariableNames) && height(DELTAQ) >= 50
    timeData_DELTA = DELTAQ.Time(50:end, 1);
    coupleData_DELTA = DELTAQ.EquivalentMidpointCoupleLocal(50:end, 3);
    if length(timeData_DELTA) >= 2 && range(coupleData_DELTA) > 0
        TimeofDELTAAlphaReversal = interp1(coupleData_DELTA, timeData_DELTA, 0.0, 'linear', 'extrap');
        SummaryTable.("TimeofDELTAAlphaReversal") = TimeofDELTAAlphaReversal;
    else
        warning('Not enough varying data points to calculate TimeofDELTAAlphaReversal for DELTAQ.');
        SummaryTable.("TimeofDELTAAlphaReversal") = NaN;
    end
else
    warning('Required data column "EquivalentMidpointCoupleLocal" not found or not enough data in DELTAQ for TimeofDELTAAlphaReversal.');
    SummaryTable.("TimeofDELTAAlphaReversal") = NaN;
end


% Generate a table of the times when the function of interest (f) crosses zero (for AoA).
% Assumes 'AoA' column exists in BASEQ.
if ismember('AoA', BASEQ.Properties.VariableNames)
    f = BASEQ.AoA;
    t = BASEQ.Time;

    % Find indices where the sign changes
    idx = find(f(2:end) .* f(1:end-1) < 0);

    % Interpolate to find the exact time of zero crossing for each sign change
    t_zero = zeros(size(idx));
    for i = 1:numel(idx)
        j = idx(i); % Index in the original vector where sign change starts
        % Interpolate between point j and j+1
        t_zero(i) = interp1(f(j:j+1), t(j:j+1), 0.0, 'linear');
    end

    % Time of Zero AoA that Occurs Last (assuming downswing is the relevant phase)
    if ~isempty(t_zero)
        TimeofZeroAoA = max(t_zero); % Find the latest zero crossing
        SummaryTable.("TimeofZeroAoA") = TimeofZeroAoA;

        % CHS at time of zero AoA (interpolate CHS at this specific time)
        if ismember('CHS (mph)', BASEQ.Properties.VariableNames) && ~isnan(TimeofZeroAoA)
             CHSZeroAoA = interp1(BASEQ.Time, BASEQ.("CHS (mph)"), TimeofZeroAoA, 'linear', 'extrap');
             SummaryTable.("CHSZeroAoA") = CHSZeroAoA;
        else
             warning('Required data column "CHS (mph)" not found in BASEQ or TimeofZeroAoA invalid for CHSZeroAoA.');
             SummaryTable.("CHSZeroAoA") = NaN;
        end
    else
        warning('No zero crossing found for AoA in BASEQ.');
        SummaryTable.("TimeofZeroAoA") = NaN;
        SummaryTable.("CHSZeroAoA") = NaN;
    end
else
    warning('Required data column "AoA" not found in BASEQ.');
    SummaryTable.("TimeofZeroAoA") = NaN;
    SummaryTable.("CHSZeroAoA") = NaN;
end


% --- Generate Data Needed for Quivers at Specific Times ---
% These structs will hold position and vector data at key moments for plotting.
% Interpolate data from BASEQ, ZTCFQ, DELTAQ at the calculated times.

% Required columns for quiver data generation
requiredQuiverCols = {'Buttx', 'Butty', 'Buttz', 'Gripdx', 'Gripdy', 'Gripdz', 'RWx', 'RWy', 'RWz', 'Shaftdx', 'Shaftdy', 'Shaftdz'};


% Find Data Needed for Grip and Shaft Quivers at Time of Max CHS (from BASEQ)
if isfield(SummaryTable, 'CHSMaxTime') && ~isnan(SummaryTable.CHSMaxTime) && all(ismember(requiredQuiverCols, BASEQ.Properties.VariableNames))
    t_maxCHS = SummaryTable.CHSMaxTime;
    ClubQuiverMaxCHS.("ButtxMaxCHS") = interp1(BASEQ.Time, BASEQ.("Buttx"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("ButtyMaxCHS") = interp1(BASEQ.Time, BASEQ.("Butty"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("ButtzMaxCHS") = interp1(BASEQ.Time, BASEQ.("Buttz"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("GripdxMaxCHS") = interp1(BASEQ.Time, BASEQ.("Gripdx"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("GripdyMaxCHS") = interp1(BASEQ.Time, BASEQ.("Gripdy"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("GripdzMaxCHS") = interp1(BASEQ.Time, BASEQ.("Gripdz"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("RWxMaxCHS") = interp1(BASEQ.Time, BASEQ.("RWx"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("RWyMaxCHS") = interp1(BASEQ.Time, BASEQ.("RWy"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("RWzMaxCHS") = interp1(BASEQ.Time, BASEQ.("RWz"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("ShaftdxMaxCHS") = interp1(BASEQ.Time, BASEQ.("Shaftdx"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("ShaftdyMaxCHS") = interp1(BASEQ.Time, BASEQ.("Shaftdy"), t_maxCHS, 'linear', 'extrap');
    ClubQuiverMaxCHS.("ShaftdzMaxCHS") = interp1(BASEQ.Time, BASEQ.("Shaftdz"), t_maxCHS, 'linear', 'extrap');
else
    warning('Cannot generate ClubQuiverMaxCHS data: CHSMaxTime invalid or required columns missing in BASEQ.');
    % Initialize fields to NaN
    for k = 1:length(requiredQuiverCols)
        ClubQuiverMaxCHS.(requiredQuiverCols{k} + "MaxCHS") = NaN;
    end
end


% Find Data Needed for Grip and Shaft Quivers at Time of Alpha Reversal (from BASEQ)
if isfield(SummaryTable, 'TimeofAlphaReversal') && ~isnan(SummaryTable.TimeofAlphaReversal) && all(ismember(requiredQuiverCols, BASEQ.Properties.VariableNames))
    t_alphaRev = SummaryTable.TimeofAlphaReversal;
    ClubQuiverAlphaReversal.("ButtxAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Buttx"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("ButtyAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Butty"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("ButtzAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Buttz"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("GripdxAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Gripdx"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("GripdyAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Gripdy"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("GripdzAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Gripdz"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("RWxAlphaReversal") = interp1(BASEQ.Time, BASEQ.("RWx"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("RWyAlphaReversal") = interp1(BASEQ.Time, BASEQ.("RWy"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("RWzAlphaReversal") = interp1(BASEQ.Time, BASEQ.("RWz"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("ShaftdxAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Shaftdx"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("ShaftdyAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Shaftdy"), t_alphaRev, 'linear', 'extrap');
    ClubQuiverAlphaReversal.("ShaftdzAlphaReversal") = interp1(BASEQ.Time, BASEQ.("Shaftdz"), t_alphaRev, 'linear', 'extrap');
else
    warning('Cannot generate ClubQuiverAlphaReversal data: TimeofAlphaReversal invalid or required columns missing in BASEQ.');
     % Initialize fields to NaN
     for k = 1:length(requiredQuiverCols)
        ClubQuiverAlphaReversal.(requiredQuiverCols{k} + "AlphaReversal") = NaN;
     end
end


% Find Data Needed for Grip and Shaft Quivers at Time of ZTCF Alpha Reversal (from ZTCFQ)
if isfield(SummaryTable, 'TimeofZTCFAlphaReversal') && ~isnan(SummaryTable.TimeofZTCFAlphaReversal) && all(ismember(requiredQuiverCols, ZTCFQ.Properties.VariableNames))
    t_ztcfAlphaRev = SummaryTable.TimeofZTCFAlphaReversal;
    ClubQuiverZTCFAlphaReversal.("ButtxZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Buttx"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("ButtyZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Butty"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("ButtzZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Buttz"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("GripdxZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Gripdx"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("GripdyZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Gripdy"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("GripdzZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Gripdz"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("RWxZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("RWx"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("RWyZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("RWy"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("RWzZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("RWz"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("ShaftdxZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Shaftdx"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("ShaftdyZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Shaftdy"), t_ztcfAlphaRev, 'linear', 'extrap');
    ClubQuiverZTCFAlphaReversal.("ShaftdzZTCFAlphaReversal") = interp1(ZTCFQ.Time, ZTCFQ.("Shaftdz"), t_ztcfAlphaRev, 'linear', 'extrap');
else
    warning('Cannot generate ClubQuiverZTCFAlphaReversal data: TimeofZTCFAlphaReversal invalid or required columns missing in ZTCFQ.');
     % Initialize fields to NaN
     for k = 1:length(requiredQuiverCols)
        ClubQuiverZTCFAlphaReversal.(requiredQuiverCols{k} + "ZTCFAlphaReversal") = NaN;
     end
end


% Find Data Needed for Grip and Shaft Quivers at Time of DELTA Alpha Reversal (from DELTAQ)
if isfield(SummaryTable, 'TimeofDELTAAlphaReversal') && ~isnan(SummaryTable.TimeofDELTAAlphaReversal) && all(ismember(requiredQuiverCols, DELTAQ.Properties.VariableNames))
    t_deltaAlphaRev = SummaryTable.TimeofDELTAAlphaReversal;
    ClubQuiverDELTAAlphaReversal.("ButtxDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Buttx"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("ButtyDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Butty"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("ButtzDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Buttz"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("GripdxDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Gripdx"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("GripdyDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Gripdy"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("GripdzDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Gripdz"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("RWxDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("RWx"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("RWyDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("RWy"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("RWzDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("RWz"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("ShaftdxDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Shaftdx"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("ShaftdyDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Shaftdy"), t_deltaAlphaRev, 'linear', 'extrap');
    ClubQuiverDELTAAlphaReversal.("ShaftdzDELTAAlphaReversal") = interp1(DELTAQ.Time, DELTAQ.("Shaftdz"), t_deltaAlphaRev, 'linear', 'extrap');
else
    warning('Cannot generate ClubQuiverDELTAAlphaReversal data: TimeofDELTAAlphaReversal invalid or required columns missing in DELTAQ.');
     % Initialize fields to NaN
     for k = 1:length(requiredQuiverCols)
        ClubQuiverDELTAAlphaReversal.(requiredQuiverCols{k} + "DELTAAlphaReversal") = NaN;
     end
end


% No need for explicit 'clear' statements within a function.
% All intermediate variables are local and cleared automatically.

end

%%% END FILE: Functions\generateSummaryTableAndQuiverData3D.m %%%

%%% START FILE: Functions\overlayQuiverForces.m %%%
function h = overlayQuiverForces(Pcell, Vcell, varargin)
% OVERLAYQUIVERFORCES - Overlay multiple 3D quiver datasets with consistent scaling and sliders
%
% Usage:
%   h = overlayQuiverForces({P1, P2, ...}, {V1, V2, ...}, ...);
%   Each P and V must be Nx3 or cell arrays of [X,Y,Z] and [U,V,W] vectors.
%
% Options (Name-Value Pairs):
%   'Colors'       : Cell array of RGB triplets
%   'Tags'         : Cell array of legend labels
%   'Landmark'     : [x y z] to shift all origins
%   'ShellType'    : 'none' | 'sphere' | 'plane'
%   'ShellAlpha'   : Transparency for shell (default: 0.1)
%   'Title'        : Plot title (default: 'Overlayed Vector Field')
%   'ShowSliders'  : true/false (default: true)

% ---------------- Input Handling ----------------
p = inputParser;
p.addParameter('Colors', {});
p.addParameter('Tags', {});
p.addParameter('Landmark', []);
p.addParameter('ShellType', 'none');
p.addParameter('ShellAlpha', 0.1);
p.addParameter('Title', 'Overlayed Vector Field');
p.addParameter('ShowSliders', true);
p.parse(varargin{:});
opts = p.Results;

numSets = length(Pcell);
assert(numSets == length(Vcell), 'Mismatched P/V cell input counts');

% Normalize inputs to Nx3 matrices
for i = 1:numSets
    if iscell(Pcell{i})
        Pcell{i} = [Pcell{i}{1}, Pcell{i}{2}, Pcell{i}{3}];
    end
    if iscell(Vcell{i})
        Vcell{i} = [Vcell{i}{1}, Vcell{i}{2}, Vcell{i}{3}];
    end
end

% ---------------- Compute Global Max Magnitude ----------------
allMags = [];
for i = 1:numSets
    V = Vcell{i};
    mags = sqrt(sum(V.^2, 2));
    allMags = [allMags; mags];
end
maxMag = max(allMags);
if maxMag == 0, maxMag = 1; end
sharedScale = 1 / maxMag;

% ---------------- Create Figure and Axes ----------------
h.fig = figure('Name','Overlayed Vector Field','Color','w');
h.ax = axes(h.fig); hold on; axis equal; grid on;
xlabel('X'); ylabel('Y'); zlabel('Z');
title(opts.Title);
h.shell = [];
h.quivers = gobjects(numSets, 1);
h.origins = cell(numSets, 1);
h.vectors = cell(numSets, 1);

% ---------------- Optional Landmark Shift ----------------
for i = 1:numSets
    P = Pcell{i};
    V = Vcell{i};
    if ~isempty(opts.Landmark)
        P = P - opts.Landmark;
    end
    h.origins{i} = P;
    h.vectors{i} = V;
    color = [0 0 0];
    if i <= length(opts.Colors)
        color = opts.Colors{i};
    end
    tag = "";
    if i <= length(opts.Tags)
        tag = opts.Tags{i};
    end
    h.quivers(i) = quiver3(h.ax, NaN, NaN, NaN, NaN, NaN, NaN, sharedScale, 'LineWidth', 1.5, 'Color', color);
    if tag ~= ""
        h.quivers(i).DisplayName = tag;
    end
end

if ~isempty(opts.Tags)
    legend(h.ax, 'show');
end

% ---------------- Draw Shell Once ----------------
if ~strcmpi(opts.ShellType, 'none')
    allX = cell2mat(cellfun(@(p)p(:,1), h.origins, 'UniformOutput', false));
    allY = cell2mat(cellfun(@(p)p(:,2), h.origins, 'UniformOutput', false));
    allZ = cell2mat(cellfun(@(p)p(:,3), h.origins, 'UniformOutput', false));
    switch lower(opts.ShellType)
        case 'sphere'
            [sx, sy, sz] = sphere(30);
            r = max(range([allX; allY; allZ])) / 3;
            cx = mean(allX); cy = mean(allY); cz = mean(allZ);
            h.shell = surf(h.ax, r*sx+cx, r*sy+cy, r*sz+cz, 'FaceAlpha', opts.ShellAlpha, ...
                          'EdgeColor','none','FaceColor',[0.5 0.8 1]);
        case 'plane'
            [px, py] = meshgrid(linspace(min(allX),max(allX),20), ...
                                 linspace(min(allY),max(allY),20));
            zVal = mean(allZ);
            h.shell = surf(h.ax, px, py, zVal*ones(size(px)), 'FaceAlpha', opts.ShellAlpha, ...
                          'EdgeColor','none','FaceColor',[0.8 0.5 1]);
    end
end

% ---------------- Sliders (Optional) ----------------
h.scaleSlider = [];
h.densitySlider = [];
if opts.ShowSliders
    h.panel = uipanel(h.fig, 'Position', [0.01 0.01 0.98 0.10], 'Title', 'Vector Controls');
    h.scaleSlider = uicontrol(h.panel, 'Style','slider', 'Min', 0.1, 'Max', 3.0, ...
        'Value', 1.0, 'Units','normalized', 'Position',[0.02 0.55 0.96 0.4], ...
        'Callback', @(s,~) updateOverlayQuivers(h, sharedScale));
    h.densitySlider = uicontrol(h.panel, 'Style','slider', 'Min', 1, 'Max', 100, ...
        'Value', min(30, size(h.origins{1},1)), 'Units','normalized', 'Position',[0.02 0.05 0.96 0.4], ...
        'Callback', @(s,~) updateOverlayQuivers(h, sharedScale));
end

updateOverlayQuivers(h, sharedScale);
end

function updateOverlayQuivers(h, baseScale)
    scaleFactor = 1.0;
    if isfield(h, 'scaleSlider') && isvalid(h.scaleSlider)
        scaleFactor = get(h.scaleSlider, 'Value');
    end
    n = inf;
    if isfield(h, 'densitySlider') && isvalid(h.densitySlider)
        n = round(get(h.densitySlider, 'Value'));
    end
    for i = 1:length(h.quivers)
        if isvalid(h.quivers(i))
            X = h.origins{i};
            V = h.vectors{i};
            idx = round(linspace(1, size(X,1), min(n, size(X,1))));
            set(h.quivers(i), 'XData', X(idx,1), 'YData', X(idx,2), 'ZData', X(idx,3), ...
                              'UData', V(idx,1), 'VData', V(idx,2), 'WData', V(idx,3), ...
                              'AutoScaleFactor', baseScale * scaleFactor);
        end
    end
end

%%% END FILE: Functions\overlayQuiverForces.m %%%

%%% START FILE: Functions\runZvcfSingleTime.m %%%
function zvcfDataTable = runZvcfSingleTime(simTime, baseDataTable, zvcfModelName)
% RUNZVCFSINGLETIME Runs a single ZVCF simulation at a specified time point.
%   zvcfDataTable = RUNZVCFSINGLETIME(simTime, baseDataTable, zvcfModelName)
%   Runs the ZVCF model at a specific time point 'simTime'. It configures
%   the ZVCF model's initial positions and constant joint torques by
%   interpolating values from the provided 'baseDataTable' at 'simTime'.
%   The function then runs a short simulation of the ZVCF model and returns
%   the simulation output data as a table.
%
%   This function is the converted version of SCRIPT_ZVCF_SingleTime_3D.m.
%
%   Input:
%       simTime       - The specific time point (scalar) at which to
%                       configure and run the ZVCF simulation (e.g., 0.20).
%       baseDataTable - A table containing Base data (positions and joint
%                       torques) on a time grid that spans 'simTime'.
%                       Expected columns include 'Time', 'HipTorqueZInput',
%                       'TorsoTorqueInput', etc., and 'HipPositionZ',
%                       'TorsoPosition', etc. (matching your 3D model outputs).
%       zvcfModelName - A string specifying the name of the ZVCF Simulink
%                       model (e.g., 'GolfSwing3D_ZVCF').
%
%   Output:
%       zvcfDataTable - A table containing the simulation output data from
%                       the short ZVCF run, generated by generateDataTable3D.
%                       Returns an empty table if simulation fails or data extraction fails.

% Initialize output table
zvcfDataTable = table();

% --- Check Inputs ---
if ~istable(baseDataTable) || isempty(baseDataTable) || ~ismember('Time', baseDataTable.Properties.VariableNames)
    error('Invalid baseDataTable input. Must be a non-empty table with a ''Time'' column.');
end

if ~isscalar(simTime) || ~isnumeric(simTime)
    error('Invalid simTime input. Must be a numeric scalar.');
end

if ~ischar(zvcfModelName) && ~isstring(zvcfModelName)
    error('Invalid zvcfModelName input. Must be a string.');
end

% Check if simTime is within the range of baseDataTable.Time
if simTime < min(baseDataTable.Time) || simTime > max(baseDataTable.Time)
    warning('simTime (%g) is outside the range of baseDataTable.Time [%g, %g]. Interpolation will extrapolate.', ...
            simTime, min(baseDataTable.Time), max(baseDataTable.Time));
end

% --- Load and Configure ZVCF Model ---

% Load the ZVCF model if it's not already loaded
if ~bdIsLoaded(zvcfModelName)
    try
        load_system(zvcfModelName);
    catch ME
        error('Could not load Simulink model "%s": %s', zvcfModelName, ME.message);
    end
end

% Get the model workspace
mdlWks_zvcf = get_param(zvcfModelName, 'ModelWorkspace');

% Create a SimulationInput object for this single run
in_zvcf = Simulink.SimulationInput(zvcfModelName);

% Set up ZVCF model simulation parameters on the SimulationInput object
% These override settings in the model's configuration parameters for this run
in_zvcf = in_zvcf.setStopTime(0.05); % Set the stop time for the short ZVCF simulation run
in_zvcf = in_zvcf.setFastRestart('off'); % Ensure Fast Restart is off for this model/run
in_zvcf = in_zvcf.setMaxStep(0.001); % Set maximum time step

% --- Interpolate Inputs from BaseData and Configure ZVCF Model ---
% Read the joint torque and position values from BaseData at simTime
% These values will be used as constant inputs and initial positions for the ZVCF model
% NOTE: Verify these column names match your 3D model's logged outputs
% NOTE: Verify units (radians vs. degrees) expected by your ZVCF model parameters

try
    % Interpolate Torque Inputs from BaseData
    hipJointTorque = interp1(baseDataTable.Time, baseDataTable.HipTorqueZInput, simTime, 'linear', 'extrap'); % Assuming Z is primary input axis
    torsoJointTorque = interp1(baseDataTable.Time, baseDataTable.TorsoTorqueInput, simTime, 'linear', 'extrap'); % Assuming single input
    lscapJointTorqueX = interp1(baseDataTable.Time, baseDataTable.LScapTorqueXInput, simTime, 'linear', 'extrap');
    lscapJointTorqueY = interp1(baseDataTable.Time, baseDataTable.LScapTorqueYInput, simTime, 'linear', 'extrap');
    rscapJointTorqueX = interp1(baseDataTable.Time, baseDataTable.RScapTorqueXInput, simTime, 'linear', 'extrap');
    rscapJointTorqueY = interp1(baseDataTable.Time, baseDataTable.RScapTorqueYInput, simTime, 'linear', 'extrap');
    lshoulderJointTorqueX = interp1(baseDataTable.Time, baseDataTable.LSTorqueXInput, simTime, 'linear', 'extrap');
    lshoulderJointTorqueY = interp1(baseDataTable.Time, baseDataTable.LSTorqueYInput, simTime, 'linear', 'extrap');
    lshoulderJointTorqueZ = interp1(baseDataTable.Time, baseDataTable.LSTorqueZInput, simTime, 'linear', 'extrap');
    rshoulderJointTorqueX = interp1(baseDataTable.Time, baseDataTable.RSTorqueXInput, simTime, 'linear', 'extrap');
    rshoulderJointTorqueY = interp1(baseDataTable.Time, baseDataTable.RSTorqueYInput, simTime, 'linear', 'extrap');
    rshoulderJointTorqueZ = interp1(baseDataTable.Time, baseDataTable.RSTorqueZInput, simTime, 'linear', 'extrap');
    lelbowJointTorque = interp1(baseDataTable.Time, baseDataTable.LETorqueInput, simTime, 'linear', 'extrap'); % Assuming single input
    relbowJointTorque = interp1(baseDataTable.Time, baseDataTable.RETorqueInput, simTime, 'linear', 'extrap'); % Assuming single input
    lwristJointTorqueX = interp1(baseDataTable.Time, baseDataTable.LWTorqueXInput, simTime, 'linear', 'extrap');
    lwristJointTorqueY = interp1(baseDataTable.Time, baseDataTable.LWTorqueYInput, simTime, 'linear', 'extrap');
    rwristJointTorqueX = interp1(baseDataTable.Time, baseDataTable.RWTorqueXInput, simTime, 'linear', 'extrap');
    rwristJointTorqueY = interp1(baseDataTable.Time, baseDataTable.RWTorqueYInput, simTime, 'linear', 'extrap');

    % Interpolate Position Values from BaseData (for Initial Positions)
    % Convert to degrees if the ZVCF model parameters expect degrees (as in original script)
    hipPosition = interp1(baseDataTable.Time, baseDataTable.HipPositionZ, simTime, 'linear', 'extrap') * 180/pi; % Assuming Z position is relevant
    torsoPosition = interp1(baseDataTable.Time, baseDataTable.TorsoPosition, simTime, 'linear', 'extrap') * 180/pi; % Assuming single position
    lscapPositionX = interp1(baseDataTable.Time, baseDataTable.LScapPositionX, simTime, 'linear', 'extrap') * 180/pi;
    lscapPositionY = interp1(baseDataTable.Time, baseDataTable.LScapPositionY, simTime, 'linear', 'extrap') * 180/pi;
    rscapPositionX = interp1(baseDataTable.Time, baseDataTable.RScapPositionX, simTime, 'linear', 'extrap') * 180/pi;
    rscapPositionY = interp1(baseDataTable.Time, baseDataTable.RScapPositionY, simTime, 'linear', 'extrap') * 180/pi;
    lshoulderPositionX = interp1(baseDataTable.Time, baseDataTable.LSPositionX, simTime, 'linear', 'extrap') * 180/pi;
    lshoulderPositionY = interp1(baseDataTable.Time, baseDataTable.LSPositionY, simTime, 'linear', 'extrap') * 180/pi;
    lshoulderPositionZ = interp1(baseDataTable.Time, baseDataTable.LSPositionZ, simTime, 'linear', 'extrap') * 180/pi;
    rshoulderPositionX = interp1(baseDataTable.Time, baseDataTable.RSPositionX, simTime, 'linear', 'extrap') * 180/pi;
    rshoulderPositionY = interp1(baseDataTable.Time, baseDataTable.RSPositionY, simTime, 'linear', 'extrap') * 180/pi;
    rshoulderPositionZ = interp1(baseDataTable.Time, baseDataTable.RSPositionZ, simTime, 'linear', 'extrap') * 180/pi;
    lelbowPosition = interp1(baseDataTable.Time, baseDataTable.LEPosition, simTime, 'linear', 'extrap') * 180/pi; % Assuming single position
    relbowPosition = interp1(baseDataTable.Time, baseDataTable.REPosition, simTime, 'linear', 'extrap') * 180/pi; % Assuming single position
    lwristPositionX = interp1(baseDataTable.Time, baseDataTable.LWPositionX, simTime, 'linear', 'extrap') * 180/pi;
    lwristPositionY = interp1(baseDataTable.Time, baseDataTable.LWPositionY, simTime, 'linear', 'extrap') * 180/pi;
    rwristPositionX = interp1(baseDataTable.Time, baseDataTable.RWPositionX, simTime, 'linear', 'extrap') * 180/pi;
    rwristPositionY = interp1(baseDataTable.Time, baseDataTable.RWPositionY, simTime, 'linear', 'extrap') * 180/pi;

catch ME
    warning('Error interpolating data from baseDataTable at time %g: %s', simTime, ME.message);
    % Return empty table if interpolation fails due to missing columns
    close_system(zvcfModelName, 0); % Close model
    return; % Exit the function
end

% Assign interpolated torque values as constant inputs to the ZVCF model using setVariable
% NOTE: Ensure parameter names match your ZVCF model's input blocks/parameters
in_zvcf = in_zvcf.setVariable('JointTorqueHip', hipJointTorque);
in_zvcf = in_zvcf.setVariable('JointTorqueTorso', torsoJointTorque);
in_zvcf = in_zvcf.setVariable('JointTorqueLScapX', lscapJointTorqueX);
in_zvcf = in_zvcf.setVariable('JointTorqueLScapY', lscapJointTorqueY);
in_zvcf = in_zvcf.setVariable('JointTorqueRScapX', rscapJointTorqueX);
in_zvcf = in_zvcf.setVariable('JointTorqueRScapY', rscapJointTorqueY);
in_zvcf = in_zvcf.setVariable('JointTorqueLShoulderX', lshoulderJointTorqueX);
in_zvcf = in_zvcf.setVariable('JointTorqueLShoulderY', lshoulderJointTorqueY);
in_zvcf = in_zvcf.setVariable('JointTorqueLShoulderZ', lshoulderJointTorqueZ);
in_zvcf = in_zvcf.setVariable('JointTorqueRShoulderX', rshoulderJointTorqueX);
in_zvcf = in_zvcf.setVariable('JointTorqueRShoulderY', rshoulderJointTorqueY);
in_zvcf = in_zvcf.setVariable('JointTorqueRShoulderZ', rshoulderJointTorqueZ);
in_zvcf = in_zvcf.setVariable('JointTorqueLElbow', lelbowJointTorque);
in_zvcf = in_zvcf.setVariable('JointTorqueRElbow', relbowJointTorque);
in_zvcf = in_zvcf.setVariable('JointTorqueLWristX', lwristJointTorqueX);
in_zvcf = in_zvcf.setVariable('JointTorqueLWristY', lwristJointTorqueY);
in_zvcf = in_zvcf.setVariable('JointTorqueRWristX', rwristJointTorqueX);
in_zvcf = in_zvcf.setVariable('JointTorqueRWristY', rwristJointTorqueY);

% Assign interpolated position values as initial positions for the ZVCF model using setVariable
% Set initial velocities to zero using setVariable
% NOTE: Ensure parameter names match your ZVCF model's initial condition parameters
in_zvcf = in_zvcf.setVariable('HipStartPosition', hipPosition);
in_zvcf = in_zvcf.setVariable('HipStartVelocity', 0);
in_zvcf = in_zvcf.setVariable('TorsoStartPosition', torsoPosition);
in_zvcf = in_zvcf.setVariable('TorsoStartVelocity', 0);
in_zvcf = in_zvcf.setVariable('LScapStartPositionX', lscapPositionX);
in_zvcf = in_zvcf.setVariable('LScapStartVelocityX', 0);
in_zvcf = in_zvcf.setVariable('LScapStartPositionY', lscapPositionY);
in_zvcf = in_zvcf.setVariable('LScapStartVelocityY', 0);
in_zvcf = in_zvcf.setVariable('RScapStartPositionX', rscapPositionX);
in_zvcf = in_zvcf.setVariable('RScapStartVelocityX', 0);
in_zvcf = in_zvcf.setVariable('RScapStartPositionY', rscapPositionY);
in_zvcf = in_zvcf.setVariable('RScapStartVelocityY', 0);
in_zvcf = in_zvcf.setVariable('LShoulderStartPositionX', lshoulderPositionX);
in_zvcf = in_zvcf.setVariable('LShoulderStartVelocityX', 0);
in_zvcf = in_zvcf.setVariable('LShoulderStartPositionY', lshoulderPositionY);
in_zvcf = in_zvcf.setVariable('LShoulderStartVelocityY', 0);
in_zvcf = in_zvcf.setVariable('LShoulderStartPositionZ', lshoulderPositionZ);
in_zvcf = in_zvcf.setVariable('LShoulderStartVelocityZ', 0);
in_zvcf = in_zvcf.setVariable('RShoulderStartPositionX', rshoulderPositionX);
in_zvcf = in_zvcf.setVariable('RShoulderStartVelocityX', 0);
in_zvcf = in_zvcf.setVariable('RShoulderStartPositionY', rshoulderPositionY);
in_zvcf = in_zvcf.setVariable('RShoulderStartVelocityY', 0);
in_zvcf = in_zvcf.setVariable('RShoulderStartPositionZ', rshoulderPositionZ);
in_zvcf = in_zvcf.setVariable('RShoulderStartVelocityZ', 0);
in_zvcf = in_zvcf.setVariable('LElbowStartPosition', lelbowPosition);
in_zvcf = in_zvcf.setVariable('LElbowStartVelocity', 0);
in_zvcf = in_zvcf.setVariable('RElbowStartPosition', relbowPosition);
in_zvcf = in_zvcf.setVariable('RElbowStartVelocity', 0);
in_zvcf = in_zvcf.setVariable('LWristStartPositionX', lwristPositionX);
in_zvcf = in_zvcf.setVariable('LWristStartVelocityX', 0);
in_zvcf = in_zvcf.setVariable('LWristStartPositionY', lwristPositionY);
in_zvcf = in_zvcf.setVariable('LWristStartVelocityY', 0);
in_zvcf = in_zvcf.setVariable('RWristStartPositionX', rwristPositionX);
in_zvcf = in_zvcf.setVariable('RWristStartVelocityX', 0);
in_zvcf = in_zvcf.setVariable('RWristStartPositionY', rwristPositionY);
in_zvcf = in_zvcf.setVariable('RWristStartVelocityY', 0);


% Ensure logging is configured in the model or via the input object
% in_zvcf = in_zvcf.setLoggingOption('all'); % Example if needed

% --- Run the Simulation ---
fprintf('Running ZVCF simulation at time %g...\n', simTime);
try
    out_zvcf = sim(in_zvcf);
    fprintf('ZVCF simulation complete.\n');
catch ME
    warning('Error running ZVCF simulation at time %g: %s', simTime, ME.message);
    close_system(zvcfModelName, 0); % Close model
    return; % Exit the function
end

% --- Generate Data Table from Output ---
% Assuming generateDataTable3D function is available on the path
try
    zvcfDataTable = generateDataTable3D(out_zvcf);
    % The ZVCF simulation is short (0.05s), so the dataTable will have
    % multiple rows. The original script took the first row (time zero).
    % If you need only the data at the *start* of the ZVCF simulation,
    % you might take the first row here:
    % zvcfDataTable = zvcfDataTable(1,:);
    % And potentially overwrite its time with simTime:
    % zvcfDataTable.Time = simTime;
    % However, if you need the *full* 0.05s of simulation data for this time point,
    % the current approach of returning the full table is correct.
    % Let's return the full table as generateDataTable3D does.
    fprintf('ZVCF data table generated.\n');
catch ME
    warning('Error generating data table from ZVCF output at time %g: %s', simTime, ME.message);
    zvcfDataTable = table(); % Return empty table on error
end


% --- Final Cleanup (Close Model) ---
% Close the ZVCF model if it was opened by this function
% (Only close if it wasn't already loaded when the function started)
% This check is more complex, for simplicity, we'll just close it.
% If performance is critical and you run this function many times,
% consider keeping the model open and using Fast Restart if possible for ZVCF.
% However, ZVCF simulations are short and independent, so closing might be fine.
close_system(zvcfModelName, 0); % Close without saving changes


% No need for explicit 'clear' statements within a function.
% All intermediate variables are local and cleared automatically.

end

%%% END FILE: Functions\runZvcfSingleTime.m %%%

%%% START FILE: Functions\shelledQuivers3.m %%%
<INSERT CODE FROM CANVAS>

%%% END FILE: Functions\shelledQuivers3.m %%%

%%% START FILE: Plotting Scripts\MASTER_SCRIPT_AllCharts_3D.m %%%
function MASTER_SCRIPT_AllCharts_3D(BASEQ, ZTCFQ, DELTAQ, ZVCFQ, ModelData)
% MASTER_SCRIPT_AllCharts_3D - One-call runner for all consolidated quiver and plot charts
% Replaces legacy SCRIPT_AllPlots_3D.m by calling modern unified plot functions

%% Ensure output directories exist
mkdir('BaseData Charts');
mkdir('ZTCF Charts');
mkdir('Delta Charts');
mkdir('ZVCF Charts');
mkdir('Model Data Charts');
mkdir('Comparison Charts');
mkdir('BaseData Quiver Plots');
mkdir('ZTCF Quiver Plots');
mkdir('Delta Quiver Plots');
mkdir('ZVCF Quiver Plots');
mkdir('Model Data Quiver Plots');
mkdir('Comparison Quiver Plots');

%% Run master quiver plots
PLOT_BASEQuiver(BASEQ);
PLOT_ZTCFQuiver(ZTCFQ);
PLOT_DELTAQuiver(BASEQ, DELTAQ, ZTCFQ);
PLOT_ZVCFQuiver(ZVCFQ, DELTAQ, BASEQ);
PLOT_ModelDataQuiver(ModelData);
PLOT_ComparisonQuiver(BASEQ, DELTAQ);

%% Run master line/time-series plots
PLOT_BASE_Plots(BASEQ);
PLOT_ZTCF_Plots(ZTCFQ);
PLOT_DELTA_Plots(DELTAQ);
PLOT_ZVCF_Plots(ZVCFQ);
PLOT_ModelData_Plots(ModelData);
PLOT_Comparison_Plots(BASEQ, ZTCFQ, DELTAQ);

disp('All chart and quiver plots completed successfully.');
end

%%% END FILE: Plotting Scripts\MASTER_SCRIPT_AllCharts_3D.m %%%

%%% START FILE: Plotting Scripts\PLOT_AllQuiverCharts.m %%%
function PLOT_AllQuiverCharts(BASEQ, ZTCFQ, DELTAQ, ZVCFQ, ModelData)
%PLOT_AllQuiverCharts - Master runner for all unified quiver plotting scripts
% This script sequentially calls all PLOT_*Quiver functions, saving outputs into their respective folders.

% Ensure output directories exist
mkdir('BaseData Quiver Plots');
mkdir('ZTCF Quiver Plots');
mkdir('Delta Quiver Plots');
mkdir('ZVCF Quiver Plots');
mkdir('Model Data Quiver Plots');
mkdir('Comparison Quiver Plots');

% Run all quiver suites (plot functions)
PLOT_BASEQuiver(BASEQ);
PLOT_ZTCFQuiver(ZTCFQ);
PLOT_DELTAQuiver(BASEQ, DELTAQ, ZTCFQ);
PLOT_ZVCFQuiver(ZVCFQ, DELTAQ, BASEQ);
PLOT_ModelDataQuiver(ModelData);
PLOT_ComparisonQuiver(BASEQ, DELTAQ);

disp('All quiver plots generated and saved.');
end

%%% END FILE: Plotting Scripts\PLOT_AllQuiverCharts.m %%%

%%% START FILE: Plotting Scripts\PLOT_BASEQuiver.m %%%
function PLOT_BASEQuiver(BASEQ)
%PLOT_BASEQuiver - Full master plot for all BASE quiver plots
% Mirrors MASTER_SCRIPT_BaseDataCharts_3D.m using overlayQuiverForces

%% Plot 1: Net Force and Equivalent Couple
figure(1);
P = [BASEQ.MPx, BASEQ.MPy, BASEQ.MPz];
F = BASEQ.TotalHandForceGlobal;
C = BASEQ.EquivalentMidpointCoupleGlobal;
overlayQuiverForces({P, P}, {F, C}, 'Tags', {'Net Force', 'Equivalent MP Couple'}, 'Colors', {[0 1 0], [0.8 0.2 0]}, 'Title', 'Net Force & Equivalent Couple');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Net Force and Equivalent MP Couple');

%% Plot 2: Net Force
figure(2);
overlayQuiverForces({P}, {F}, 'Tags', {'Net Force'}, 'Colors', {[0 1 0]}, 'Title', 'Net Force');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Net Force');

%% Plot 3: Hand Forces
figure(3);
PL = [BASEQ.LHx, BASEQ.LHy, BASEQ.LHz];
VL = BASEQ.LHonClubFGlobal;
PR = [BASEQ.RHx, BASEQ.RHy, BASEQ.RHz];
VR = BASEQ.RHonClubFGlobal;
overlayQuiverForces({PL, PR, P}, {VL, VR, F}, 'Tags', {'LH Force', 'RH Force', 'Net Force'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Forces');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Hand Forces');

%% Plot 4: Hand Torques
figure(4);
TL = BASEQ.LHonClubTGlobal;
TR = BASEQ.RHonClubTGlobal;
TNet = BASEQ.TotalHandTorqueGlobal;
overlayQuiverForces({PL, PR, P}, {TL, TR, TNet}, 'Tags', {'LH Torque', 'RH Torque', 'Net Torque'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Torques');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Hand Torques');

%% Plot 5: All Torques and MOFs
figure(5);
MOFL = BASEQ.LHMOFonClubGlobal;
MOFR = BASEQ.RHMOFonClubGlobal;
MOFTotal = BASEQ.MPMOFonClubGlobal;
overlayQuiverForces({PL, PR, P, PL, PR, P}, {MOFL, MOFR, MOFTotal, TL, TR, TNet}, 'Tags', {'LH MOF','RH MOF','Total MOF','LH Torque','RH Torque','Net Torque'}, 'Colors', {[0 0.5 0],[0.5 0 0],[0 0 0.5],[0 0 1],[1 0 0],[0 1 0]}, 'Title', 'All Torques and Moments');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Torques and Moments');

%% Plot 6: LHRH MOFs Only
figure(6);
overlayQuiverForces({PL, PR}, {MOFL, MOFR}, 'Tags', {'LH MOF','RH MOF'}, 'Colors', {[0 0.5 0],[0.5 0 0]}, 'Title', 'LHRH Moments of Force');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - LHRH Moments of Force');

%% Plot 7: Club COM Dots
figure(7);
COM = BASEQ.ClubCOM;
overlayQuiverForces({COM}, {zeros(size(COM))}, 'Tags', {'COM'}, 'Colors', {[0.25 0.25 0.25]}, 'Title', 'Club COM Points');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Club COM Dots');

%% Plot 8: Upper Arm Forces and MOFs (Right Only Shown)
figure(8);

PRA = [BASEQ.RSx, BASEQ.RSy, BASEQ.RSz];
ERA = [BASEQ.REx, BASEQ.REy, BASEQ.REz];
VRA = [BASEQ.RightArmdx, BASEQ.RightArmdy, BASEQ.RightArmdz];
F1 = [BASEQ.RForearmonRArmFGlobal1, BASEQ.RForearmonRArmFGlobal2, BASEQ.RForearmonRArmFGlobal3];
F2 = [BASEQ.RSonRArmFGlobal1, BASEQ.RSonRArmFGlobal2, BASEQ.RSonRArmFGlobal3];
M1 = [BASEQ.RElbowonRArmMOFGlobal1, BASEQ.RElbowonRArmMOFGlobal2, BASEQ.RElbowonRArmMOFGlobal3];
M2 = [BASEQ.RShoulderonRArmMOFGlobal1, BASEQ.RShoulderonRArmMOFGlobal2, BASEQ.RShoulderonRArmMOFGlobal3];
overlayQuiverForces({ERA, PRA, ERA, PRA, PRA}, {F1, F2, M1, M2, VRA}, 'Tags', {'RE Force','RS Force','RE MOF','RS MOF','Arm Vector'}, 'Colors', {[0 0 1],[1 0 0],[0 0.75 0],[0 0.5 0],[0 0 0]}, 'Title', 'Right Arm Forces and MOFs');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Right Upper Arm Moments');

%% SCRIPT_118-121 Moment Snapshots
% Right Upper Arm MOF
figure(11);
overlayQuiverForces({[BASEQ.RSx, BASEQ.RSy, BASEQ.RSz]}, {[BASEQ.RShoulderonRArmMOFGlobal1, BASEQ.RShoulderonRArmMOFGlobal2, BASEQ.RShoulderonRArmMOFGlobal3]}, 'Tags', {'RS MOF'}, 'Colors', {[0 0.5 0]}, 'Title', 'Right Upper Arm Moment');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Right Upper Arm MOF');

% Left Upper Arm MOF
figure(12);
overlayQuiverForces({[BASEQ.LSx, BASEQ.LSy, BASEQ.LSz]}, {[BASEQ.LShoulderonLArmMOFGlobal1, BASEQ.LShoulderonLArmMOFGlobal2, BASEQ.LShoulderonLArmMOFGlobal3]}, 'Tags', {'LS MOF'}, 'Colors', {[0.25 0.25 0.8]}, 'Title', 'Left Upper Arm Moment');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Left Upper Arm MOF');

% Right Forearm MOF
figure(13);
overlayQuiverForces({[BASEQ.REx, BASEQ.REy, BASEQ.REz]}, {[BASEQ.RElbowonRArmMOFGlobal1, BASEQ.RElbowonRArmMOFGlobal2, BASEQ.RElbowonRArmMOFGlobal3]}, 'Tags', {'RE MOF'}, 'Colors', {[0.5 0.2 0.6]}, 'Title', 'Right Forearm Moment');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Right Forearm MOF');

% Left Forearm MOF
figure(14);
overlayQuiverForces({[BASEQ.LEx, BASEQ.LEy, BASEQ.LEz]}, {[BASEQ.LElbowonLArmMOFGlobal1, BASEQ.LElbowonLArmMOFGlobal2, BASEQ.LElbowonLArmMOFGlobal3]}, 'Tags', {'LE MOF'}, 'Colors', {[0.4 0.4 1]}, 'Title', 'Left Forearm Moment');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Left Forearm MOF');

%% Plot 9: Linear Impulse
figure(9);
LI = BASEQ.LinearImpulseonClub;
overlayQuiverForces({P}, {LI}, 'Tags', {'Linear Impulse'}, 'Colors', {[0 1 0]}, 'Title', 'Total Linear Impulse on Club');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Total Linear Impulse on Club');

%% Plot 10: Angular Impulse
figure(10);
AI = BASEQ.LHAngularImpulseonClub + BASEQ.RHAngularImpulseonClub;
overlayQuiverForces({P}, {AI}, 'Tags', {'Angular Impulse'}, 'Colors', {[0 1 0]}, 'Title', 'Total Angular Impulse on Club');
savefig('BaseData Quiver Plots/BASE_Quiver Plot - Total Angular Impulse on Club');

end

%%% END FILE: Plotting Scripts\PLOT_BASEQuiver.m %%%

%%% START FILE: Plotting Scripts\PLOT_BASE_Plots.m %%%
function PLOT_BASE_Plots(BASEQ)
%%% ====== Start of SCRIPT_101_3D_PLOT_BaseData_AngularWork.m ======
figure(101);
hold on;
plot(BASEQ.Time,BASEQ.LSAngularWorkonArm);
plot(BASEQ.Time,BASEQ.RSAngularWorkonArm);
plot(BASEQ.Time,BASEQ.LEAngularWorkonForearm);
plot(BASEQ.Time,BASEQ.REAngularWorkonForearm);
plot(BASEQ.Time,BASEQ.LHAngularWorkonClub);
plot(BASEQ.Time,BASEQ.RHAngularWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Work','RS Angular Work','LE Angular Work','RE Angular Work','LH Angular Work','RH Angular Work');
legend('Location','southeast');
%Add a Title
title('Angular Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Angular Work');
pause(PauseTime);
%Close Figure
close(101);

%% ====== End of SCRIPT_101_3D_PLOT_BaseData_AngularWork.m ======

%% ====== Start of SCRIPT_102_3D_PLOT_BaseData_AngularPower.m ======
figure(102);
hold on;
plot(BASEQ.Time,BASEQ.LSonArmAngularPower);
plot(BASEQ.Time,BASEQ.RSonArmAngularPower);
plot(BASEQ.Time,BASEQ.LEonForearmAngularPower);
plot(BASEQ.Time,BASEQ.REonForearmAngularPower);
plot(BASEQ.Time,BASEQ.LHonClubAngularPower);
plot(BASEQ.Time,BASEQ.RHonClubAngularPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Power','RS Angular Power','LE Angular Power','RE Angular Power','LH Angular Power','RH Angular Power');
legend('Location','southeast');
%Add a Title
title('Angular Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Angular Power');
pause(PauseTime);
%Close Figure
close(102);

%% ====== End of SCRIPT_102_3D_PLOT_BaseData_AngularPower.m ======

%% ====== Start of SCRIPT_103_3D_PLOT_BaseData_LinearPower.m ======
figure(103);
hold on;
plot(BASEQ.Time,BASEQ.LSonArmLinearPower);
plot(BASEQ.Time,BASEQ.RSonArmLinearPower);
plot(BASEQ.Time,BASEQ.LEonForearmLinearPower);
plot(BASEQ.Time,BASEQ.REonForearmLinearPower);
plot(BASEQ.Time,BASEQ.LHonClubLinearPower);
plot(BASEQ.Time,BASEQ.RHonClubLinearPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','RS Linear Power','LE Linear Power','RE Linear Power','LH Linear Power','RH Linear Power');
legend('Location','southeast');
%Add a Title
title('Linear Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Linear Power');
pause(PauseTime);
%Close Figure
close(103);

%% ====== End of SCRIPT_103_3D_PLOT_BaseData_LinearPower.m ======

%% ====== Start of SCRIPT_104_3D_PLOT_BaseData_LinearWork.m ======
figure(104);
hold on;
plot(BASEQ.Time,BASEQ.LSLinearWorkonArm);
plot(BASEQ.Time,BASEQ.RSLinearWorkonArm);
plot(BASEQ.Time,BASEQ.LELinearWorkonForearm);
plot(BASEQ.Time,BASEQ.RELinearWorkonForearm);
plot(BASEQ.Time,BASEQ.LHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.RHLinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','RS Linear Work','LE Linear Work','RE Linear Work','LH Linear Work','RH Linear Work');
legend('Location','southeast');
%Add a Title
title('Linear Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Linear Work on Distal');
pause(PauseTime);
%Close Figure
close(104);

%% ====== End of SCRIPT_104_3D_PLOT_BaseData_LinearWork.m ======

%% ====== Start of SCRIPT_105_3D_PLOT_BaseData_JointTorqueInputs.m ======
figure(105);
hold on;
plot(BASEQ.Time,BASEQ.HipTorqueXInput);
plot(BASEQ.Time,BASEQ.HipTorqueYInput);
plot(BASEQ.Time,BASEQ.HipTorqueZInput);
plot(BASEQ.Time,BASEQ.TranslationForceXInput);
plot(BASEQ.Time,BASEQ.TranslationForceYInput);
plot(BASEQ.Time,BASEQ.TranslationForceZInput);
plot(BASEQ.Time,BASEQ.TorsoTorqueInput);
plot(BASEQ.Time,BASEQ.SpineTorqueXInput);
plot(BASEQ.Time,BASEQ.SpineTorqueYInput);
plot(BASEQ.Time,BASEQ.LScapTorqueXInput);
plot(BASEQ.Time,BASEQ.LScapTorqueYInput);
plot(BASEQ.Time,BASEQ.RScapTorqueXInput);
plot(BASEQ.Time,BASEQ.RScapTorqueYInput);
plot(BASEQ.Time,BASEQ.LSTorqueXInput);
plot(BASEQ.Time,BASEQ.LSTorqueYInput);
plot(BASEQ.Time,BASEQ.LSTorqueZInput);
plot(BASEQ.Time,BASEQ.RSTorqueXInput);
plot(BASEQ.Time,BASEQ.RSTorqueYInput);
plot(BASEQ.Time,BASEQ.RSTorqueZInput);
plot(BASEQ.Time,BASEQ.LETorqueInput);
plot(BASEQ.Time,BASEQ.RETorqueInput);
plot(BASEQ.Time,BASEQ.LFTorqueInput);
plot(BASEQ.Time,BASEQ.RFTorqueInput);
plot(BASEQ.Time,BASEQ.LWTorqueXInput);
plot(BASEQ.Time,BASEQ.LWTorqueYInput);
plot(BASEQ.Time,BASEQ.RWTorqueXInput);
plot(BASEQ.Time,BASEQ.RWTorqueYInput);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Torque X','Hip Torque Y','Hip Torque Z','Translation Force X',...
'Translation Force Y','Translation Force Z','Torso Torque','Spine Torque X',...
'Spine Torque Y','LScap Torque X','Left Scap Torque Y','RScap Torque X',...
'RScapTorqueY','LS Torque X','LS Torque Y','LS Torque Z','RS Torque X','RS Torque Y',...
'RS Torque Z','LE Torque','RE Torque','LF Torque','RF Torque','LW Torque X',...
'LW Torque Y','RW Torque X','RW Torque Y');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
%subtitle('Left Hand, Right Hand, Total');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(105);

%% ====== End of SCRIPT_105_3D_PLOT_BaseData_JointTorqueInputs.m ======

%% ====== Start of SCRIPT_106_3D_PLOT_BaseData_TotalWork.m ======
figure(106);
hold on;
plot(BASEQ.Time,BASEQ.TotalLSWork);
plot(BASEQ.Time,BASEQ.TotalRSWork);
plot(BASEQ.Time,BASEQ.TotalLEWork);
plot(BASEQ.Time,BASEQ.TotalREWork);
plot(BASEQ.Time,BASEQ.TotalLHWork);
plot(BASEQ.Time,BASEQ.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total Work','RS Total Work','LE Total Work','RE Total Work','LH Total Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Total Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Total Work');
pause(PauseTime);
%Close Figure
close(106);

%% ====== End of SCRIPT_106_3D_PLOT_BaseData_TotalWork.m ======

%% ====== Start of SCRIPT_107_3D_PLOT_BaseData_TotalPower.m ======
figure(107);
hold on;
plot(BASEQ.Time,BASEQ.TotalLSPower);
plot(BASEQ.Time,BASEQ.TotalRSPower);
plot(BASEQ.Time,BASEQ.TotalLEPower);
plot(BASEQ.Time,BASEQ.TotalREPower);
plot(BASEQ.Time,BASEQ.TotalLHPower);
plot(BASEQ.Time,BASEQ.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total Power','RS Total Power','LE Total Power','RE Total Power','LW Total Power','RW Total Power');
legend('Location','southeast');
%Add a Title
title('Total Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Total Power');
pause(PauseTime);
%Close Figure
close(107);

%% ====== End of SCRIPT_107_3D_PLOT_BaseData_TotalPower.m ======

%% ====== Start of SCRIPT_122_3D_PLOT_BaseData_ForceAlongHandPath.m ======
figure(122);
plot(BASEQ.Time,BASEQ.ForceAlongHandPath);
xlabel('Time (s)');
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Force Along Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Force Along Hand Path');
pause(PauseTime);
%Close Figure
close(122);

%% ====== End of SCRIPT_122_3D_PLOT_BaseData_ForceAlongHandPath.m ======

%% ====== Start of SCRIPT_123_3D_PLOT_BaseData_CHSandHandSpeed.m ======
figure(123);
hold on;
plot(BASEQ.Time,BASEQ.("CHS (mph)"));
plot(BASEQ.Time,BASEQ.("Hand Speed (mph)"));
xlabel('Time (s)');
ylabel('Speed (mph)');
grid 'on';
%Add Legend to Plot
legend('Clubhead Speed (mph)','Hand Speed (mph)');
legend('Location','southeast');
%Add a Title
title('Clubhead and Hand Speed');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - CHS and Hand Speed');
pause(PauseTime);
%Close Figure
close(123);

%% ====== End of SCRIPT_123_3D_PLOT_BaseData_CHSandHandSpeed.m ======

%% ====== Start of SCRIPT_125_3D_PLOT_BaseData_LHRHForceAlongHandPath.m ======
figure(125);
hold on;
plot(BASEQ.Time,BASEQ.LHForceAlongHandPath);
plot(BASEQ.Time,BASEQ.RHForceAlongHandPath);
plot(BASEQ.Time,BASEQ.ForceAlongHandPath);
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('LH Force on Left Hand Path','RH Force on Right Hand Path','Net Force Along MP Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
%subtitle('Left Hand, Right Hand, Total');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Force Along Hand Path - LH RH Total');
pause(PauseTime);
%Close Figure
close(125);

%% ====== End of SCRIPT_125_3D_PLOT_BaseData_LHRHForceAlongHandPath.m ======

%% ====== Start of SCRIPT_126_3D_PLOT_BaseData_LinearImpulse.m ======
figure(126);
plot(BASEQ.Time,BASEQ.LinearImpulseonClub);
xlabel('Time (s)');
ylabel('Impulse (Ns)');
grid 'on';
%Add Legend to Plot
legend('Linear Impulse');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Linear Impulse');
pause(PauseTime);
%Close Figure
close(126);

%% ====== End of SCRIPT_126_3D_PLOT_BaseData_LinearImpulse.m ======

%% ====== Start of SCRIPT_127_3D_PLOT_BaseData_LinearWork.m ======
figure(127);
hold on;
plot(BASEQ.Time,BASEQ.LHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.RHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.LinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','RH Linear Work','Net Force Linear Work (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Work');
subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Linear Work on Club');
subtitle('BaseData');
pause(PauseTime);
%Close Figure
close(127);

%% ====== End of SCRIPT_127_3D_PLOT_BaseData_LinearWork.m ======

%% ====== Start of SCRIPT_128_3D_PLOT_BaseData_LinearImpulse.m ======
figure(128);
hold on;
plot(BASEQ.Time,BASEQ.LHLinearImpulseonClub);
plot(BASEQ.Time,BASEQ.RHLinearImpulseonClub);
plot(BASEQ.Time,BASEQ.LinearImpulseonClub);
ylabel('Linear Impulse (kgm/s)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Impulse','RH Linear Impulse','Net Force Linear Impulse (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
%subtitle('Left Hand, Right Hand, Total');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Linear Impulse LH,RH,Total');
pause(PauseTime);
%Close Figure
close(128);

%% ====== End of SCRIPT_128_3D_PLOT_BaseData_LinearImpulse.m ======

%% ====== Start of SCRIPT_129_3D_PLOT_BaseData_EquivalentCoupleandMOF.m ======
figure(129);
hold on;
EQMPLOCAL=BASEQ.EquivalentMidpointCoupleLocal(:,3);
MPMOFLOCAL=BASEQ.MPMOFonClubLocal(:,3);
SUMOFMOMENTSLOCAL=BASEQ.SumofMomentsonClubLocal(:,3);
plot(BASEQ.Time,EQMPLOCAL);
plot(BASEQ.Time,MPMOFLOCAL);
plot(BASEQ.Time,SUMOFMOMENTSLOCAL);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Equivalent Midpoint Couple','Total Force on Midpoint MOF','Sum of Moments');
legend('Location','southeast');
%Add a Title
title('Equivalent Couple, Moment of Force, Sum of Moments');
subtitle('BASE - Grip Reference Frame');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Equivalent Couple and MOF');
pause(PauseTime);
%Close Figure
close(129);

%% ====== End of SCRIPT_129_3D_PLOT_BaseData_EquivalentCoupleandMOF.m ======

%% ====== Start of SCRIPT_130_3D_PLOT_BaseData_LSWork.m ======
figure(130);
hold on;
plot(BASEQ.Time,BASEQ.LSLinearWorkonArm);
plot(BASEQ.Time,BASEQ.LSAngularWorkonArm);
plot(BASEQ.Time,BASEQ.TotalLSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','LS Angular Work','LS Total Work');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Left Shoulder Work');
pause(PauseTime);
%Close Figure
close(130);

%% ====== End of SCRIPT_130_3D_PLOT_BaseData_LSWork.m ======

%% ====== Start of SCRIPT_131_3D_PLOT_BaseData_LSPower.m ======
figure(131);
hold on;
plot(BASEQ.Time,BASEQ.LSonArmLinearPower);
plot(BASEQ.Time,BASEQ.LSonArmAngularPower);
plot(BASEQ.Time,BASEQ.TotalLSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','LS Angular Power','LS Total Power');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Left Shoulder Power');
pause(PauseTime);
%Close Figure
close(131);

%% ====== End of SCRIPT_131_3D_PLOT_BaseData_LSPower.m ======

%% ====== Start of SCRIPT_132_3D_PLOT_BaseData_RSWork.m ======
figure(132);
hold on;
plot(BASEQ.Time,BASEQ.RSLinearWorkonArm);
plot(BASEQ.Time,BASEQ.RSAngularWorkonArm);
plot(BASEQ.Time,BASEQ.TotalRSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Work','RS Angular Work','RS Total Work');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Right Shoulder Work');
pause(PauseTime);
%Close Figure
close(132);

%% ====== End of SCRIPT_132_3D_PLOT_BaseData_RSWork.m ======

%% ====== Start of SCRIPT_133_3D_PLOT_BaseData_RSPower.m ======
figure(133);
hold on;
plot(BASEQ.Time,BASEQ.RSonArmLinearPower);
plot(BASEQ.Time,BASEQ.RSonArmAngularPower);
plot(BASEQ.Time,BASEQ.TotalRSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Power','RS Angular Power','RS Total Power');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Right Shoulder Power');
pause(PauseTime);
%Close Figure
close(133);

%% ====== End of SCRIPT_133_3D_PLOT_BaseData_RSPower.m ======

%% ====== Start of SCRIPT_134_3D_PLOT_BaseData_LEWork.m ======
figure(134);
hold on;
plot(BASEQ.Time,BASEQ.LELinearWorkonForearm);
plot(BASEQ.Time,BASEQ.LEAngularWorkonForearm);
plot(BASEQ.Time,BASEQ.TotalLEWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Work','LE Angular Work','LE Total Work');
legend('Location','southeast');
%Add a Title
title('Left Elbow Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Left Elbow Work');
pause(PauseTime);
%Close Figure
close(134);

%% ====== End of SCRIPT_134_3D_PLOT_BaseData_LEWork.m ======

%% ====== Start of SCRIPT_135_3D_PLOT_BaseData_LEPower.m ======
figure(135);
hold on;
plot(BASEQ.Time,BASEQ.LEonForearmLinearPower);
plot(BASEQ.Time,BASEQ.LEonForearmAngularPower);
plot(BASEQ.Time,BASEQ.TotalLEPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Power','LE Angular Power','LE Total Power');
legend('Location','southeast');
%Add a Title
title('Left Elbow Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Left Elbow Power');
pause(PauseTime);
%Close Figure
close(135);

%% ====== End of SCRIPT_135_3D_PLOT_BaseData_LEPower.m ======

%% ====== Start of SCRIPT_136_3D_PLOT_BaseData_REWork.m ======
figure(136);
hold on;
plot(BASEQ.Time,BASEQ.RELinearWorkonForearm);
plot(BASEQ.Time,BASEQ.REAngularWorkonForearm);
plot(BASEQ.Time,BASEQ.TotalREWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Work','RE Angular Work','RE Total Work');
legend('Location','southeast');
%Add a Title
title('Right Elbow Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Right Elbow Work');
pause(PauseTime);
%Close Figure
close(136);

%% ====== End of SCRIPT_136_3D_PLOT_BaseData_REWork.m ======

%% ====== Start of SCRIPT_137_3D_PLOT_BaseData_REPower.m ======
figure(137);
hold on;
plot(BASEQ.Time,BASEQ.REonForearmLinearPower);
plot(BASEQ.Time,BASEQ.REonForearmAngularPower);
plot(BASEQ.Time,BASEQ.TotalREPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Power','RE Angular Power','RE Total Power');
legend('Location','southeast');
%Add a Title
title('Right Elbow Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Right Elbow Power');
pause(PauseTime);
%Close Figure
close(137);

%% ====== End of SCRIPT_137_3D_PLOT_BaseData_REPower.m ======

%% ====== Start of SCRIPT_138_3D_PLOT_BaseData_LHWork.m ======
figure(138);
hold on;
plot(BASEQ.Time,BASEQ.LHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.LHAngularWorkonClub);
plot(BASEQ.Time,BASEQ.TotalLHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','LH Angular Work','LH Total Work');
legend('Location','southeast');
%Add a Title
title('Left Wrist Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Left Wrist Work');
pause(PauseTime);
%Close Figure
close(138);

%% ====== End of SCRIPT_138_3D_PLOT_BaseData_LHWork.m ======

%% ====== Start of SCRIPT_139_3D_PLOT_BaseData_LHPower.m ======
figure(139);
hold on;
plot(BASEQ.Time,BASEQ.LHonClubLinearPower);
plot(BASEQ.Time,BASEQ.LHonClubAngularPower);
plot(BASEQ.Time,BASEQ.TotalLHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Power','LH Angular Power','LH Total Power');
legend('Location','southeast');
%Add a Title
title('Left Wrist Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Left Wrist Power');
pause(PauseTime);
%Close Figure
close(139);

%% ====== End of SCRIPT_139_3D_PLOT_BaseData_LHPower.m ======

%% ====== Start of SCRIPT_140_3D_PLOT_BaseData_RHWork.m ======
figure(140);
hold on;
plot(BASEQ.Time,BASEQ.RHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.RHAngularWorkonClub);
plot(BASEQ.Time,BASEQ.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Work','RH Angular Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Right Wrist Work on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Right Wrist Work');
pause(PauseTime);
%Close Figure
close(140);

%% ====== End of SCRIPT_140_3D_PLOT_BaseData_RHWork.m ======

%% ====== Start of SCRIPT_141_3D_PLOT_BaseData_RHPower.m ======
figure(141);
hold on;
plot(BASEQ.Time,BASEQ.RHonClubLinearPower);
plot(BASEQ.Time,BASEQ.RHonClubAngularPower);
plot(BASEQ.Time,BASEQ.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Power','RH Angular Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Right Wrist Power on Distal Segment');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Right Wrist Power');
pause(PauseTime);
%Close Figure
close(141);

%% ====== End of SCRIPT_141_3D_PLOT_BaseData_RHPower.m ======

%% ====== Start of SCRIPT_148_3D_PLOT_BaseData_LocalHandForces.m ======
figure(148);
hold on;
plot(BASEQ.Time(:,1),BASEQ.LHonClubForceLocal(:,1));
plot(BASEQ.Time(:,1),BASEQ.LHonClubForceLocal(:,2));
plot(BASEQ.Time(:,1),BASEQ.LHonClubForceLocal(:,3));
plot(BASEQ.Time(:,1),BASEQ.RHonClubForceLocal(:,1));
plot(BASEQ.Time(:,1),BASEQ.RHonClubForceLocal(:,2));
plot(BASEQ.Time(:,1),BASEQ.RHonClubForceLocal(:,3));
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Left Hand X','Left Hand Y','Left Hand Z','Right Hand X','Right Hand Y','Right Hand Z');
legend('Location','southeast');
%Add a Title
title('Local Hand Forces on Club');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Local Hand Forces');
pause(PauseTime);
%Close Figure
close(148);

%% ====== End of SCRIPT_148_3D_PLOT_BaseData_LocalHandForces.m ======

%% ====== Start of SCRIPT_150_3D_PLOT_BaseData_TorqueInputvsTorqueOutput.m ======
figure(150);
hold on;
plot(BASEQ.Time,BASEQ.HipConstraintTorqueX);
plot(BASEQ.Time,BASEQ.HipConstraintTorqueY);
plot(BASEQ.Time,BASEQ.HipConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.TorsoConstraintTorqueX);
plot(BASEQ.Time,BASEQ.TorsoConstraintTorqueY);
plot(BASEQ.Time,BASEQ.TorsoConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.SpineConstraintTorqueX);
plot(BASEQ.Time,BASEQ.SpineConstraintTorqueY);
plot(BASEQ.Time,BASEQ.SpineConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.LScapConstraintTorqueX);
plot(BASEQ.Time,BASEQ.LScapConstraintTorqueY);
plot(BASEQ.Time,BASEQ.LScapConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.RScapConstraintTorqueX);
plot(BASEQ.Time,BASEQ.RScapConstraintTorqueY);
plot(BASEQ.Time,BASEQ.RScapConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.LSConstraintTorqueX);
plot(BASEQ.Time,BASEQ.LSConstraintTorqueY);
plot(BASEQ.Time,BASEQ.LSConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.RSConstraintTorqueX);
plot(BASEQ.Time,BASEQ.RSConstraintTorqueY);
plot(BASEQ.Time,BASEQ.RSConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.LEConstraintTorqueX);
plot(BASEQ.Time,BASEQ.LEConstraintTorqueY);
plot(BASEQ.Time,BASEQ.LEConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.REConstraintTorqueX);
plot(BASEQ.Time,BASEQ.REConstraintTorqueY);
plot(BASEQ.Time,BASEQ.REConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.LFConstraintTorqueX);
plot(BASEQ.Time,BASEQ.LFConstraintTorqueY);
plot(BASEQ.Time,BASEQ.LFConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.RFConstraintTorqueX);
plot(BASEQ.Time,BASEQ.RFConstraintTorqueY);
plot(BASEQ.Time,BASEQ.RFConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.LWConstraintTorqueX);
plot(BASEQ.Time,BASEQ.LWConstraintTorqueY);
plot(BASEQ.Time,BASEQ.LWConstraintTorqueZ);
plot(BASEQ.Time,BASEQ.RWConstraintTorqueX);
plot(BASEQ.Time,BASEQ.RWConstraintTorqueY);
plot(BASEQ.Time,BASEQ.RWConstraintTorqueZ);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Constraint Torque X','Hip Constraint Torque Y','Hip Constraint Torque Z',...
'Torso Constraint Torque X','Torso Constraint Torque Y','Torso Constraint Torque Z',...
'Spine Constraint Torque X','Spine Constraint Torque Y','Spine Constraint Torque Z',...
'LScap Constraint Torque X','LScap Constraint Torque Y','LScap Constraint Torque Z',...
'RScap Constraint Torque X','RScap Constraint Torque Y','RScap Constraint Torque Z',...
'LS Constraint Torque X','LS Constraint Torque Y','LS Constraint Torque Z',...
'RS Constraint Torque X','RS Constraint Torque Y','RS Constraint Torque Z',...
'LE Constraint Torque X','LE Constraint Torque Y','LE Constraint Torque Z',...
'RE Constraint Torque X','RE Constraint Torque Y','RE Constraint Torque Z',...
'LF Constraint Torque X','LF Constraint Torque Y','LF Constraint Torque Z',...
'RF Constraint Torque X','RF Constraint Torque Y','RF Constraint Torque Z',...
'LW Constraint Torque X','LW Constraint Torque Y','LW Constraint Torque Z',...
'RW Constraint Torque X','RW Constraint Torque Y','RW Constraint Torque Z');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
subtitle('BASE');
%Save Figure
savefig('BaseData Charts/BASE_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(150);

%% ====== End of SCRIPT_150_3D_PLOT_BaseData_TorqueInputvsTorqueOutput.m ======

end

%%% END FILE: Plotting Scripts\PLOT_BASE_Plots.m %%%

%%% START FILE: Plotting Scripts\PLOT_ComparisonQuiver.m %%%
function PLOT_ComparisonQuiver(BASEQ, DELTAQ)
%PLOT_ComparisonQuiverSuite - Visual comparison of ZVCF and DELTA forces
% Mirrors MASTER_SCRIPT_ComparisonCharts_3D.m

%% Plot 1: ZVCF vs DELTA LHRH Forces
figure(1);
PZL = [BASEQ.LHx, BASEQ.LHy, BASEQ.LHz];
PZR = [BASEQ.RHx, BASEQ.RHy, BASEQ.RHz];
PZM = [BASEQ.MPx, BASEQ.MPy, BASEQ.MPz];

FZL = BASEQ.LHonClubFGlobal;
FZR = BASEQ.RHonClubFGlobal;
FZT = BASEQ.TotalHandForceGlobal;

FDL = DELTAQ.LHonClubFGlobal;
FDR = DELTAQ.RHonClubFGlobal;
FDT = DELTAQ.TotalHandForceGlobal;

overlayQuiverForces({PZL, PZR, PZM, PZL, PZR, PZM}, ...
                    {FZL, FZR, FZT, FDL, FDR, FDT}, ...
    'Tags', {'ZVCF LH Force','ZVCF RH Force','ZVCF Net Force', ...
             'DELTA LH Force','DELTA RH Force','DELTA Net Force'}, ...
    'Colors', {[0 0 1], [1 0 0], [0 1 0], [0 0 0.5], [0.5 0 0], [0 0.5 0]}, ...
    'Title', 'LHRH Forces: ZVCF vs DELTA');
savefig('Comparison Quiver Plots/Comparison_Quiver Plot - ZVCF vs DELTA LHRH Forces');

%% Add other comparison plots as needed here

end

%%% END FILE: Plotting Scripts\PLOT_ComparisonQuiver.m %%%

%%% START FILE: Plotting Scripts\PLOT_Comparison_Plots.m %%%
function PLOT_Comparison_Plots()
%%% ====== Start of SCRIPT_704_3D_PLOT_Comparison_ForceAlongHandPath.m ======
figure(704);
hold on;
plot(BASEQ.Time,BASEQ.ForceAlongHandPath,'LineWidth',3);
plot(ZTCFQ.Time,ZTCFQ.ForceAlongHandPath,'--','LineWidth',3);
plot(DELTAQ.Time,DELTAQ.ForceAlongHandPath,':','LineWidth',3);
xlabel('Time (s)');
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('BASE','ZTCF','DELTA');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_Plot - Force Along Hand Path');
pause(PauseTime);
%Close Figure
close(704);

%% ====== End of SCRIPT_704_3D_PLOT_Comparison_ForceAlongHandPath.m ======

%% ====== Start of SCRIPT_705_3D_PLOT_Comparison_LinearWork.m ======
figure(705);
hold on;
plot(BASEQ.Time,BASEQ.LSLinearWorkonArm);
plot(BASEQ.Time,BASEQ.RSLinearWorkonArm);
plot(BASEQ.Time,BASEQ.LELinearWorkonForearm);
plot(BASEQ.Time,BASEQ.RELinearWorkonForearm);
plot(BASEQ.Time,BASEQ.LHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.RHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.LSLinearWorkonArm,'--');
plot(ZTCFQ.Time,ZTCFQ.RSLinearWorkonArm,'--');
plot(ZTCFQ.Time,ZTCFQ.LELinearWorkonForearm,'--');
plot(ZTCFQ.Time,ZTCFQ.RELinearWorkonForearm,'--');
plot(ZTCFQ.Time,ZTCFQ.LHLinearWorkonClub,'--');
plot(ZTCFQ.Time,ZTCFQ.RHLinearWorkonClub,'--');
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work - BASE','RS Linear Work - BASE','LE Linear Work - BASE','RE Linear Work - BASE','LW Linear Work - BASE','RW Linear Work - BASE','LS Linear Work - ZTCF','RS Linear Work - ZTCF','LE Linear Work - ZTCF','RE Linear Work - ZTCF','LW Linear Work - ZTCF','RW Linear Work - ZTCF');
legend('Location','southeast');
%Add a Title
title('Linear Work on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Linear Work on Distal');
pause(PauseTime);
%Close Figure
close(705);

%% ====== End of SCRIPT_705_3D_PLOT_Comparison_LinearWork.m ======

%% ====== Start of SCRIPT_706_3D_PLOT_Comparison_AngularWork.m ======
figure(706);
hold on;
plot(BASEQ.Time,BASEQ.LSAngularWorkonArm);
plot(BASEQ.Time,BASEQ.RSAngularWorkonArm);
plot(BASEQ.Time,BASEQ.LEAngularWorkonForearm);
plot(BASEQ.Time,BASEQ.REAngularWorkonForearm);
plot(BASEQ.Time,BASEQ.LHAngularWorkonClub);
plot(BASEQ.Time,BASEQ.RHAngularWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.LSAngularWorkonArm,'--');
plot(ZTCFQ.Time,ZTCFQ.RSAngularWorkonArm,'--');
plot(ZTCFQ.Time,ZTCFQ.LEAngularWorkonForearm,'--');
plot(ZTCFQ.Time,ZTCFQ.REAngularWorkonForearm,'--');
plot(ZTCFQ.Time,ZTCFQ.LHAngularWorkonClub,'--');
plot(ZTCFQ.Time,ZTCFQ.RHAngularWorkonClub,'--');
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Work - BASE','RS Angular Work - BASE','LE Angular Work - BASE','RE Angular Work - BASE','LH Angular Work - BASE','RH Angular Work - BASE','LS Angular Work - ZTCF','RS Angular Work - ZTCF','LE Angular Work - ZTCF','RE Angular Work - ZTCF','LH Angular Work - ZTCF','RH Angular Work - ZTCF');
legend('Location','southeast');
%Add a Title
title('Angular Work on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Angular Work on Distal');
pause(PauseTime);
%Close Figure
close(706);

%% ====== End of SCRIPT_706_3D_PLOT_Comparison_AngularWork.m ======

%% ====== Start of SCRIPT_707_3D_PLOT_Comparison_TotalWork.m ======
figure(707);
hold on;
plot(BASEQ.Time,BASEQ.TotalLSWork);
plot(BASEQ.Time,BASEQ.TotalRSWork);
plot(BASEQ.Time,BASEQ.TotalLEWork);
plot(BASEQ.Time,BASEQ.TotalREWork);
plot(BASEQ.Time,BASEQ.TotalLHWork);
plot(BASEQ.Time,BASEQ.TotalRHWork);
plot(ZTCFQ.Time,ZTCFQ.TotalLSWork,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalRSWork,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalLEWork,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalREWork,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalLHWork,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalRHWork,'--');
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total Work - BASE','RS Total Work - BASE','LE Total Work - BASE','RE Total Work - BASE','LH Total Work - BASE','RH Total Work - BASE','LS Total Work - ZTCF','RS Total Work - ZTCF','LE Total Work - ZTCF','RE Total Work - ZTCF','LH Total Work - ZTCF','RH Total Work - ZTCF');
legend('Location','southeast');
%Add a Title
title('Total Work on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total Work on Distal');
pause(PauseTime);
%Close Figure
close(707);

%% ====== End of SCRIPT_707_3D_PLOT_Comparison_TotalWork.m ======

%% ====== Start of SCRIPT_708_3D_PLOT_Comparison_LinearPower.m ======
figure(708);
hold on;
plot(BASEQ.Time,BASEQ.LSonArmLinearPower);
plot(BASEQ.Time,BASEQ.RSonArmLinearPower);
plot(BASEQ.Time,BASEQ.LEonForearmLinearPower);
plot(BASEQ.Time,BASEQ.REonForearmLinearPower);
plot(BASEQ.Time,BASEQ.LHonClubLinearPower);
plot(BASEQ.Time,BASEQ.RHonClubLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LSonArmLinearPower,'--');
plot(ZTCFQ.Time,ZTCFQ.RSonArmLinearPower,'--');
plot(ZTCFQ.Time,ZTCFQ.LEonForearmLinearPower,'--');
plot(ZTCFQ.Time,ZTCFQ.REonForearmLinearPower,'--');
plot(ZTCFQ.Time,ZTCFQ.LHonClubLinearPower,'--');
plot(ZTCFQ.Time,ZTCFQ.RHonClubLinearPower,'--');
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power - BASE','RS Linear Power - BASE','LE Linear Power - BASE','RE Linear Power - BASE','LH Linear Power - BASE','RH Linear Power - BASE','LS Linear Power - ZTCF','RS Linear Power - ZTCF','LE Linear Power - ZTCF','RE Linear Power - ZTCF','LH Linear Power - ZTCF','RH Linear Power - ZTCF');
legend('Location','southeast');
%Add a Title
title('Linear Power on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Linear Power on Distal');
pause(PauseTime);
%Close Figure
close(708);

%% ====== End of SCRIPT_708_3D_PLOT_Comparison_LinearPower.m ======

%% ====== Start of SCRIPT_709_3D_PLOT_Comparison_AngularPower.m ======
figure(709);
hold on;
plot(BASEQ.Time,BASEQ.LSonArmAngularPower);
plot(BASEQ.Time,BASEQ.RSonArmAngularPower);
plot(BASEQ.Time,BASEQ.LEonForearmAngularPower);
plot(BASEQ.Time,BASEQ.REonForearmAngularPower);
plot(BASEQ.Time,BASEQ.LHonClubAngularPower);
plot(BASEQ.Time,BASEQ.RHonClubAngularPower);
plot(ZTCFQ.Time,ZTCFQ.LSonArmAngularPower,'--');
plot(ZTCFQ.Time,ZTCFQ.RSonArmAngularPower,'--');
plot(ZTCFQ.Time,ZTCFQ.LEonForearmAngularPower,'--');
plot(ZTCFQ.Time,ZTCFQ.REonForearmAngularPower,'--');
plot(ZTCFQ.Time,ZTCFQ.LHonClubAngularPower,'--');
plot(ZTCFQ.Time,ZTCFQ.RHonClubAngularPower,'--');
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Power - BASE','RS Angular Power - BASE','LE Angular Power - BASE','RE Angular Power - BASE','LH Angular Power - BASE','RH Angular Power - BASE','LS Angular Power - ZTCF','RS Angular Power - ZTCF','LE Angular Power - ZTCF','RE Angular Power - ZTCF','LH Angular Power - ZTCF','RH Angular Power - ZTCF');
legend('Location','southeast');
%Add a Title
title('Angular Power on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Angular Power on Distal');
pause(PauseTime);
%Close Figure
close(709);

%% ====== End of SCRIPT_709_3D_PLOT_Comparison_AngularPower.m ======

%% ====== Start of SCRIPT_710_3D_PLOT_Comparison_TotalPower.m ======
figure(710);
hold on;
plot(BASEQ.Time,BASEQ.TotalLSPower);
plot(BASEQ.Time,BASEQ.TotalRSPower);
plot(BASEQ.Time,BASEQ.TotalLEPower);
plot(BASEQ.Time,BASEQ.TotalREPower);
plot(BASEQ.Time,BASEQ.TotalLHPower);
plot(BASEQ.Time,BASEQ.TotalRHPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLSPower,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalRSPower,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalLEPower,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalREPower,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalLHPower,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalRHPower,'--');
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total Power - BASE','RS Total Power - BASE','LE Total Power - BASE','RE Total Power - BASE','LH Total Power - BASE','RH Total Power - BASE','LS Total Power - ZTCF','RS Total Power - ZTCF','LE Total Power - ZTCF','RE Total Power - ZTCF','LH Total Power - ZTCF','RH Total Power - ZTCF');
legend('Location','southeast');
%Add a Title
title('Total Power on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total Power on Distal');
pause(PauseTime);
%Close Figure
close(710);

%% ====== End of SCRIPT_710_3D_PLOT_Comparison_TotalPower.m ======

%% ====== Start of SCRIPT_711_3D_PLOT_Comparison_LinearWorkClubOnly.m ======
figure(711);
hold on;
plot(BASEQ.Time,BASEQ.LHLinearWorkonClub);
plot(BASEQ.Time,BASEQ.RHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.LHLinearWorkonClub,'--');
plot(ZTCFQ.Time,ZTCFQ.RHLinearWorkonClub,'--');
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work - BASE','RH Linear Work - BASE','LH Linear Work - ZTCF','RH Linear Work - ZTCF');
legend('Location','southeast');
%Add a Title
title('Linear Work on Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Linear Work on Club');
pause(PauseTime);
%Close Figure
close(711);

%% ====== End of SCRIPT_711_3D_PLOT_Comparison_LinearWorkClubOnly.m ======

%% ====== Start of SCRIPT_712_3D_PLOT_Comparison_AngularWorkClubOnly.m ======
figure(712);
hold on;
plot(BASEQ.Time,BASEQ.LHAngularWorkonClub);
plot(BASEQ.Time,BASEQ.RHAngularWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.LHAngularWorkonClub,'--');
plot(ZTCFQ.Time,ZTCFQ.RHAngularWorkonClub,'--');
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Angular Work - BASE','RH Angular Work - BASE','LH Angular Work - ZTCF','RH Angular Work - ZTCF');
legend('Location','southeast');
%Add a Title
title('Angular Work on Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Angular Work on Club');
pause(PauseTime);
%Close Figure
close(712);

%% ====== End of SCRIPT_712_3D_PLOT_Comparison_AngularWorkClubOnly.m ======

%% ====== Start of SCRIPT_713_3D_PLOT_Comparison_TotalWorkClubOnly.m ======
figure(713);
hold on;
plot(BASEQ.Time,BASEQ.TotalLHWork);
plot(BASEQ.Time,BASEQ.TotalRHWork);
plot(ZTCFQ.Time,ZTCFQ.TotalLHWork,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalRHWork,'--');
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Total Work - BASE','RH Total Work - BASE','LH Total Work - ZTCF','RH Total Work - ZTCF');
legend('Location','southeast');
%Add a Title
title('Total Work Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total Work on Club');
pause(PauseTime);
%Close Figure
close(713);

%% ====== End of SCRIPT_713_3D_PLOT_Comparison_TotalWorkClubOnly.m ======

%% ====== Start of SCRIPT_714_3D_PLOT_Comparison_LinearPowerClubOnly.m ======
figure(714);
hold on;
plot(BASEQ.Time,BASEQ.LHonClubLinearPower);
plot(BASEQ.Time,BASEQ.RHonClubLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LHonClubLinearPower,'--');
plot(ZTCFQ.Time,ZTCFQ.RHonClubLinearPower,'--');
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Power - BASE','RH Linear Power - BASE','LH Linear Power - ZTCF','RH Linear Power - ZTCF');
legend('Location','southeast');
%Add a Title
title('Linear Power on Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Linear Power on Club');
pause(PauseTime);
%Close Figure
close(714);

%% ====== End of SCRIPT_714_3D_PLOT_Comparison_LinearPowerClubOnly.m ======

%% ====== Start of SCRIPT_715_3D_PLOT_Comparison_AngularPowerClubOnly.m ======
figure(715);
hold on;
plot(BASEQ.Time,BASEQ.LHonClubAngularPower);
plot(BASEQ.Time,BASEQ.RHonClubAngularPower);
plot(ZTCFQ.Time,ZTCFQ.LHonClubAngularPower,'--');
plot(ZTCFQ.Time,ZTCFQ.RHonClubAngularPower,'--');
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Angular Power - BASE','RH Angular Power - BASE','LH Angular Power - ZTCF','RH Angular Power - ZTCF');
legend('Location','southeast');
%Add a Title
title('Angular Power on Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Angular Power on Club');
pause(PauseTime);
%Close Figure
close(715);

%% ====== End of SCRIPT_715_3D_PLOT_Comparison_AngularPowerClubOnly.m ======

%% ====== Start of SCRIPT_716_3D_PLOT_Comparison_TotalPowerClubOnly.m ======
figure(716);
hold on;
plot(BASEQ.Time,BASEQ.TotalLHPower);
plot(BASEQ.Time,BASEQ.TotalRHPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLHPower,'--');
plot(ZTCFQ.Time,ZTCFQ.TotalRHPower,'--');
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Total Power - BASE','RH Total Power - BASE','LH Total Power - ZTCF','RH Total Power - ZTCF');
legend('Location','southeast');
%Add a Title
title('Total Power on Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total Power on Club');
pause(PauseTime);
%Close Figure
close(716);

%% ====== End of SCRIPT_716_3D_PLOT_Comparison_TotalPowerClubOnly.m ======

%% ====== Start of SCRIPT_726_3D_PLOT_Comparison_ZTCFFractionalWork.m ======
figure(726);
hold on;
plot(BASEQ.Time,BASEQ.ZTCFQLSFractionalWork);
plot(BASEQ.Time,BASEQ.ZTCFQRSFractionalWork);
plot(BASEQ.Time,BASEQ.ZTCFQLEFractionalWork);
plot(BASEQ.Time,BASEQ.ZTCFQREFractionalWork);
plot(BASEQ.Time,BASEQ.ZTCFQLHFractionalWork);
plot(BASEQ.Time,BASEQ.ZTCFQRHFractionalWork);
ylim([-5 5]);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total ZTCF Fractional Work','RS Total ZTCF Fractional Work','LE Total ZTCF Fractional Work','RE Total ZTCF Fractional Work','LH Total ZTCF Fractional Work','RH Total ZTCF Fractional Work');
legend('Location','southeast');
%Add a Title
title('Total ZTCF Fractional Work on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total ZTCF Fractional Work');
pause(PauseTime);
%Close Figure
close(726);

%% ====== End of SCRIPT_726_3D_PLOT_Comparison_ZTCFFractionalWork.m ======

%% ====== Start of SCRIPT_727_3D_PLOT_Comparison_DELTAFractionalWork.m ======
figure(727);
hold on;
plot(BASEQ.Time,BASEQ.DELTAQLSFractionalWork);
plot(BASEQ.Time,BASEQ.DELTAQRSFractionalWork);
plot(BASEQ.Time,BASEQ.DELTAQLEFractionalWork);
plot(BASEQ.Time,BASEQ.DELTAQREFractionalWork);
plot(BASEQ.Time,BASEQ.DELTAQLHFractionalWork);
plot(BASEQ.Time,BASEQ.DELTAQRHFractionalWork);
ylim([-5 5]);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total DELTA Fractional Work','RS Total DELTA Fractional Work','LE Total DELTA Fractional Work','RE Total DELTA Fractional Work','LH Total DELTA Fractional Work','RH Total DELTA Fractional Work');
legend('Location','southeast');
%Add a Title
title('Total DELTA Fractional Work on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total DELTA Fractional Work');
pause(PauseTime);
%Close Figure
close(727);

%% ====== End of SCRIPT_727_3D_PLOT_Comparison_DELTAFractionalWork.m ======

%% ====== Start of SCRIPT_728_3D_PLOT_Comparison_ZTCFFractionalPower.m ======
figure(728);
hold on;
plot(BASEQ.Time,BASEQ.ZTCFQLSFractionalPower);
plot(BASEQ.Time,BASEQ.ZTCFQRSFractionalPower);
plot(BASEQ.Time,BASEQ.ZTCFQLEFractionalPower);
plot(BASEQ.Time,BASEQ.ZTCFQREFractionalPower);
plot(BASEQ.Time,BASEQ.ZTCFQLHFractionalPower);
plot(BASEQ.Time,BASEQ.ZTCFQRHFractionalPower);
ylim([-5 5]);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total ZTCF Fractional Power','RS Total ZTCF Fractional Power','LE Total ZTCF Fractional Power','RE Total ZTCF Fractional Power','LW Total ZTCF Fractional Power','RH Total ZTCF Fractional Power');
legend('Location','southeast');
%Add a Title
title('Total ZTCF Fractional Power on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total ZTCF Fractional Power');
pause(PauseTime);
%Close Figure
close(728);

%% ====== End of SCRIPT_728_3D_PLOT_Comparison_ZTCFFractionalPower.m ======

%% ====== Start of SCRIPT_729_3D_PLOT_Comparison_DeltaFractionalPower.m ======
figure(729);
hold on;
plot(BASEQ.Time,BASEQ.DELTAQLSFractionalPower);
plot(BASEQ.Time,BASEQ.DELTAQRSFractionalPower);
plot(BASEQ.Time,BASEQ.DELTAQLEFractionalPower);
plot(BASEQ.Time,BASEQ.DELTAQREFractionalPower);
plot(BASEQ.Time,BASEQ.DELTAQLHFractionalPower);
plot(BASEQ.Time,BASEQ.DELTAQRHFractionalPower);
ylim([-5 5]);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total DELTA Fractional Power','RS Total DELTA Fractional Power','LE Total DELTA Fractional Power','RE Total DELTA Fractional Power','LH Total DELTA Fractional Power','RH Total DELTA Fractional Power');
legend('Location','southeast');
%Add a Title
title('Total DELTA Fractional Power on Distal Segment');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Total DELTA Fractional Power');
pause(PauseTime);
%Close Figure
close(729);

%% ====== End of SCRIPT_729_3D_PLOT_Comparison_DeltaFractionalPower.m ======

%% ====== Start of SCRIPT_748_3D_PLOT_Comparison_LocalHandForces.m ======
figure(748);
hold on;
plot(BASEQ.Time(:,1),BASEQ.LHonClubForceLocal(:,1),'LineWidth',3);
plot(BASEQ.Time(:,1),BASEQ.LHonClubForceLocal(:,2),'LineWidth',3);
plot(BASEQ.Time(:,1),BASEQ.LHonClubForceLocal(:,3),'LineWidth',3);
plot(BASEQ.Time(:,1),BASEQ.RHonClubForceLocal(:,1),'LineWidth',3);
plot(BASEQ.Time(:,1),BASEQ.RHonClubForceLocal(:,2),'LineWidth',3);
plot(BASEQ.Time(:,1),BASEQ.RHonClubForceLocal(:,3),'LineWidth',3);
plot(ZTCFQ.Time(:,1),ZTCFQ.LHonClubForceLocal(:,1),'LineWidth',3);
plot(ZTCFQ.Time(:,1),ZTCFQ.LHonClubForceLocal(:,2),'LineWidth',3);
plot(ZTCFQ.Time(:,1),ZTCFQ.LHonClubForceLocal(:,3),'LineWidth',3);
plot(ZTCFQ.Time(:,1),ZTCFQ.RHonClubForceLocal(:,1),'LineWidth',3);
plot(ZTCFQ.Time(:,1),ZTCFQ.RHonClubForceLocal(:,2),'LineWidth',3);
plot(ZTCFQ.Time(:,1),ZTCFQ.RHonClubForceLocal(:,3),'LineWidth',3);
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('BASE Left Wrist X','BASE Left Wrist Y','BASE Left Wrist Z',...
'BASE Right Wrist X','BASE Right Wrist Y','BASE Right Wrist Z',...
'ZTCF Left Wrist X','ZTCF Left Wrist Y','ZTCF Left Wrist Z',...
'ZTCF Right Wrist X','ZTCF Right Wrist Y','ZTCF Right Wrist Z');
legend('Location','southeast');
%Add a Title
title('Local Hand Forces on Club');
subtitle('COMPARISON');
%Save Figure
savefig('Comparison Charts/COMPARISON_PLOT - Local Hand Forces');
pause(PauseTime);
%Close Figure
close(748);

%% ====== End of SCRIPT_748_3D_PLOT_Comparison_LocalHandForces.m ======

end

%%% END FILE: Plotting Scripts\PLOT_Comparison_Plots.m %%%

%%% START FILE: Plotting Scripts\PLOT_DELTAQuiver.m %%%
function PLOT_DELTAQuiver(BASEQ, DELTAQ, ZTCFQ)
%PLOT_DELTAQuiver - Replicates all quiver plots from MASTER_SCRIPT_DeltaCharts_3D.m

% === Plot 1: Net Force and Equivalent Couple ===
figure(1);
P = [ZTCFQ.MPx, ZTCFQ.MPy, ZTCFQ.MPz];
F = DELTAQ.TotalHandForceGlobal;
C = DELTAQ.EquivalentMidpointCoupleGlobal;
overlayQuiverForces({P, P}, {F, C}, 'Tags', {'Net Force', 'Equivalent MP Couple'}, 'Colors', {[0 1 0], [0.8 0.2 0]}, 'Title', 'Net Force & Equivalent Couple');
savefig('Delta Quiver Plots/DELTA_Quiver Plot - Net Force and Equivalent MP Couple');

% === Plot 2: Net Force ===
figure(2);
overlayQuiverForces({P}, {F}, 'Tags', {'Net Force'}, 'Colors', {[0 1 0]}, 'Title', 'Net Force');
savefig('Delta Quiver Plots/DELTA_Quiver Plot - Net Force');

% === Plot 3: Hand Forces ===
figure(3);
PL = [ZTCFQ.LHx, ZTCFQ.LHy, ZTCFQ.LHz];
VL = DELTAQ.LHonClubFGlobal;
PR = [ZTCFQ.RHx, ZTCFQ.RHy, ZTCFQ.RHz];
VR = DELTAQ.RHonClubFGlobal;
overlayQuiverForces({PL, PR, P}, {VL, VR, F}, 'Tags', {'LH Force', 'RH Force', 'Net Force'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Forces');
savefig('Delta Quiver Plots/DELTA_Quiver Plot - Hand Forces');

% === Plot 4: Hand Torques ===
figure(4);
TL = DELTAQ.LHonClubTGlobal;
TR = DELTAQ.RHonClubTGlobal;
TNet = DELTAQ.TotalHandTorqueGlobal;
overlayQuiverForces({PL, PR, P}, {TL, TR, TNet}, 'Tags', {'LH Torque', 'RH Torque', 'Net Torque'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Torques');
savefig('Delta Quiver Plots/DELTA_Quiver Plot - Hand Torques');

% === Plot 5: All Torques and MOFs ===
figure(5);
MOFL = DELTAQ.LHMOFonClubGlobal;
MOFR = DELTAQ.RHMOFonClubGlobal;
MOFTotal = DELTAQ.MPMOFonClubGlobal;
overlayQuiverForces({PL, PR, P, PL, PR, P}, {MOFL, MOFR, MOFTotal, TL, TR, TNet}, 'Tags', {'LH MOF','RH MOF','Total MOF','LH Torque','RH Torque','Net Torque'}, 'Colors', {[0 0.5 0],[0.5 0 0],[0 0 0.5],[0 0 1],[1 0 0],[0 1 0]}, 'Title', 'All Torques and Moments');
savefig('Delta Quiver Plots/DELTA_Quiver Plot - Torques and Moments');

% === Plot 6: LHRH MOFs Only ===
figure(6);
overlayQuiverForces({PL, PR}, {MOFL, MOFR}, 'Tags', {'LH MOF','RH MOF'}, 'Colors', {[0 0.5 0],[0.5 0 0]}, 'Title', 'LHRH Moments of Force');
savefig('Delta Quiver Plots/DELTA_Quiver Plot - LHRH Moments of Force');

% Additional limb-specific MOFs and impulse plots will follow this structure...

end

%%% END FILE: Plotting Scripts\PLOT_DELTAQuiver.m %%%

%%% START FILE: Plotting Scripts\PLOT_DELTA_Plots.m %%%
function PLOT_DELTA_Plots()
%%% ====== Start of SCRIPT_501_3D_PLOT_DELTA_AngularWork.m ======
figure(501);
hold on;
plot(DELTAQ.Time,DELTAQ.LSAngularWorkonArm);
plot(DELTAQ.Time,DELTAQ.RSAngularWorkonArm);
plot(DELTAQ.Time,DELTAQ.LEAngularWorkonForearm);
plot(DELTAQ.Time,DELTAQ.REAngularWorkonForearm);
plot(DELTAQ.Time,DELTAQ.LHAngularWorkonClub);
plot(DELTAQ.Time,DELTAQ.RHAngularWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Work','RS Angular Work','LE Angular Work','RE Angular Work','LH Angular Work','RH Angular Work');
legend('Location','southeast');
%Add a Title
title('Angular Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Angular Work');
pause(PauseTime);
%Close Figure
close(501);

%% ====== End of SCRIPT_501_3D_PLOT_DELTA_AngularWork.m ======

%% ====== Start of SCRIPT_502_3D_PLOT_DELTA_AngularPower.m ======
figure(502);
hold on;
plot(ZTCFQ.Time,DELTAQ.LSonArmAngularPower);
plot(ZTCFQ.Time,DELTAQ.RSonArmAngularPower);
plot(ZTCFQ.Time,DELTAQ.LEonForearmAngularPower);
plot(ZTCFQ.Time,DELTAQ.REonForearmAngularPower);
plot(ZTCFQ.Time,DELTAQ.LHonClubAngularPower);
plot(ZTCFQ.Time,DELTAQ.RHonClubAngularPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Power','RS Angular Power','LE Angular Power','RE Angular Power','LH Angular Power','RH Angular Power');
legend('Location','southeast');
%Add a Title
title('Angular Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Angular Power');
pause(PauseTime);
%Close Figure
close(502);

%% ====== End of SCRIPT_502_3D_PLOT_DELTA_AngularPower.m ======

%% ====== Start of SCRIPT_503_3D_PLOT_DELTA_LinearPower.m ======
figure(503);
hold on;
plot(ZTCFQ.Time,DELTAQ.LSonArmLinearPower);
plot(ZTCFQ.Time,DELTAQ.RSonArmLinearPower);
plot(ZTCFQ.Time,DELTAQ.LEonForearmLinearPower);
plot(ZTCFQ.Time,DELTAQ.REonForearmLinearPower);
plot(ZTCFQ.Time,DELTAQ.LHonClubLinearPower);
plot(ZTCFQ.Time,DELTAQ.RHonClubLinearPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','RS Linear Power','LE Linear Power','RE Linear Power','LH Linear Power','RH Linear Power');
legend('Location','southeast');
%Add a Title
title('Linear Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Linear Power');
pause(PauseTime);
%Close Figure
close(503);

%% ====== End of SCRIPT_503_3D_PLOT_DELTA_LinearPower.m ======

%% ====== Start of SCRIPT_504_3D_PLOT_DELTA_LinearWork.m ======
figure(504);
hold on;
plot(ZTCFQ.Time,DELTAQ.LSLinearWorkonArm);
plot(ZTCFQ.Time,DELTAQ.RSLinearWorkonArm);
plot(ZTCFQ.Time,DELTAQ.LELinearWorkonForearm);
plot(ZTCFQ.Time,DELTAQ.RELinearWorkonForearm);
plot(ZTCFQ.Time,DELTAQ.LHLinearWorkonClub);
plot(ZTCFQ.Time,DELTAQ.RHLinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','RS Linear Work','LE Linear Work','RE Linear Work','LH Linear Work','LH Linear Work');
legend('Location','southeast');
%Add a Title
title('Linear Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Linear Work on Distal');
pause(PauseTime);
%Close Figure
close(504);

%% ====== End of SCRIPT_504_3D_PLOT_DELTA_LinearWork.m ======

%% ====== Start of SCRIPT_505_3D_PLOT_DELTA_JointTorqueInputs.m ======
figure(505);
hold on;
plot(DELTAQ.Time,DELTAQ.HipTorqueXInput);
plot(DELTAQ.Time,DELTAQ.HipTorqueYInput);
plot(DELTAQ.Time,DELTAQ.HipTorqueZInput);
plot(DELTAQ.Time,DELTAQ.TranslationForceXInput);
plot(DELTAQ.Time,DELTAQ.TranslationForceYInput);
plot(DELTAQ.Time,DELTAQ.TranslationForceZInput);
plot(DELTAQ.Time,DELTAQ.TorsoTorqueInput);
plot(DELTAQ.Time,DELTAQ.SpineTorqueXInput);
plot(DELTAQ.Time,DELTAQ.SpineTorqueYInput);
plot(DELTAQ.Time,DELTAQ.LScapTorqueXInput);
plot(DELTAQ.Time,DELTAQ.LScapTorqueYInput);
plot(DELTAQ.Time,DELTAQ.RScapTorqueXInput);
plot(DELTAQ.Time,DELTAQ.RScapTorqueYInput);
plot(DELTAQ.Time,DELTAQ.LSTorqueXInput);
plot(DELTAQ.Time,DELTAQ.LSTorqueYInput);
plot(DELTAQ.Time,DELTAQ.LSTorqueZInput);
plot(DELTAQ.Time,DELTAQ.RSTorqueXInput);
plot(DELTAQ.Time,DELTAQ.RSTorqueYInput);
plot(DELTAQ.Time,DELTAQ.RSTorqueZInput);
plot(DELTAQ.Time,DELTAQ.LETorqueInput);
plot(DELTAQ.Time,DELTAQ.RETorqueInput);
plot(DELTAQ.Time,DELTAQ.LFTorqueInput);
plot(DELTAQ.Time,DELTAQ.RFTorqueInput);
plot(DELTAQ.Time,DELTAQ.LWTorqueXInput);
plot(DELTAQ.Time,DELTAQ.LWTorqueYInput);
plot(DELTAQ.Time,DELTAQ.RWTorqueXInput);
plot(DELTAQ.Time,DELTAQ.RWTorqueYInput);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Torque X','Hip Torque Y','Hip Torque Z','Translation Force X',...
'Translation Force Y','Translation Force Z','Torso Torque','Spine Torque X',...
'Spine Torque Y','LScap Torque X','Left Scap Torque Y','RScap Torque X',...
'RScapTorqueY','LS Torque X','LS Torque Y','LS Torque Z','RS Torque X','RS Torque Y',...
'RS Torque Z','LE Torque','RE Torque','LF Torque','RF Torque','LW Torque X',...
'LW Torque Y','RW Torque X','RW Torque Y');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
%subtitle('Left Hand, Right Hand, Total');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(505);

%% ====== End of SCRIPT_505_3D_PLOT_DELTA_JointTorqueInputs.m ======

%% ====== Start of SCRIPT_506_3D_PLOT_DELTA_TotalWork.m ======
figure(506);
hold on;
plot(DELTAQ.Time,DELTAQ.TotalLSWork);
plot(DELTAQ.Time,DELTAQ.TotalRSWork);
plot(DELTAQ.Time,DELTAQ.TotalLEWork);
plot(DELTAQ.Time,DELTAQ.TotalREWork);
plot(DELTAQ.Time,DELTAQ.TotalLHWork);
plot(DELTAQ.Time,DELTAQ.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total Work','RS Total Work','LE Total Work','RE Total Work','LH Total Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Total Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Total Work');
pause(PauseTime);
%Close Figure
close(506);

%% ====== End of SCRIPT_506_3D_PLOT_DELTA_TotalWork.m ======

%% ====== Start of SCRIPT_507_3D_PLOT_DELTA_TotalPower.m ======
figure(507);
hold on;
plot(DELTAQ.Time,DELTAQ.TotalLSPower);
plot(DELTAQ.Time,DELTAQ.TotalRSPower);
plot(DELTAQ.Time,DELTAQ.TotalLEPower);
plot(DELTAQ.Time,DELTAQ.TotalREPower);
plot(DELTAQ.Time,DELTAQ.TotalLHPower);
plot(DELTAQ.Time,DELTAQ.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total Power','RS Total Power','LE Total Power','RE Total Power','LH Total Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Total Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Total Power');
pause(PauseTime);
%Close Figure
close(507);

%% ====== End of SCRIPT_507_3D_PLOT_DELTA_TotalPower.m ======

%% ====== Start of SCRIPT_522_3D_PLOT_DELTA_ForceAlongHandPath.m ======
figure(522);
plot(ZTCFQ.Time,DELTAQ.ForceAlongHandPath);
xlabel('Time (s)');
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Force Along Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Force Along Hand Path');
pause(PauseTime);
%Close Figure
close(522);

%% ====== End of SCRIPT_522_3D_PLOT_DELTA_ForceAlongHandPath.m ======

%% ====== Start of SCRIPT_525_3D_PLOT_DELTA_LHRHForceAlongHandPath.m ======
figure(525);
hold on;
plot(ZTCFQ.Time,DELTAQ.LHForceAlongHandPath);
plot(ZTCFQ.Time,DELTAQ.RHForceAlongHandPath);
plot(ZTCFQ.Time,DELTAQ.ForceAlongHandPath);
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('LH Force on Left Hand Path','RH Force on Right Hand Path','Net Force Along MP Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('DELTA');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Force Along Hand Path - LH RH Total');
pause(PauseTime);
%Close Figure
close(525);

%% ====== End of SCRIPT_525_3D_PLOT_DELTA_LHRHForceAlongHandPath.m ======

%% ====== Start of SCRIPT_526_3D_PLOT_DELTA_LinearImpulse.m ======
figure(526);
plot(ZTCFQ.Time,DELTAQ.LinearImpulseonClub);
xlabel('Time (s)');
ylabel('Impulse (Ns)');
grid 'on';
%Add Legend to Plot
legend('Linear Impulse');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Linear Impulse');
pause(PauseTime);
%Close Figure
close(526);

%% ====== End of SCRIPT_526_3D_PLOT_DELTA_LinearImpulse.m ======

%% ====== Start of SCRIPT_527_3D_PLOT_DELTA_LinearWork.m ======
figure(527);
hold on;
plot(ZTCFQ.Time,DELTAQ.LHLinearWorkonClub);
plot(ZTCFQ.Time,DELTAQ.RHLinearWorkonClub);
plot(ZTCFQ.Time,DELTAQ.LinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','RH Linear Work','Net Force Linear Work (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Work');
subtitle('DELTA');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Linear Work');
pause(PauseTime);
%Close Figure
close(527);

%% ====== End of SCRIPT_527_3D_PLOT_DELTA_LinearWork.m ======

%% ====== Start of SCRIPT_528_3D_PLOT_DELTA_LinearImpulse.m ======
figure(528);
hold on;
plot(ZTCFQ.Time,DELTAQ.LHLinearImpulseonClub);
plot(ZTCFQ.Time,DELTAQ.RHLinearImpulseonClub);
plot(ZTCFQ.Time,DELTAQ.LinearImpulseonClub);
ylabel('Linear Impulse (kgm/s)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Impulse','RH Linear Impulse','Net Force Linear Impulse (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('DELTA');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Linear Impulse LH,RH,Total');
pause(PauseTime);
%Close Figure
close(528);

%% ====== End of SCRIPT_528_3D_PLOT_DELTA_LinearImpulse.m ======

%% ====== Start of SCRIPT_529_3D_PLOT_DELTA_EquivalentCoupleandMOF.m ======
figure(529);
hold on;
EQMPLOCAL=DELTAQ.EquivalentMidpointCoupleLocal(:,3);
MPMOFLOCAL=DELTAQ.MPMOFonClubLocal(:,3);
SUMOFMOMENTSLOCAL=DELTAQ.SumofMomentsonClubLocal(:,3);
plot(ZTCFQ.Time,EQMPLOCAL);
plot(ZTCFQ.Time,MPMOFLOCAL);
plot(ZTCFQ.Time,SUMOFMOMENTSLOCAL);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Equivalent Midpoint Couple','Total Force on Midpoint MOF','Sum of Moments');
legend('Location','southeast');
%Add a Title
title('Equivalent Couple, Moment of Force, Sum of Moments');
subtitle('DELTA - Grip Reference Frame');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Equivalent Couple and MOF');
pause(PauseTime);
%Close Figure
close(529);

%% ====== End of SCRIPT_529_3D_PLOT_DELTA_EquivalentCoupleandMOF.m ======

%% ====== Start of SCRIPT_530_3D_PLOT_DELTA_LSWork.m ======
figure(530);
hold on;
plot(DELTAQ.Time,DELTAQ.LSLinearWorkonArm);
plot(DELTAQ.Time,DELTAQ.LSAngularWorkonArm);
plot(DELTAQ.Time,DELTAQ.TotalLSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','LS Angular Work','LS Total Work');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Left Shoulder Work');
pause(PauseTime);
%Close Figure
close(530);

%% ====== End of SCRIPT_530_3D_PLOT_DELTA_LSWork.m ======

%% ====== Start of SCRIPT_531_3D_PLOT_DELTA_LSPower.m ======
figure(531);
hold on;
plot(DELTAQ.Time,DELTAQ.LSonArmLinearPower);
plot(DELTAQ.Time,DELTAQ.LSonArmAngularPower);
plot(DELTAQ.Time,DELTAQ.TotalLSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','LS Angular Power','LS Total Power');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Left Shoulder Power');
pause(PauseTime);
%Close Figure
close(531);

%% ====== End of SCRIPT_531_3D_PLOT_DELTA_LSPower.m ======

%% ====== Start of SCRIPT_532_3D_PLOT_DELTA_RSWork.m ======
figure(532);
hold on;
plot(DELTAQ.Time,DELTAQ.RSLinearWorkonArm);
plot(DELTAQ.Time,DELTAQ.RSAngularWorkonArm);
plot(DELTAQ.Time,DELTAQ.TotalRSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Work','RS Angular Work','RS Total Work');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Right Shoulder Work');
pause(PauseTime);
%Close Figure
close(532);

%% ====== End of SCRIPT_532_3D_PLOT_DELTA_RSWork.m ======

%% ====== Start of SCRIPT_533_3D_PLOT_DELTA_RSPower.m ======
figure(533);
hold on;
plot(DELTAQ.Time,DELTAQ.RSonArmLinearPower);
plot(DELTAQ.Time,DELTAQ.RSonArmAngularPower);
plot(DELTAQ.Time,DELTAQ.TotalRSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Power','RS Angular Power','RS Total Power');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Right Shoulder Power');
pause(PauseTime);
%Close Figure
close(533);

%% ====== End of SCRIPT_533_3D_PLOT_DELTA_RSPower.m ======

%% ====== Start of SCRIPT_534_3D_PLOT_DELTA_LEWork.m ======
figure(534);
hold on;
plot(DELTAQ.Time,DELTAQ.LELinearWorkonForearm);
plot(DELTAQ.Time,DELTAQ.LEAngularWorkonForearm);
plot(DELTAQ.Time,DELTAQ.TotalLEWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Work','LE Angular Work','LE Total Work');
legend('Location','southeast');
%Add a Title
title('Left Elbow Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Left Elbow Work');
pause(PauseTime);
%Close Figure
close(534);

%% ====== End of SCRIPT_534_3D_PLOT_DELTA_LEWork.m ======

%% ====== Start of SCRIPT_535_3D_PLOT_DELTA_LEPower.m ======
figure(535);
hold on;
plot(DELTAQ.Time,DELTAQ.LEonForearmLinearPower);
plot(DELTAQ.Time,DELTAQ.LEonForearmAngularPower);
plot(DELTAQ.Time,DELTAQ.TotalLEPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Power','LE Angular Power','LE Total Power');
legend('Location','southeast');
%Add a Title
title('Left Elbow Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Left Elbow Power');
pause(PauseTime);
%Close Figure
close(535);

%% ====== End of SCRIPT_535_3D_PLOT_DELTA_LEPower.m ======

%% ====== Start of SCRIPT_536_3D_PLOT_DELTA_REWork.m ======
figure(536);
hold on;
plot(DELTAQ.Time,DELTAQ.RELinearWorkonForearm);
plot(DELTAQ.Time,DELTAQ.REAngularWorkonForearm);
plot(DELTAQ.Time,DELTAQ.TotalREWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Work','RE Angular Work','RE Total Work');
legend('Location','southeast');
%Add a Title
title('Right Elbow Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Right Elbow Work');
pause(PauseTime);
%Close Figure
close(536);

%% ====== End of SCRIPT_536_3D_PLOT_DELTA_REWork.m ======

%% ====== Start of SCRIPT_537_3D_PLOT_DELTA_REPower.m ======
figure(537);
hold on;
plot(DELTAQ.Time,DELTAQ.REonForearmLinearPower);
plot(DELTAQ.Time,DELTAQ.REonForearmAngularPower);
plot(DELTAQ.Time,DELTAQ.TotalREPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Power','RE Angular Power','RE Total Power');
legend('Location','southeast');
%Add a Title
title('Right Elbow Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Right Elbow Power');
pause(PauseTime);
%Close Figure
close(537);

%% ====== End of SCRIPT_537_3D_PLOT_DELTA_REPower.m ======

%% ====== Start of SCRIPT_538_3D_PLOT_DELTA_LHWork.m ======
figure(538);
hold on;
plot(DELTAQ.Time,DELTAQ.LHLinearWorkonClub);
plot(DELTAQ.Time,DELTAQ.LHAngularWorkonClub);
plot(DELTAQ.Time,DELTAQ.TotalLHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','LH Angular Work','LH Total Work');
legend('Location','southeast');
%Add a Title
title('Left Wrist Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Left Wrist Work');
pause(PauseTime);
%Close Figure
close(538);

%% ====== End of SCRIPT_538_3D_PLOT_DELTA_LHWork.m ======

%% ====== Start of SCRIPT_539_3D_PLOT_DELTA_LHPower.m ======
figure(539);
hold on;
plot(DELTAQ.Time,DELTAQ.LHonClubLinearPower);
plot(DELTAQ.Time,DELTAQ.LHonClubAngularPower);
plot(DELTAQ.Time,DELTAQ.TotalLHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Power','LH Angular Power','LH Total Power');
legend('Location','southeast');
%Add a Title
title('Left Wrist Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Left Wrist Power');
pause(PauseTime);
%Close Figure
close(539);

%% ====== End of SCRIPT_539_3D_PLOT_DELTA_LHPower.m ======

%% ====== Start of SCRIPT_540_3D_PLOT_DELTA_RHWork.m ======
figure(540);
hold on;
plot(DELTAQ.Time,DELTAQ.RHLinearWorkonClub);
plot(DELTAQ.Time,DELTAQ.RHAngularWorkonClub);
plot(DELTAQ.Time,DELTAQ.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Work','RH Angular Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Right Wrist Work on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Right Wrist Work');
pause(PauseTime);
%Close Figure
close(540);

%% ====== End of SCRIPT_540_3D_PLOT_DELTA_RHWork.m ======

%% ====== Start of SCRIPT_541_3D_PLOT_DELTA_RHPower.m ======
figure(541);
hold on;
plot(DELTAQ.Time,DELTAQ.RHonClubLinearPower);
plot(DELTAQ.Time,DELTAQ.RHonClubAngularPower);
plot(DELTAQ.Time,DELTAQ.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Power','RH Angular Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Right Wrist Power on Distal Segment');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Right Wrist Power');
pause(PauseTime);
%Close Figure
close(541);

%% ====== End of SCRIPT_541_3D_PLOT_DELTA_RHPower.m ======

%% ====== Start of SCRIPT_548_3D_PLOT_DELTA_LocalHandForces.m ======
figure(548);
hold on;
plot(DELTAQ.Time(:,1),DELTAQ.LHonClubForceLocal(:,1));
plot(DELTAQ.Time(:,1),DELTAQ.LHonClubForceLocal(:,2));
plot(DELTAQ.Time(:,1),DELTAQ.LHonClubForceLocal(:,3));
plot(DELTAQ.Time(:,1),DELTAQ.RHonClubForceLocal(:,1));
plot(DELTAQ.Time(:,1),DELTAQ.RHonClubForceLocal(:,2));
plot(DELTAQ.Time(:,1),DELTAQ.RHonClubForceLocal(:,3));
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Left Hand X','Left Hand Y','Left Hand Z','Right Hand X','Right Hand Y','Right Hand Z');
legend('Location','southeast');
%Add a Title
title('Local Hand Forces on Club');
subtitle('DELTA');
%Save Figure
savefig('Delta Charts/DELTA_Plot - Local Hand Forces');
pause(PauseTime);
%Close Figure
close(548);

%% ====== End of SCRIPT_548_3D_PLOT_DELTA_LocalHandForces.m ======

%% ====== Start of SCRIPT_550_3D_PLOT_DELTA_TorqueInputvsTorqueOutput.m ======
figure(550);
hold on;
plot(DELTAQ.Time,DELTAQ.HipConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.HipConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.HipConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.TorsoConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.TorsoConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.TorsoConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.SpineConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.SpineConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.SpineConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.LScapConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.LScapConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.LScapConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.RScapConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.RScapConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.RScapConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.LSConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.LSConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.LSConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.RSConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.RSConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.RSConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.LEConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.LEConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.LEConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.REConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.REConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.REConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.LFConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.LFConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.LFConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.RFConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.RFConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.RFConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.LWConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.LWConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.LWConstraintTorqueZ);
plot(DELTAQ.Time,DELTAQ.RWConstraintTorqueX);
plot(DELTAQ.Time,DELTAQ.RWConstraintTorqueY);
plot(DELTAQ.Time,DELTAQ.RWConstraintTorqueZ);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Constraint Torque X','Hip Constraint Torque Y','Hip Constraint Torque Z',...
'Torso Constraint Torque X','Torso Constraint Torque Y','Torso Constraint Torque Z',...
'Spine Constraint Torque X','Spine Constraint Torque Y','Spine Constraint Torque Z',...
'LScap Constraint Torque X','LScap Constraint Torque Y','LScap Constraint Torque Z',...
'RScap Constraint Torque X','RScap Constraint Torque Y','RScap Constraint Torque Z',...
'LS Constraint Torque X','LS Constraint Torque Y','LS Constraint Torque Z',...
'RS Constraint Torque X','RS Constraint Torque Y','RS Constraint Torque Z',...
'LE Constraint Torque X','LE Constraint Torque Y','LE Constraint Torque Z',...
'RE Constraint Torque X','RE Constraint Torque Y','RE Constraint Torque Z',...
'LF Constraint Torque X','LF Constraint Torque Y','LF Constraint Torque Z',...
'RF Constraint Torque X','RF Constraint Torque Y','RF Constraint Torque Z',...
'LW Constraint Torque X','LW Constraint Torque Y','LW Constraint Torque Z',...
'RW Constraint Torque X','RW Constraint Torque Y','RW Constraint Torque Z');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
subtitle('DELTA');
%Save Figure
savefig('DELTA Charts/DELTA_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(550);

%% ====== End of SCRIPT_550_3D_PLOT_DELTA_TorqueInputvsTorqueOutput.m ======

end

%%% END FILE: Plotting Scripts\PLOT_DELTA_Plots.m %%%

%%% START FILE: Plotting Scripts\PLOT_ModelDataQuiver.m %%%
function PLOT_ModelDataQuiver(Data)
%PLOT_ModelDataQuiver - Replicates all quiver plots from MASTER_SCRIPT_3D_DataCharts.m

%% Plot 1: Net Force and Equivalent Couple
figure(1);
P = [Data.MPx, Data.MPy, Data.MPz];
F = Data.TotalHandForceGlobal;
C = Data.EquivalentMidpointCoupleGlobal;
overlayQuiverForces({P, P}, {F, C}, 'Tags', {'Net Force', 'Equivalent MP Couple'}, 'Colors', {[0 1 0], [0.8 0.2 0]}, 'Title', 'Net Force & Equivalent Couple');
savefig('Model Data Quiver Plots/ModelData_Quiver Plot - Net Force and Equivalent MP Couple');

%% Plot 2: Net Force
figure(2);
overlayQuiverForces({P}, {F}, 'Tags', {'Net Force'}, 'Colors', {[0 1 0]}, 'Title', 'Net Force');
savefig('Model Data Quiver Plots/ModelData_Quiver Plot - Net Force');

%% Plot 3: Hand Forces
figure(3);
PL = [Data.LHx, Data.LHy, Data.LHz];
VL = Data.LHonClubFGlobal;
PR = [Data.RHx, Data.RHy, Data.RHz];
VR = Data.RHonClubFGlobal;
overlayQuiverForces({PL, PR, P}, {VL, VR, F}, 'Tags', {'LH Force', 'RH Force', 'Net Force'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Forces');
savefig('Model Data Quiver Plots/ModelData_Quiver Plot - Hand Forces');

%% Plot 4: Hand Torques
figure(4);
TL = Data.LHonClubTGlobal;
TR = Data.RHonClubTGlobal;
TNet = Data.TotalHandTorqueGlobal;
overlayQuiverForces({PL, PR, P}, {TL, TR, TNet}, 'Tags', {'LH Torque', 'RH Torque', 'Net Torque'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Torques');
savefig('Model Data Quiver Plots/ModelData_Quiver Plot - Hand Torques');

%% Plot 5: All Torques and MOFs
figure(5);
MOFL = Data.LHMOFonClubGlobal;
MOFR = Data.RHMOFonClubGlobal;
MOFTotal = Data.MPMOFonClubGlobal;
overlayQuiverForces({PL, PR, P, PL, PR, P}, {MOFL, MOFR, MOFTotal, TL, TR, TNet}, 'Tags', {'LH MOF','RH MOF','Total MOF','LH Torque','RH Torque','Net Torque'}, 'Colors', {[0 0.5 0],[0.5 0 0],[0 0 0.5],[0 0 1],[1 0 0],[0 1 0]}, 'Title', 'All Torques and Moments');
savefig('Model Data Quiver Plots/ModelData_Quiver Plot - Torques and Moments');

%% Plot 6: LHRH MOFs Only
figure(6);
overlayQuiverForces({PL, PR}, {MOFL, MOFR}, 'Tags', {'LH MOF','RH MOF'}, 'Colors', {[0 0.5 0],[0.5 0 0]}, 'Title', 'LHRH Moments of Force');
savefig('Model Data Quiver Plots/ModelData_Quiver Plot - LHRH Moments of Force');

end

%%% END FILE: Plotting Scripts\PLOT_ModelDataQuiver.m %%%

%%% START FILE: Plotting Scripts\PLOT_ModelData_Plots.m %%%
function PLOT__Plots()
%%% ====== Start of SCRIPT_901_3D_PLOT_Data_AngularWork.m ======
figure(901);
hold on;
plot(Data.Time,Data.LSAngularWorkonArm);
plot(Data.Time,Data.RSAngularWorkonArm);
plot(Data.Time,Data.LEAngularWorkonForearm);
plot(Data.Time,Data.REAngularWorkonForearm);
plot(Data.Time,Data.LHAngularWorkonClub);
plot(Data.Time,Data.RHAngularWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Work','RS Angular Work','LE Angular Work','RE Angular Work','LH Angular Work','RH Angular Work');
legend('Location','southeast');
%Add a Title
title('Angular Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Angular Work');
pause(PauseTime);
%Close Figure
close(901);

%% ====== End of SCRIPT_901_3D_PLOT_Data_AngularWork.m ======

%% ====== Start of SCRIPT_902_3D_PLOT_Data_AngularPower.m ======
figure(902);
hold on;
plot(Data.Time,Data.LSonArmAngularPower);
plot(Data.Time,Data.RSonArmAngularPower);
plot(Data.Time,Data.LEonForearmAngularPower);
plot(Data.Time,Data.REonForearmAngularPower);
plot(Data.Time,Data.LHonClubAngularPower);
plot(Data.Time,Data.RHonClubAngularPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Power','RS Angular Power','LE Angular Power','RE Angular Power','LH Angular Power','RH Angular Power');
legend('Location','southeast');
%Add a Title
title('Angular Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Angular Power');
pause(PauseTime);
%Close Figure
close(902);

%% ====== End of SCRIPT_902_3D_PLOT_Data_AngularPower.m ======

%% ====== Start of SCRIPT_903_3D_PLOT_Data_LinearPower.m ======
figure(903);
hold on;
plot(Data.Time,Data.LSonArmLinearPower);
plot(Data.Time,Data.RSonArmLinearPower);
plot(Data.Time,Data.LEonForearmLinearPower);
plot(Data.Time,Data.REonForearmLinearPower);
plot(Data.Time,Data.LHonClubLinearPower);
plot(Data.Time,Data.RHonClubLinearPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','RS Linear Power','LE Linear Power','RE Linear Power','LH Linear Power','RH Linear Power');
legend('Location','southeast');
%Add a Title
title('Linear Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Linear Power');
pause(PauseTime);
%Close Figure
close(903);

%% ====== End of SCRIPT_903_3D_PLOT_Data_LinearPower.m ======

%% ====== Start of SCRIPT_904_3D_PLOT_Data_LinearWork.m ======
figure(904);
hold on;
plot(Data.Time,Data.LSLinearWorkonArm);
plot(Data.Time,Data.RSLinearWorkonArm);
plot(Data.Time,Data.LELinearWorkonForearm);
plot(Data.Time,Data.RELinearWorkonForearm);
plot(Data.Time,Data.LHLinearWorkonClub);
plot(Data.Time,Data.RHLinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','RS Linear Work','LE Linear Work','RE Linear Work','LW Linear Work','RW Linear Work');
legend('Location','southeast');
%Add a Title
title('Linear Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Linear Work on Distal');
pause(PauseTime);
%Close Figure
close(904);

%% ====== End of SCRIPT_904_3D_PLOT_Data_LinearWork.m ======

%% ====== Start of SCRIPT_905_3D_PLOT_Data_JointTorqueInputs.m ======
figure(905);
hold on;
plot(Data.Time,Data.HipTorqueXInput);
plot(Data.Time,Data.HipTorqueYInput);
plot(Data.Time,Data.HipTorqueZInput);
plot(Data.Time,Data.TranslationForceXInput);
plot(Data.Time,Data.TranslationForceYInput);
plot(Data.Time,Data.TranslationForceZInput);
plot(Data.Time,Data.TorsoTorqueInput);
plot(Data.Time,Data.SpineTorqueXInput);
plot(Data.Time,Data.SpineTorqueYInput);
plot(Data.Time,Data.LScapTorqueXInput);
plot(Data.Time,Data.LScapTorqueYInput);
plot(Data.Time,Data.RScapTorqueXInput);
plot(Data.Time,Data.RScapTorqueYInput);
plot(Data.Time,Data.LSTorqueXInput);
plot(Data.Time,Data.LSTorqueYInput);
plot(Data.Time,Data.LSTorqueZInput);
plot(Data.Time,Data.RSTorqueXInput);
plot(Data.Time,Data.RSTorqueYInput);
plot(Data.Time,Data.RSTorqueZInput);
plot(Data.Time,Data.LETorqueInput);
plot(Data.Time,Data.RETorqueInput);
plot(Data.Time,Data.LFTorqueInput);
plot(Data.Time,Data.RFTorqueInput);
plot(Data.Time,Data.LWTorqueXInput);
plot(Data.Time,Data.LWTorqueYInput);
plot(Data.Time,Data.RWTorqueXInput);
plot(Data.Time,Data.RWTorqueYInput);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Torque X','Hip Torque Y','Hip Torque Z','Translation Force X',...
'Translation Force Y','Translation Force Z','Torso Torque','Spine Torque X',...
'Spine Torque Y','LScap Torque X','Left Scap Torque Y','RScap Torque X',...
'RScapTorqueY','LS Torque X','LS Torque Y','LS Torque Z','RS Torque X','RS Torque Y',...
'RS Torque Z','LE Torque','RE Torque','LF Torque','RF Torque','LW Torque X',...
'LW Torque Y','RW Torque X','RW Torque Y');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(905);

%% ====== End of SCRIPT_905_3D_PLOT_Data_JointTorqueInputs.m ======

%% ====== Start of SCRIPT_906_3D_PLOT_Data_TotalWork.m ======
figure(906);
hold on;
plot(Data.Time,Data.TotalLSWork);
plot(Data.Time,Data.TotalRSWork);
plot(Data.Time,Data.TotalLEWork);
plot(Data.Time,Data.TotalREWork);
plot(Data.Time,Data.TotalLHWork);
plot(Data.Time,Data.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total Work','RS Total Work','LE Total Work','RE Total Work','LW Total Work','RW Total Work');
legend('Location','southeast');
%Add a Title
title('Total Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Total Work');
pause(PauseTime);
%Close Figure
close(906);

%% ====== End of SCRIPT_906_3D_PLOT_Data_TotalWork.m ======

%% ====== Start of SCRIPT_907_3D_PLOT_Data_TotalPower.m ======
figure(907);
hold on;
plot(Data.Time,Data.TotalLSPower);
plot(Data.Time,Data.TotalRSPower);
plot(Data.Time,Data.TotalLEPower);
plot(Data.Time,Data.TotalREPower);
plot(Data.Time,Data.TotalLHPower);
plot(Data.Time,Data.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total Power','RS Total Power','LE Total Power','RE Total Power','LH Total Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Total Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Total Power');
pause(PauseTime);
%Close Figure
close(907);

%% ====== End of SCRIPT_907_3D_PLOT_Data_TotalPower.m ======

%% ====== Start of SCRIPT_922_3D_PLOT_Data_ForceAlongHandPath.m ======
figure(922);
plot(Data.Time,Data.ForceAlongHandPath);
xlabel('Time (s)');
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Force Along Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - Force Along Hand Path');
pause(PauseTime);
%Close Figure
close(922);

%% ====== End of SCRIPT_922_3D_PLOT_Data_ForceAlongHandPath.m ======

%% ====== Start of SCRIPT_923_3D_PLOT_Data_CHSandHandSpeed.m ======
figure(923);
hold on;
plot(Data.Time,Data.("CHS (mph)"));
plot(Data.Time,Data.("Hand Speed (mph)"));
xlabel('Time (s)');
ylabel('Speed (mph)');
grid 'on';
%Add Legend to Plot
legend('Clubhead Speed (mph)','Hand Speed (mph)');
legend('Location','southeast');
%Add a Title
title('Clubhead and Hand Speed');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - CHS and Hand Speed');
pause(PauseTime);
%Close Figure
close(923);

%% ====== End of SCRIPT_923_3D_PLOT_Data_CHSandHandSpeed.m ======

%% ====== Start of SCRIPT_925_3D_PLOT_Data_LHRHForceAlongHandPath.m ======
figure(925);
hold on;
plot(Data.Time,Data.LHForceAlongHandPath);
plot(Data.Time,Data.RHForceAlongHandPath);
plot(Data.Time,Data.ForceAlongHandPath);
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('LH Force on Left Hand Path','RH Force on Right Hand Path','Net Force Along MP Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('Data');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - Force Along Hand Path - LH RH Total');
pause(PauseTime);
%Close Figure
close(925);

%% ====== End of SCRIPT_925_3D_PLOT_Data_LHRHForceAlongHandPath.m ======

%% ====== Start of SCRIPT_926_3D_PLOT_Data_LinearImpulse.m ======
figure(926);
plot(Data.Time,Data.LinearImpulseonClub);
xlabel('Time (s)');
ylabel('Impulse (Ns)');
grid 'on';
%Add Legend to Plot
legend('Linear Impulse');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - Linear Impulse');
pause(PauseTime);
%Close Figure
close(926);

%% ====== End of SCRIPT_926_3D_PLOT_Data_LinearImpulse.m ======

%% ====== Start of SCRIPT_927_3D_PLOT_Data_LinearWork.m ======
figure(927);
hold on;
plot(Data.Time,Data.LHLinearWorkonClub);
plot(Data.Time,Data.RHLinearWorkonClub);
plot(Data.Time,Data.LinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','RH Linear Work','Net Force Linear Work (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Work');
subtitle('Data');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - Linear Work');
pause(PauseTime);
%Close Figure
close(927);

%% ====== End of SCRIPT_927_3D_PLOT_Data_LinearWork.m ======

%% ====== Start of SCRIPT_928_3D_PLOT_Data_LinearImpulse.m ======
figure(928);
hold on;
plot(Data.Time,Data.LHLinearImpulseonClub);
plot(Data.Time,Data.RHLinearImpulseonClub);
plot(Data.Time,Data.LinearImpulseonClub);
ylabel('Linear Impulse (kgm/s)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Impulse','RH Linear Impulse','Net Force Linear Impulse (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('Data');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - Linear Impulse LH,RH,Total');
pause(PauseTime);
%Close Figure
close(928);

%% ====== End of SCRIPT_928_3D_PLOT_Data_LinearImpulse.m ======

%% ====== Start of SCRIPT_929_3D_PLOT_Data_EquivalentCoupleandMOF.m ======
figure(929);
hold on;
EQMPLOCAL=Data.EquivalentMidpointCoupleLocal(:,3);
MPMOFLOCAL=Data.MPMOFonClubLocal(:,3);
SUMOFMOMENTSLOCAL=Data.SumofMomentsonClubLocal(:,3);
plot(Data.Time,EQMPLOCAL);
plot(Data.Time,MPMOFLOCAL);
plot(Data.Time,SUMOFMOMENTSLOCAL);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Equivalent Midpoint Couple','Total Force on Midpoint MOF','Sum of Moments');
legend('Location','southeast');
%Add a Title
title('Equivalent Couple, Moment of Force, Sum of Moments');
subtitle('Data - Grip Reference Frame');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Plot - Equivalent Couple and MOF');
pause(PauseTime);
%Close Figure
close(929);

%% ====== End of SCRIPT_929_3D_PLOT_Data_EquivalentCoupleandMOF.m ======

%% ====== Start of SCRIPT_930_3D_PLOT_Data_LSWork.m ======
figure(930);
hold on;
plot(Data.Time,Data.LSLinearWorkonArm);
plot(Data.Time,Data.LSAngularWorkonArm);
plot(Data.Time,Data.TotalLSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','LS Angular Work','LS Total Work');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Left Shoulder Work');
pause(PauseTime);
%Close Figure
close(930);

%% ====== End of SCRIPT_930_3D_PLOT_Data_LSWork.m ======

%% ====== Start of SCRIPT_931_3D_PLOT_Data_LSPower.m ======
figure(931);
hold on;
plot(Data.Time,Data.LSonArmLinearPower);
plot(Data.Time,Data.LSonArmAngularPower);
plot(Data.Time,Data.TotalLSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','LS Angular Power','LS Total Power');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Left Shoulder Power');
pause(PauseTime);
%Close Figure
close(931);

%% ====== End of SCRIPT_931_3D_PLOT_Data_LSPower.m ======

%% ====== Start of SCRIPT_932_3D_PLOT_Data_RSWork.m ======
figure(932);
hold on;
plot(Data.Time,Data.RSLinearWorkonArm);
plot(Data.Time,Data.RSAngularWorkonArm);
plot(Data.Time,Data.TotalRSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Work','RS Angular Work','RS Total Work');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Right Shoulder Work');
pause(PauseTime);
%Close Figure
close(932);

%% ====== End of SCRIPT_932_3D_PLOT_Data_RSWork.m ======

%% ====== Start of SCRIPT_933_3D_PLOT_Data_RSPower.m ======
figure(933);
hold on;
plot(Data.Time,Data.RSonArmLinearPower);
plot(Data.Time,Data.RSonArmAngularPower);
plot(Data.Time,Data.TotalRSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Power','RS Angular Power','RS Total Power');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Right Shoulder Power');
pause(PauseTime);
%Close Figure
close(933);

%% ====== End of SCRIPT_933_3D_PLOT_Data_RSPower.m ======

%% ====== Start of SCRIPT_934_3D_PLOT_Data_LEWork.m ======
figure(934);
hold on;
plot(Data.Time,Data.LELinearWorkonForearm);
plot(Data.Time,Data.LEAngularWorkonForearm);
plot(Data.Time,Data.TotalLEWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Work','LE Angular Work','LE Total Work');
legend('Location','southeast');
%Add a Title
title('Left Elbow Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Left Elbow Work');
pause(PauseTime);
%Close Figure
close(934);

%% ====== End of SCRIPT_934_3D_PLOT_Data_LEWork.m ======

%% ====== Start of SCRIPT_935_3D_PLOT_Data_LEPower.m ======
figure(935);
hold on;
plot(Data.Time,Data.LEonForearmLinearPower);
plot(Data.Time,Data.LEonForearmAngularPower);
plot(Data.Time,Data.TotalLEPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Power','LE Angular Power','LE Total Power');
legend('Location','southeast');
%Add a Title
title('Left Elbow Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Left Elbow Power');
pause(PauseTime);
%Close Figure
close(935);

%% ====== End of SCRIPT_935_3D_PLOT_Data_LEPower.m ======

%% ====== Start of SCRIPT_936_3D_PLOT_Data_REWork.m ======
figure(936);
hold on;
plot(Data.Time,Data.RELinearWorkonForearm);
plot(Data.Time,Data.REAngularWorkonForearm);
plot(Data.Time,Data.TotalREWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Work','RE Angular Work','RE Total Work');
legend('Location','southeast');
%Add a Title
title('Right Elbow Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Right Elbow Work');
pause(PauseTime);
%Close Figure
close(936);

%% ====== End of SCRIPT_936_3D_PLOT_Data_REWork.m ======

%% ====== Start of SCRIPT_937_3D_PLOT_Data_REPower.m ======
figure(937);
hold on;
plot(Data.Time,Data.REonForearmLinearPower);
plot(Data.Time,Data.REonForearmAngularPower);
plot(Data.Time,Data.TotalREPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Power','RE Angular Power','RE Total Power');
legend('Location','southeast');
%Add a Title
title('Right Elbow Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Right Elbow Power');
pause(PauseTime);
%Close Figure
close(937);

%% ====== End of SCRIPT_937_3D_PLOT_Data_REPower.m ======

%% ====== Start of SCRIPT_938_3D_PLOT_Data_LHWork.m ======
figure(938);
hold on;
plot(Data.Time,Data.LHLinearWorkonClub);
plot(Data.Time,Data.LHAngularWorkonClub);
plot(Data.Time,Data.TotalLHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','LH Angular Work','LH Total Work');
legend('Location','southeast');
%Add a Title
title('Left Wrist Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Left Hand Work');
pause(PauseTime);
%Close Figure
close(938);

%% ====== End of SCRIPT_938_3D_PLOT_Data_LHWork.m ======

%% ====== Start of SCRIPT_939_3D_PLOT_Data_LHPower.m ======
figure(939);
hold on;
plot(Data.Time,Data.LHonClubLinearPower);
plot(Data.Time,Data.LHonClubAngularPower);
plot(Data.Time,Data.TotalLHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Power','LH Angular Power','LH Total Power');
legend('Location','southeast');
%Add a Title
title('Left Wrist Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Left Wrist Power');
pause(PauseTime);
%Close Figure
close(939);

%% ====== End of SCRIPT_939_3D_PLOT_Data_LHPower.m ======

%% ====== Start of SCRIPT_940_3D_PLOT_Data_RHWork.m ======
figure(940);
hold on;
plot(Data.Time,Data.RHLinearWorkonClub);
plot(Data.Time,Data.RHAngularWorkonClub);
plot(Data.Time,Data.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Work','RH Angular Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Right Wrist Work on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Right Wrist Work');
pause(PauseTime);
%Close Figure
close(940);

%% ====== End of SCRIPT_940_3D_PLOT_Data_RHWork.m ======

%% ====== Start of SCRIPT_941_3D_PLOT_Data_RHPower.m ======
figure(941);
hold on;
plot(Data.Time,Data.RHonClubLinearPower);
plot(Data.Time,Data.RHonClubAngularPower);
plot(Data.Time,Data.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Power','RH Angular Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Right Wrist Power on Distal Segment');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Right Wrist Power');
pause(PauseTime);
%Close Figure
close(941);

%% ====== End of SCRIPT_941_3D_PLOT_Data_RHPower.m ======

%% ====== Start of SCRIPT_948_3D_PLOT_Data_LocalHandForces.m ======
figure(948);
hold on;
plot(Data.Time(:,1),Data.LHonClubForceLocal(:,1));
plot(Data.Time(:,1),Data.LHonClubForceLocal(:,2));
plot(Data.Time(:,1),Data.LHonClubForceLocal(:,3));
plot(Data.Time(:,1),Data.RHonClubForceLocal(:,1));
plot(Data.Time(:,1),Data.RHonClubForceLocal(:,2));
plot(Data.Time(:,1),Data.RHonClubForceLocal(:,3));
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Left Wrist X','Left Wrist Y','Left Wrist Z','Right Wrist X','Right Wrist Y','Right Wrist Z');
legend('Location','southeast');
%Add a Title
title('Local Hand Forces on Club');
subtitle('Data');
%Save Figure
cd(matlabdrive);
cd '3DModel';
savefig('Scripts/_Model Data Scripts/Data Charts/Data_Plot - Local Hand Forces');
pause(PauseTime);
%Close Figure
close(948);

%% ====== End of SCRIPT_948_3D_PLOT_Data_LocalHandForces.m ======

%% ====== Start of SCRIPT_950_3D_PLOT_Data_TorqueInputvsTorqueOutput.m ======
figure(950);
hold on;
plot(Data.Time,Data.HipConstraintTorqueX);
plot(Data.Time,Data.HipConstraintTorqueY);
plot(Data.Time,Data.HipConstraintTorqueZ);
plot(Data.Time,Data.TorsoConstraintTorqueX);
plot(Data.Time,Data.TorsoConstraintTorqueY);
plot(Data.Time,Data.TorsoConstraintTorqueZ);
plot(Data.Time,Data.SpineConstraintTorqueX);
plot(Data.Time,Data.SpineConstraintTorqueY);
plot(Data.Time,Data.SpineConstraintTorqueZ);
plot(Data.Time,Data.LScapConstraintTorqueX);
plot(Data.Time,Data.LScapConstraintTorqueY);
plot(Data.Time,Data.LScapConstraintTorqueZ);
plot(Data.Time,Data.RScapConstraintTorqueX);
plot(Data.Time,Data.RScapConstraintTorqueY);
plot(Data.Time,Data.RScapConstraintTorqueZ);
plot(Data.Time,Data.LSConstraintTorqueX);
plot(Data.Time,Data.LSConstraintTorqueY);
plot(Data.Time,Data.LSConstraintTorqueZ);
plot(Data.Time,Data.RSConstraintTorqueX);
plot(Data.Time,Data.RSConstraintTorqueY);
plot(Data.Time,Data.RSConstraintTorqueZ);
plot(Data.Time,Data.LEConstraintTorqueX);
plot(Data.Time,Data.LEConstraintTorqueY);
plot(Data.Time,Data.LEConstraintTorqueZ);
plot(Data.Time,Data.REConstraintTorqueX);
plot(Data.Time,Data.REConstraintTorqueY);
plot(Data.Time,Data.REConstraintTorqueZ);
plot(Data.Time,Data.LFConstraintTorqueX);
plot(Data.Time,Data.LFConstraintTorqueY);
plot(Data.Time,Data.LFConstraintTorqueZ);
plot(Data.Time,Data.RFConstraintTorqueX);
plot(Data.Time,Data.RFConstraintTorqueY);
plot(Data.Time,Data.RFConstraintTorqueZ);
plot(Data.Time,Data.LWConstraintTorqueX);
plot(Data.Time,Data.LWConstraintTorqueY);
plot(Data.Time,Data.LWConstraintTorqueZ);
plot(Data.Time,Data.RWConstraintTorqueX);
plot(Data.Time,Data.RWConstraintTorqueY);
plot(Data.Time,Data.RWConstraintTorqueZ);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Constraint Torque X','Hip Constraint Torque Y','Hip Constraint Torque Z',...
'Torso Constraint Torque X','Torso Constraint Torque Y','Torso Constraint Torque Z',...
'Spine Constraint Torque X','Spine Constraint Torque Y','Spine Constraint Torque Z',...
'LScap Constraint Torque X','LScap Constraint Torque Y','LScap Constraint Torque Z',...
'RScap Constraint Torque X','RScap Constraint Torque Y','RScap Constraint Torque Z',...
'LS Constraint Torque X','LS Constraint Torque Y','LS Constraint Torque Z',...
'RS Constraint Torque X','RS Constraint Torque Y','RS Constraint Torque Z',...
'LE Constraint Torque X','LE Constraint Torque Y','LE Constraint Torque Z',...
'RE Constraint Torque X','RE Constraint Torque Y','RE Constraint Torque Z',...
'LF Constraint Torque X','LF Constraint Torque Y','LF Constraint Torque Z',...
'RF Constraint Torque X','RF Constraint Torque Y','RF Constraint Torque Z',...
'LW Constraint Torque X','LW Constraint Torque Y','LW Constraint Torque Z',...
'RW Constraint Torque X','RW Constraint Torque Y','RW Constraint Torque Z');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
subtitle('Data');
%Save Figure
cd(matlabdrive);
savefig('3DModel/Scripts/_Model Data Scripts/Data Charts/Data_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(950);

%% ====== End of SCRIPT_950_3D_PLOT_Data_TorqueInputvsTorqueOutput.m ======

end

%%% END FILE: Plotting Scripts\PLOT_ModelData_Plots.m %%%

%%% START FILE: Plotting Scripts\PLOT_ZTCFQuiver.m %%%
function PLOT_ZTCFQuiver(ZTCFQ)
%PLOT_ZTCFQuiverSuite - Unified plotting script to replicate all ZTCF quiver plots from MASTER_SCRIPT_ZTCFCharts_3D.m
% Uses overlayQuiverForces or shelledQuivers3 for clarity and modularity.

P = [ZTCFQ.MPx, ZTCFQ.MPy, ZTCFQ.MPz];
PL = [ZTCFQ.LHx, ZTCFQ.LHy, ZTCFQ.LHz];
PR = [ZTCFQ.RHx, ZTCFQ.RHy, ZTCFQ.RHz];
F = ZTCFQ.TotalHandForceGlobal;
C = ZTCFQ.EquivalentMidpointCoupleGlobal;
TL = ZTCFQ.LHonClubTGlobal;
TR = ZTCFQ.RHonClubTGlobal;
TNet = ZTCFQ.TotalHandTorqueGlobal;
MOFL = ZTCFQ.LHMOFonClubGlobal;
MOFR = ZTCFQ.RHMOFonClubGlobal;
MOFTotal = ZTCFQ.MPMOFonClubGlobal;

%% Plot 1: Net Force and Equivalent Couple
figure(1);
overlayQuiverForces({P, P}, {F, C}, 'Tags', {'Net Force', 'Equivalent MP Couple'}, 'Colors', {[0 1 0], [0.8 0.2 0]}, 'Title', 'Net Force & Equivalent Couple');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Net Force and Equivalent MP Couple');

%% Plot 2: Net Force Only
figure(2);
overlayQuiverForces({P}, {F}, 'Tags', {'Net Force'}, 'Colors', {[0 1 0]}, 'Title', 'Net Force');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Net Force');

%% Plot 3: Hand Forces
figure(3);
VL = ZTCFQ.LHonClubFGlobal;
VR = ZTCFQ.RHonClubFGlobal;
overlayQuiverForces({PL, PR, P}, {VL, VR, F}, 'Tags', {'LH Force', 'RH Force', 'Net Force'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Forces');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Hand Forces');

%% Plot 4: Hand Torques
figure(4);
overlayQuiverForces({PL, PR, P}, {TL, TR, TNet}, 'Tags', {'LH Torque', 'RH Torque', 'Net Torque'}, 'Colors', {[0 0 1], [1 0 0], [0 1 0]}, 'Title', 'Total Hand Torques');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Hand Torques');

%% Plot 5: All Torques and MOFs
figure(5);
overlayQuiverForces({PL, PR, P, PL, PR, P}, {MOFL, MOFR, MOFTotal, TL, TR, TNet}, 'Tags', {'LH MOF','RH MOF','Total MOF','LH Torque','RH Torque','Net Torque'}, 'Colors', {[0 0.5 0],[0.5 0 0],[0 0 0.5],[0 0 1],[1 0 0],[0 1 0]}, 'Title', 'All Torques and Moments');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Torques and Moments');

%% Plot 6: LHRH MOFs Only
figure(6);
overlayQuiverForces({PL, PR}, {MOFL, MOFR}, 'Tags', {'LH MOF','RH MOF'}, 'Colors', {[0 0.5 0],[0.5 0 0]}, 'Title', 'LHRH Moments of Force');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - LHRH Moments of Force');

%% Plot 7: Club COM Dots
figure(7);
COM = ZTCFQ.ClubCOM;
overlayQuiverForces({COM}, {zeros(size(COM))}, 'Tags', {'COM'}, 'Colors', {[0.25 0.25 0.25]}, 'Title', 'Club COM Points');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Club COM Dots');

%% Plot 8: Arm Segments
figure(8);
LA = [ZTCFQ.LSx, ZTCFQ.LSy, ZTCFQ.LSz];
RA = [ZTCFQ.RSx, ZTCFQ.RSy, ZTCFQ.RSz];
LAvec = [ZTCFQ.LeftArmdx, ZTCFQ.LeftArmdy, ZTCFQ.LeftArmdz];
RAvec = [ZTCFQ.RightArmdx, ZTCFQ.RightArmdy, ZTCFQ.RightArmdz];
overlayQuiverForces({LA, RA}, {LAvec, RAvec}, 'Tags', {'Left Arm', 'Right Arm'}, 'Colors', {[0 0 0.5], [0 0.5 0]}, 'Title', 'Upper Arms');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Upper Arms');

%% Plot 9: Forearm Segments
figure(9);
LF = [ZTCFQ.LEx, ZTCFQ.LEy, ZTCFQ.LEz];
RF = [ZTCFQ.REx, ZTCFQ.REy, ZTCFQ.REz];
LFvec = [ZTCFQ.LeftForearmdx, ZTCFQ.LeftForearmdy, ZTCFQ.LeftForearmdz];
RFvec = [ZTCFQ.RightForearmdx, ZTCFQ.RightForearmdy, ZTCFQ.RightForearmdz];
overlayQuiverForces({LF, RF}, {LFvec, RFvec}, 'Tags', {'Left Forearm', 'Right Forearm'}, 'Colors', {[0 0 0.5], [0 0.5 0]}, 'Title', 'Forearms');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Forearms');

%% Plot 10: Total Linear Impulse
figure(10);
LI = ZTCFQ.LinearImpulseonClub;
overlayQuiverForces({P}, {LI}, 'Tags', {'Linear Impulse'}, 'Colors', {[0 1 0]}, 'Title', 'Total Linear Impulse on Club');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Total Linear Impulse on Club');

%% Plot 11: Total Angular Impulse
figure(11);
AI = ZTCFQ.LHAngularImpulseonClub + ZTCFQ.RHAngularImpulseonClub;
overlayQuiverForces({P}, {AI}, 'Tags', {'Angular Impulse'}, 'Colors', {[0 1 0]}, 'Title', 'Total Angular Impulse on Club');
savefig('ZTCF Quiver Plots/ZTCF_Quiver Plot - Total Angular Impulse on Club');

end

%%% END FILE: Plotting Scripts\PLOT_ZTCFQuiver.m %%%

%%% START FILE: Plotting Scripts\PLOT_ZTCF_Plots.m %%%
function PLOT_ZTCF_Plots(ZTCFQ)
%%% ====== Start of SCRIPT_301_3D_PLOT_ZTCF_AngularWork.m ======
figure(301);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LSAngularWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.RSAngularWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.LEAngularWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.REAngularWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.LHAngularWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.RHAngularWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Work','RS Angular Work','LE Angular Work','RE Angular Work','LH Angular Work','RH Angular Work');
legend('Location','southeast');
%Add a Title
title('Angular Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Angular Work');
pause(PauseTime);
%Close Figure
close(301);

%% ====== End of SCRIPT_301_3D_PLOT_ZTCF_AngularWork.m ======

%% ====== Start of SCRIPT_302_3D_PLOT_ZTCF_AngularPower.m ======
figure(302);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LSonArmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.RSonArmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.LEonForearmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.REonForearmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.LHonClubAngularPower);
plot(ZTCFQ.Time,ZTCFQ.RHonClubAngularPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Angular Power','RS Angular Power','LE Angular Power','RE Angular Power','LH Angular Power','RH Angular Power');
legend('Location','southeast');
%Add a Title
title('Angular Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Angular Power');
pause(PauseTime);
%Close Figure
close(302);

%% ====== End of SCRIPT_302_3D_PLOT_ZTCF_AngularPower.m ======

%% ====== Start of SCRIPT_303_3D_PLOT_ZTCF_LinearPower.m ======
figure(303);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LSonArmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.RSonArmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LEonForearmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.REonForearmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LHonClubLinearPower);
plot(ZTCFQ.Time,ZTCFQ.RHonClubLinearPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','RS Linear Power','LE Linear Power','RE Linear Power','LH Linear Power','RH Linear Power');
legend('Location','southeast');
%Add a Title
title('Linear Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Linear Power');
pause(PauseTime);
%Close Figure
close(303);

%% ====== End of SCRIPT_303_3D_PLOT_ZTCF_LinearPower.m ======

%% ====== Start of SCRIPT_304_3D_PLOT_ZTCF_LinearWork.m ======
figure(304);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LSLinearWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.RSLinearWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.LELinearWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.RELinearWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.LHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.RHLinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','RS Linear Work','LE Linear Work','RE Linear Work','LW Linear Work','RH Linear Work');
legend('Location','southeast');
%Add a Title
title('Linear Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Linear Work on Distal');
pause(PauseTime);
%Close Figure
close(304);

%% ====== End of SCRIPT_304_3D_PLOT_ZTCF_LinearWork.m ======

%% ====== Start of SCRIPT_305_3D_PLOT_ZTCF_JointTorqueInputs.m ======
figure(305);
hold on;
plot(ZTCFQ.Time,ZTCFQ.HipTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.HipTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.HipTorqueZInput);
plot(ZTCFQ.Time,ZTCFQ.TranslationForceXInput);
plot(ZTCFQ.Time,ZTCFQ.TranslationForceYInput);
plot(ZTCFQ.Time,ZTCFQ.TranslationForceZInput);
plot(ZTCFQ.Time,ZTCFQ.TorsoTorqueInput);
plot(ZTCFQ.Time,ZTCFQ.SpineTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.SpineTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.LScapTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.LScapTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.RScapTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.RScapTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.LSTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.LSTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.LSTorqueZInput);
plot(ZTCFQ.Time,ZTCFQ.RSTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.RSTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.RSTorqueZInput);
plot(ZTCFQ.Time,ZTCFQ.LETorqueInput);
plot(ZTCFQ.Time,ZTCFQ.RETorqueInput);
plot(ZTCFQ.Time,ZTCFQ.LFTorqueInput);
plot(ZTCFQ.Time,ZTCFQ.RFTorqueInput);
plot(ZTCFQ.Time,ZTCFQ.LWTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.LWTorqueYInput);
plot(ZTCFQ.Time,ZTCFQ.RWTorqueXInput);
plot(ZTCFQ.Time,ZTCFQ.RWTorqueYInput);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Torque X','Hip Torque Y','Hip Torque Z','Translation Force X',...
'Translation Force Y','Translation Force Z','Torso Torque','Spine Torque X',...
'Spine Torque Y','LScap Torque X','Left Scap Torque Y','RScap Torque X',...
'RScapTorqueY','LS Torque X','LS Torque Y','LS Torque Z','RS Torque X','RS Torque Y',...
'RS Torque Z','LE Torque','RE Torque','LF Torque','RF Torque','LW Torque X',...
'LW Torque Y','RW Torque X','RW Torque Y');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(305);

%% ====== End of SCRIPT_305_3D_PLOT_ZTCF_JointTorqueInputs.m ======

%% ====== Start of SCRIPT_306_3D_PLOT_ZTCF_TotalWork.m ======
figure(306);
hold on;
plot(ZTCFQ.Time,ZTCFQ.TotalLSWork);
plot(ZTCFQ.Time,ZTCFQ.TotalRSWork);
plot(ZTCFQ.Time,ZTCFQ.TotalLEWork);
plot(ZTCFQ.Time,ZTCFQ.TotalREWork);
plot(ZTCFQ.Time,ZTCFQ.TotalLHWork);
plot(ZTCFQ.Time,ZTCFQ.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Total Work','RS Total Work','LE Total Work','RE Total Work','LH Total Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Total Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Total Work');
pause(PauseTime);
%Close Figure
close(306);

%% ====== End of SCRIPT_306_3D_PLOT_ZTCF_TotalWork.m ======

%% ====== Start of SCRIPT_307_3D_PLOT_ZTCF_TotalPower.m ======
figure(307);
hold on;
plot(ZTCFQ.Time,ZTCFQ.TotalLSPower);
plot(ZTCFQ.Time,ZTCFQ.TotalRSPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLEPower);
plot(ZTCFQ.Time,ZTCFQ.TotalREPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLHPower);
plot(ZTCFQ.Time,ZTCFQ.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Total Power','RS Total Power','LE Total Power','RE Total Power','LH Total Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Total Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Total Power');
pause(PauseTime);
%Close Figure
close(307);

%% ====== End of SCRIPT_307_3D_PLOT_ZTCF_TotalPower.m ======

%% ====== Start of SCRIPT_322_3D_PLOT_ZTCF_ForceAlongHandPath.m ======
figure(322);
plot(ZTCFQ.Time,ZTCFQ.ForceAlongHandPath);
xlabel('Time (s)');
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Force Along Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Force Along Hand Path');
pause(PauseTime);
%Close Figure
close(322);

%% ====== End of SCRIPT_322_3D_PLOT_ZTCF_ForceAlongHandPath.m ======

%% ====== Start of SCRIPT_323_3D_PLOT_ZTCF_CHSandHandSpeed.m ======
figure(323);
hold on;
plot(ZTCFQ.Time,ZTCFQ.("CHS (mph)"));
plot(ZTCFQ.Time,ZTCFQ.("Hand Speed (mph)"));
xlabel('Time (s)');
ylabel('Speed (mph)');
grid 'on';
%Add Legend to Plot
legend('Clubhead Speed (mph)','Hand Speed (mph)');
legend('Location','southeast');
%Add a Title
title('Clubhead and Hand Speed');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - CHS and Hand Speed');
pause(PauseTime);
%Close Figure
close(323);

%% ====== End of SCRIPT_323_3D_PLOT_ZTCF_CHSandHandSpeed.m ======

%% ====== Start of SCRIPT_325_3D_PLOT_ZTCF_LHRHForceAlongHandPath.m ======
figure(325);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LHForceAlongHandPath);
plot(ZTCFQ.Time,ZTCFQ.RHForceAlongHandPath);
plot(ZTCFQ.Time,ZTCFQ.ForceAlongHandPath);
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('LH Force on Left Hand Path','RH Force on Right Hand Path','Net Force Along MP Hand Path');
legend('Location','southeast');
%Add a Title
title('Force Along Hand Path');
subtitle('ZTCF');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Force Along Hand Path - LH RH Total');
pause(PauseTime);
%Close Figure
close(325);

%% ====== End of SCRIPT_325_3D_PLOT_ZTCF_LHRHForceAlongHandPath.m ======

%% ====== Start of SCRIPT_326_3D_PLOT_ZTCF_LinearImpulse.m ======
figure(326);
plot(ZTCFQ.Time,ZTCFQ.LinearImpulseonClub);
xlabel('Time (s)');
ylabel('Impulse (Ns)');
grid 'on';
%Add Legend to Plot
legend('Linear Impulse');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Linear Impulse');
pause(PauseTime);
%Close Figure
close(326);

%% ====== End of SCRIPT_326_3D_PLOT_ZTCF_LinearImpulse.m ======

%% ====== Start of SCRIPT_327_3D_PLOT_ZTCF_LinearWork.m ======
figure(327);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.RHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.LinearWorkonClub);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','RH Linear Work','Net Force Linear Work (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Work');
subtitle('ZTCF');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Linear Work');
pause(PauseTime);
%Close Figure
close(327);

%% ====== End of SCRIPT_327_3D_PLOT_ZTCF_LinearWork.m ======

%% ====== Start of SCRIPT_328_3D_PLOT_ZTCF_LinearImpulse.m ======
figure(328);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LHLinearImpulseonClub);
plot(ZTCFQ.Time,ZTCFQ.RHLinearImpulseonClub);
plot(ZTCFQ.Time,ZTCFQ.LinearImpulseonClub);
ylabel('Linear Impulse (kgm/s)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Impulse','RH Linear Impulse','Net Force Linear Impulse (midpoint)');
legend('Location','southeast');
%Add a Title
title('Linear Impulse');
subtitle('ZTCF');
%subtitle('Left Hand, Right Hand, Total');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Linear Impulse LH,RH,Total');
pause(PauseTime);
%Close Figure
close(328);

%% ====== End of SCRIPT_328_3D_PLOT_ZTCF_LinearImpulse.m ======

%% ====== Start of SCRIPT_329_3D_PLOT_ZTCF_EquivalentCoupleandMOF.m ======
figure(329);
hold on;
EQMPLOCAL=ZTCFQ.EquivalentMidpointCoupleLocal(:,3);
MPMOFLOCAL=ZTCFQ.MPMOFonClubLocal(:,3);
SUMOFMOMENTSLOCAL=ZTCFQ.SumofMomentsonClubLocal(:,3);
plot(ZTCFQ.Time,EQMPLOCAL);
plot(ZTCFQ.Time,MPMOFLOCAL);
plot(ZTCFQ.Time,SUMOFMOMENTSLOCAL);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Equivalent Midpoint Couple','Total Force on Midpoint MOF','Sum of Moments');
legend('Location','southeast');
%Add a Title
title('Equivalent Couple, Moment of Force, Sum of Moments');
subtitle('ZTCF - Grip Reference Frame');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Equivalent Couple and MOF');
pause(PauseTime);
%Close Figure
close(329);

%% ====== End of SCRIPT_329_3D_PLOT_ZTCF_EquivalentCoupleandMOF.m ======

%% ====== Start of SCRIPT_330_3D_PLOT_ZTCF_LSWork.m ======
figure(330);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LSLinearWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.LSAngularWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.TotalLSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Work','LS Angular Work','LS Total Work');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Left Shoulder Work');
pause(PauseTime);
%Close Figure
close(330);

%% ====== End of SCRIPT_330_3D_PLOT_ZTCF_LSWork.m ======

%% ====== Start of SCRIPT_331_3D_PLOT_ZTCF_LSPower.m ======
figure(931);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LSonArmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LSonArmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LS Linear Power','LS Angular Power','LS Total Power');
legend('Location','southeast');
%Add a Title
title('Left Shoulder Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Left Shoulder Power');
pause(PauseTime);
%Close Figure
close(931);

%% ====== End of SCRIPT_331_3D_PLOT_ZTCF_LSPower.m ======

%% ====== Start of SCRIPT_332_3D_PLOT_ZTCF_RSWork.m ======
figure(332);
hold on;
plot(ZTCFQ.Time,ZTCFQ.RSLinearWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.RSAngularWorkonArm);
plot(ZTCFQ.Time,ZTCFQ.TotalRSWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Work','RS Angular Work','RS Total Work');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Right Shoulder Work');
pause(PauseTime);
%Close Figure
close(332);

%% ====== End of SCRIPT_332_3D_PLOT_ZTCF_RSWork.m ======

%% ====== Start of SCRIPT_333_3D_PLOT_ZTCF_RSPower.m ======
figure(333);
hold on;
plot(ZTCFQ.Time,ZTCFQ.RSonArmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.RSonArmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.TotalRSPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RS Linear Power','RS Angular Power','RS Total Power');
legend('Location','southeast');
%Add a Title
title('Right Shoulder Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Right Shoulder Power');
pause(PauseTime);
%Close Figure
close(333);

%% ====== End of SCRIPT_333_3D_PLOT_ZTCF_RSPower.m ======

%% ====== Start of SCRIPT_334_3D_PLOT_ZTCF_LEWork.m ======
figure(334);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LELinearWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.LEAngularWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.TotalLEWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Work','LE Angular Work','LE Total Work');
legend('Location','southeast');
%Add a Title
title('Left Elbow Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Left Elbow Work');
pause(PauseTime);
%Close Figure
close(334);

%% ====== End of SCRIPT_334_3D_PLOT_ZTCF_LEWork.m ======

%% ====== Start of SCRIPT_335_3D_PLOT_ZTCF_LEPower.m ======
figure(335);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LEonForearmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LEonForearmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLEPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LE Linear Power','LE Angular Power','LE Total Power');
legend('Location','southeast');
%Add a Title
title('Left Elbow Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Left Elbow Power');
pause(PauseTime);
%Close Figure
close(335);

%% ====== End of SCRIPT_335_3D_PLOT_ZTCF_LEPower.m ======

%% ====== Start of SCRIPT_336_3D_PLOT_ZTCF_REWork.m ======
figure(336);
hold on;
plot(ZTCFQ.Time,ZTCFQ.RELinearWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.REAngularWorkonForearm);
plot(ZTCFQ.Time,ZTCFQ.TotalREWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Work','RE Angular Work','RE Total Work');
legend('Location','southeast');
%Add a Title
title('Right Elbow Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Right Elbow Work');
pause(PauseTime);
%Close Figure
close(336);

%% ====== End of SCRIPT_336_3D_PLOT_ZTCF_REWork.m ======

%% ====== Start of SCRIPT_337_3D_PLOT_ZTCF_REPower.m ======
figure(337);
hold on;
plot(ZTCFQ.Time,ZTCFQ.REonForearmLinearPower);
plot(ZTCFQ.Time,ZTCFQ.REonForearmAngularPower);
plot(ZTCFQ.Time,ZTCFQ.TotalREPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RE Linear Power','RE Angular Power','RE Total Power');
legend('Location','southeast');
%Add a Title
title('Right Elbow Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Right Elbow Power');
pause(PauseTime);
%Close Figure
close(337);

%% ====== End of SCRIPT_337_3D_PLOT_ZTCF_REPower.m ======

%% ====== Start of SCRIPT_338_3D_PLOT_ZTCF_LHWork.m ======
figure(338);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.LHAngularWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.TotalLHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Work','LH Angular Work','LH Total Work');
legend('Location','southeast');
%Add a Title
title('Left Wrist Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Left Wrist Work');
pause(PauseTime);
%Close Figure
close(338);

%% ====== End of SCRIPT_338_3D_PLOT_ZTCF_LHWork.m ======

%% ====== Start of SCRIPT_339_3D_PLOT_ZTCF_LHPower.m ======
figure(339);
hold on;
plot(ZTCFQ.Time,ZTCFQ.LHonClubLinearPower);
plot(ZTCFQ.Time,ZTCFQ.LHonClubAngularPower);
plot(ZTCFQ.Time,ZTCFQ.TotalLHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('LH Linear Power','LH Angular Power','LH Total Power');
legend('Location','southeast');
%Add a Title
title('Left Wrist Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Left Wrist Power');
pause(PauseTime);
%Close Figure
close(339);

%% ====== End of SCRIPT_339_3D_PLOT_ZTCF_LHPower.m ======

%% ====== Start of SCRIPT_340_3D_PLOT_ZTCF_RHWork.m ======
figure(340);
hold on;
plot(ZTCFQ.Time,ZTCFQ.RHLinearWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.RHAngularWorkonClub);
plot(ZTCFQ.Time,ZTCFQ.TotalRHWork);
ylabel('Work (J)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Work','RH Angular Work','RH Total Work');
legend('Location','southeast');
%Add a Title
title('Right Wrist Work on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Right Wrist Work');
pause(PauseTime);
%Close Figure
close(340);

%% ====== End of SCRIPT_340_3D_PLOT_ZTCF_RHWork.m ======

%% ====== Start of SCRIPT_341_3D_PLOT_ZTCF_RHPower.m ======
figure(341);
hold on;
plot(ZTCFQ.Time,ZTCFQ.RHonClubLinearPower);
plot(ZTCFQ.Time,ZTCFQ.RHonClubAngularPower);
plot(ZTCFQ.Time,ZTCFQ.TotalRHPower);
ylabel('Power (W)');
grid 'on';
%Add Legend to Plot
legend('RH Linear Power','RH Angular Power','RH Total Power');
legend('Location','southeast');
%Add a Title
title('Right Wrist Power on Distal Segment');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Right Wrist Power');
pause(PauseTime);
%Close Figure
close(341);

%% ====== End of SCRIPT_341_3D_PLOT_ZTCF_RHPower.m ======

%% ====== Start of SCRIPT_348_3D_PLOT_ZTCF_LocalHandForces.m ======
figure(348);
hold on;
plot(ZTCFQ.Time(:,1),ZTCFQ.LHonClubForceLocal(:,1));
plot(ZTCFQ.Time(:,1),ZTCFQ.LHonClubForceLocal(:,2));
plot(ZTCFQ.Time(:,1),ZTCFQ.LHonClubForceLocal(:,3));
plot(ZTCFQ.Time(:,1),ZTCFQ.RHonClubForceLocal(:,1));
plot(ZTCFQ.Time(:,1),ZTCFQ.RHonClubForceLocal(:,2));
plot(ZTCFQ.Time(:,1),ZTCFQ.RHonClubForceLocal(:,3));
ylabel('Force (N)');
grid 'on';
%Add Legend to Plot
legend('Left Hand X','Left Hand Y','Left Hand Z','Right Hand X','Right Hand Y','Right Hand Z');
legend('Location','southeast');
%Add a Title
title('Local Hand Forces on Club');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Local Hand Forces');
pause(PauseTime);
%Close Figure
close(348);

%% ====== End of SCRIPT_348_3D_PLOT_ZTCF_LocalHandForces.m ======

%% ====== Start of SCRIPT_350_3D_PLOT_ZTCF_TorqueInputvsTorqueOutput.m ======
figure(350);
hold on;
plot(ZTCFQ.Time,ZTCFQ.HipConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.HipConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.HipConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.TorsoConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.TorsoConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.TorsoConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.SpineConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.SpineConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.SpineConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.LScapConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.LScapConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.LScapConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.RScapConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.RScapConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.RScapConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.LSConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.LSConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.LSConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.RSConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.RSConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.RSConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.LEConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.LEConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.LEConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.REConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.REConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.REConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.LFConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.LFConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.LFConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.RFConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.RFConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.RFConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.LWConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.LWConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.LWConstraintTorqueZ);
plot(ZTCFQ.Time,ZTCFQ.RWConstraintTorqueX);
plot(ZTCFQ.Time,ZTCFQ.RWConstraintTorqueY);
plot(ZTCFQ.Time,ZTCFQ.RWConstraintTorqueZ);
ylabel('Torque (Nm)');
grid 'on';
%Add Legend to Plot
legend('Hip Constraint Torque X','Hip Constraint Torque Y','Hip Constraint Torque Z',...
'Torso Constraint Torque X','Torso Constraint Torque Y','Torso Constraint Torque Z',...
'Spine Constraint Torque X','Spine Constraint Torque Y','Spine Constraint Torque Z',...
'LScap Constraint Torque X','LScap Constraint Torque Y','LScap Constraint Torque Z',...
'RScap Constraint Torque X','RScap Constraint Torque Y','RScap Constraint Torque Z',...
'LS Constraint Torque X','LS Constraint Torque Y','LS Constraint Torque Z',...
'RS Constraint Torque X','RS Constraint Torque Y','RS Constraint Torque Z',...
'LE Constraint Torque X','LE Constraint Torque Y','LE Constraint Torque Z',...
'RE Constraint Torque X','RE Constraint Torque Y','RE Constraint Torque Z',...
'LF Constraint Torque X','LF Constraint Torque Y','LF Constraint Torque Z',...
'RF Constraint Torque X','RF Constraint Torque Y','RF Constraint Torque Z',...
'LW Constraint Torque X','LW Constraint Torque Y','LW Constraint Torque Z',...
'RW Constraint Torque X','RW Constraint Torque Y','RW Constraint Torque Z');
legend('Location','southeast');
%Add a Title
title('Joint Torque Inputs');
subtitle('ZTCF');
%Save Figure
savefig('ZTCF Charts/ZTCF_Plot - Joint Torque Inputs');
pause(PauseTime);
%Close Figure
close(350);

%% ====== End of SCRIPT_350_3D_PLOT_ZTCF_TorqueInputvsTorqueOutput.m ======

end

%%% END FILE: Plotting Scripts\PLOT_ZTCF_Plots.m %%%

%%% START FILE: Plotting Scripts\PLOT_ZVCFQuiver.m %%%
function PLOT_ZVCFQuiver(ZVCFQ, DELTAQ, BASEQ)
%PLOT_ZVCFQuiver - Replicates all quiver plots from MASTER_SCRIPT_ZVCF_CHARTS_3D.m

%% Plot 1: ZVCF LHRH Force Quivers
figure(1);
PL = [ZVCFQ.LHx, ZVCFQ.LHy, ZVCFQ.LHz];
VL = ZVCFQ.LHonClubFGlobal;
PR = [ZVCFQ.RHx, ZVCFQ.RHy, ZVCFQ.RHz];
VR = ZVCFQ.RHonClubFGlobal;
P = [ZVCFQ.MPx, ZVCFQ.MPy, ZVCFQ.MPz];
VT = ZVCFQ.TotalHandForceGlobal;
overlayQuiverForces({PL, PR, P}, {VL, VR, VT}, 'Tags', {'LH Force','RH Force','Net Force'}, 'Colors', {[0 0 1],[1 0 0],[0 1 0]}, 'Title', 'ZVCF LHRH Hand Forces');
savefig('ZVCF Quiver Plots/ZVCF_Quiver Plot - Hand Forces');

%% Plot 2: ZVCF vs DELTA Comparison
figure(2);
VLd = DELTAQ.LHonClubFGlobal;
VRd = DELTAQ.RHonClubFGlobal;
VTd = DELTAQ.TotalHandForceGlobal;

PBL = [BASEQ.LHx, BASEQ.LHy, BASEQ.LHz];
PBR = [BASEQ.RHx, BASEQ.RHy, BASEQ.RHz];
PBM = [BASEQ.MPx, BASEQ.MPy, BASEQ.MPz];

overlayQuiverForces({PL, PR, P, PBL, PBR, PBM}, {VL, VR, VT, VLd, VRd, VTd}, ...
    'Tags', {'ZVCF LH Force','ZVCF RH Force','ZVCF Net Force','DELTA LH Force','DELTA RH Force','DELTA Net Force'}, ...
    'Colors', {[0 0 1],[1 0 0],[0 1 0],[0 0 0.5],[0.5 0 0],[0 0.5 0]}, ...
    'Title', 'ZVCF vs DELTA Hand Forces');
savefig('ZVCF Quiver Plots/ZVCF_Quiver Plot - Hand Forces ZVCF Comparison to Delta');

end

%%% END FILE: Plotting Scripts\PLOT_ZVCFQuiver.m %%%

%%% END OF PACKED PROJECT %%%
