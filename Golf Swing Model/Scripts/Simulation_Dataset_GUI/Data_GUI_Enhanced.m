%% 
function Data_GUI_Enhanced()
    % Enhanced Golf Swing Data Generator - Modern GUI with tabbed interface
    % Features: Tabbed structure, pause/resume, post-processing, multiple export formats
    
    % Professional color scheme - softer, muted tones
    colors = struct();
    colors.primary = [0.4, 0.5, 0.6];        % Muted blue-gray
    colors.secondary = [0.5, 0.6, 0.7];      % Lighter blue-gray
    colors.success = [0.4, 0.6, 0.5];        % Muted green
    colors.danger = [0.7, 0.5, 0.5];         % Muted red
    colors.warning = [0.7, 0.6, 0.4];        % Muted amber
    colors.background = [0.96, 0.96, 0.97];  % Very light gray
    colors.panel = [1, 1, 1];                % White
    colors.text = [0.2, 0.2, 0.2];           % Dark gray
    colors.textLight = [0.6, 0.6, 0.6];      % Medium gray
    colors.border = [0.9, 0.9, 0.9];         % Light gray border
    colors.tabActive = [0.8, 0.85, 0.9];     % Light blue for active tab
    colors.tabInactive = [0.95, 0.95, 0.95]; % Light gray for inactive tab
    
    % Create main figure
    screenSize = get(0, 'ScreenSize');
    figWidth = min(1800, screenSize(3) * 0.9);
    figHeight = min(1000, screenSize(4) * 0.9);
    
    fig = figure('Name', 'Enhanced Golf Swing Data Generator', ...
                 'Position', [(screenSize(3)-figWidth)/2, (screenSize(4)-figHeight)/2, figWidth, figHeight], ...
                 'MenuBar', 'none', ...
                 'ToolBar', 'none', ...
                 'NumberTitle', 'off', ...
                 'Color', colors.background, ...
                 'CloseRequestFcn', @closeGUICallback);
    
    % Initialize handles structure with preferences
    handles = struct();
    handles.should_stop = false;
    handles.is_paused = false;
    handles.fig = fig;
    handles.colors = colors;
    handles.preferences = struct(); % Initialize empty preferences
    handles.current_tab = 1; % 1 = Generation, 2 = Post-Processing
    handles.checkpoint_data = struct(); % Store checkpoint information
    
    % Load user preferences
    handles = loadUserPreferences(handles);
    
    % Create main layout
    handles = createMainLayout(fig, handles);
    
    % Store handles in figure
    guidata(fig, handles);
    
    % Apply loaded preferences to UI
    applyUserPreferences(handles);
    
    % Initialize preview
    updatePreview([], [], handles.fig);
    updateCoefficientsPreview([], [], handles.fig);
end

function handles = createMainLayout(fig, handles)
    % Create main layout with professional design and tabbed interface
    colors = handles.colors;
    
    % Main container
    mainPanel = uipanel('Parent', fig, ...
                       'Units', 'normalized', ...
                       'Position', [0, 0, 1, 1], ...
                       'BorderType', 'none', ...
                       'BackgroundColor', colors.background);
    
    % Title bar
    titleHeight = 0.06;
    titlePanel = uipanel('Parent', mainPanel, ...
                        'Units', 'normalized', ...
                        'Position', [0, 1-titleHeight, 1, titleHeight], ...
                        'BackgroundColor', colors.primary, ...
                        'BorderType', 'none');
    
    uicontrol('Parent', titlePanel, ...
              'Style', 'text', ...
              'String', 'Enhanced Golf Swing Data Generator', ...
              'Units', 'normalized', ...
              'Position', [0.02, 0.2, 0.4, 0.6], ...
              'FontSize', 14, ...
              'FontWeight', 'normal', ...
              'ForegroundColor', 'white', ...
              'BackgroundColor', colors.primary, ...
              'HorizontalAlignment', 'left');
    
    % Control buttons in title bar
    buttonWidth = 0.07;
    buttonHeight = 0.6;
    buttonSpacing = 0.01;
    buttonY = 0.2;
    
    % Calculate positions to right-align buttons
    totalButtonWidth = 6 * buttonWidth + 5 * buttonSpacing + 0.04;  % 6 buttons + spacing + extra width
    startX = 1.0 - totalButtonWidth - 0.02;  % Right-align with 0.02 margin
    
    % Play/Pause button
    handles.play_pause_button = uicontrol('Parent', titlePanel, ...
                                         'Style', 'pushbutton', ...
                                         'String', 'Start', ...
                                         'Units', 'normalized', ...
                                         'Position', [startX, buttonY, buttonWidth, buttonHeight], ...
                                         'BackgroundColor', colors.success, ...
                                         'ForegroundColor', 'white', ...
                                         'FontWeight', 'bold', ...
                                         'Callback', @togglePlayPause);
    
    % Stop button
    handles.stop_button = uicontrol('Parent', titlePanel, ...
                                   'Style', 'pushbutton', ...
                                   'String', 'Stop', ...
                                   'Units', 'normalized', ...
                                   'Position', [startX + buttonWidth + buttonSpacing, buttonY, buttonWidth, buttonHeight], ...
                                   'BackgroundColor', colors.danger, ...
                                   'ForegroundColor', 'white', ...
                                   'FontWeight', 'bold', ...
                                   'Callback', @stopGeneration);
    
    % Checkpoint button
    handles.checkpoint_button = uicontrol('Parent', titlePanel, ...
                                         'Style', 'pushbutton', ...
                                         'String', 'Checkpoint', ...
                                         'Units', 'normalized', ...
                                         'Position', [startX + 2*(buttonWidth + buttonSpacing), buttonY, buttonWidth, buttonHeight], ...
                                         'BackgroundColor', colors.warning, ...
                                         'ForegroundColor', 'white', ...
                                         'FontWeight', 'bold', ...
                                         'Callback', @saveCheckpoint);
    
    % Save config button
    handles.save_config_button = uicontrol('Parent', titlePanel, ...
                                          'Style', 'pushbutton', ...
                                          'String', 'Save Config', ...
                                          'Units', 'normalized', ...
                                          'Position', [startX + 3*(buttonWidth + buttonSpacing), buttonY, buttonWidth + 0.02, buttonHeight], ...
                                          'BackgroundColor', colors.secondary, ...
                                          'ForegroundColor', 'white', ...
                                          'FontWeight', 'bold', ...
                                          'Callback', @saveConfiguration);
    
    % Load config button
    handles.load_config_button = uicontrol('Parent', titlePanel, ...
                                          'Style', 'pushbutton', ...
                                          'String', 'Load Config', ...
                                          'Units', 'normalized', ...
                                          'Position', [startX + 4*(buttonWidth + buttonSpacing) + 0.02, buttonY, buttonWidth + 0.02, buttonHeight], ...
                                          'BackgroundColor', colors.secondary, ...
                                          'ForegroundColor', 'white', ...
                                          'FontWeight', 'bold', ...
                                          'Callback', @loadConfiguration);
    
    % Tab bar
    tabHeight = 0.04;
    tabBarPanel = uipanel('Parent', mainPanel, ...
                         'Units', 'normalized', ...
                         'Position', [0, 1-titleHeight-tabHeight, 1, tabHeight], ...
                         'BackgroundColor', colors.background, ...
                         'BorderType', 'none');
    
    % Tab buttons
    tabWidth = 0.15;
    tabSpacing = 0.01;
    
    handles.generation_tab = uicontrol('Parent', tabBarPanel, ...
                                      'Style', 'pushbutton', ...
                                      'String', 'Data Generation', ...
                                      'Units', 'normalized', ...
                                      'Position', [0.02, 0.1, tabWidth, 0.8], ...
                                      'BackgroundColor', colors.tabActive, ...
                                      'ForegroundColor', colors.text, ...
                                      'FontWeight', 'bold', ...
                                      'Callback', @switchToGenerationTab);
    
    handles.postprocessing_tab = uicontrol('Parent', tabBarPanel, ...
                                          'Style', 'pushbutton', ...
                                          'String', 'Post-Processing', ...
                                          'Units', 'normalized', ...
                                          'Position', [0.02 + tabWidth + tabSpacing, 0.1, tabWidth, 0.8], ...
                                          'BackgroundColor', colors.tabInactive, ...
                                          'ForegroundColor', colors.textLight, ...
                                          'FontWeight', 'normal', ...
                                          'Callback', @switchToPostProcessingTab);
    
    % Content area
    contentTop = 1 - titleHeight - tabHeight - 0.01;
    contentPanel = uipanel('Parent', mainPanel, ...
                          'Units', 'normalized', ...
                          'Position', [0.01, 0.01, 0.98, contentTop - 0.01], ...
                          'BorderType', 'none', ...
                          'BackgroundColor', colors.background);
    
    % Create tab content panels
    handles.generation_panel = uipanel('Parent', contentPanel, ...
                                      'Units', 'normalized', ...
                                      'Position', [0, 0, 1, 1], ...
                                      'BackgroundColor', colors.background, ...
                                      'BorderType', 'none', ...
                                      'Visible', 'on');
    
    handles.postprocessing_panel = uipanel('Parent', contentPanel, ...
                                          'Units', 'normalized', ...
                                          'Position', [0, 0, 1, 1], ...
                                          'BackgroundColor', colors.background, ...
                                          'BorderType', 'none', ...
                                          'Visible', 'off');
    
    % Create content for each tab
    handles = createGenerationTabContent(handles.generation_panel, handles);
    handles = createPostProcessingTabContent(handles.postprocessing_panel, handles);
end

function handles = createGenerationTabContent(parent, handles)
    % Create content for the Data Generation tab (similar to original layout)
    colors = handles.colors;
    
    % Two columns - left 10% narrower, right 10% wider
    columnPadding = 0.01;
    columnWidth = (1 - 3*columnPadding) / 2;
    leftColumnWidth = columnWidth * 0.9;  % 10% narrower
    rightColumnWidth = columnWidth * 1.1; % 10% wider
    
    leftPanel = uipanel('Parent', parent, ...
                       'Units', 'normalized', ...
                       'Position', [columnPadding, columnPadding, leftColumnWidth, 1-2*columnPadding], ...
                       'BackgroundColor', colors.panel, ...
                       'BorderType', 'line', ...
                       'BorderWidth', 0.5, ...
                       'HighlightColor', colors.border);
    
    rightPanel = uipanel('Parent', parent, ...
                        'Units', 'normalized', ...
                        'Position', [columnPadding + leftColumnWidth + columnPadding, columnPadding, rightColumnWidth, 1-2*columnPadding], ...
                        'BackgroundColor', colors.panel, ...
                        'BorderType', 'line', ...
                        'BorderWidth', 0.5, ...
                        'HighlightColor', colors.border);
    
    % Store panel references
    handles.generation_leftPanel = leftPanel;
    handles.generation_rightPanel = rightPanel;
    
    % Create content (reuse existing functions)
    handles = createLeftColumnContent(leftPanel, handles);
    handles = createRightColumnContent(rightPanel, handles);
end

function handles = createPostProcessingTabContent(parent, handles)
    % Create content for the Post-Processing tab
    colors = handles.colors;
    
    % Three columns layout for post-processing
    columnPadding = 0.01;
    columnWidth = (1 - 4*columnPadding) / 3;
    
    % Left column - File Selection
    leftPanel = uipanel('Parent', parent, ...
                       'Units', 'normalized', ...
                       'Position', [columnPadding, columnPadding, columnWidth, 1-2*columnPadding], ...
                       'BackgroundColor', colors.panel, ...
                       'BorderType', 'line', ...
                       'BorderWidth', 0.5, ...
                       'HighlightColor', colors.border, ...
                       'Title', 'File Selection');
    
    % Middle column - Processing Options
    middlePanel = uipanel('Parent', parent, ...
                         'Units', 'normalized', ...
                         'Position', [2*columnPadding + columnWidth, columnPadding, columnWidth, 1-2*columnPadding], ...
                         'BackgroundColor', colors.panel, ...
                         'BorderType', 'line', ...
                         'BorderWidth', 0.5, ...
                         'HighlightColor', colors.border, ...
                         'Title', 'Processing Options');
    
    % Right column - Progress & Results
    rightPanel = uipanel('Parent', parent, ...
                        'Units', 'normalized', ...
                        'Position', [3*columnPadding + 2*columnWidth, columnPadding, columnWidth, 1-2*columnPadding], ...
                        'BackgroundColor', colors.panel, ...
                        'BorderType', 'line', ...
                        'BorderWidth', 0.5, ...
                        'HighlightColor', colors.border, ...
                        'Title', 'Progress & Results');
    
    % Create file selection content
    handles = createFileSelectionContent(leftPanel, handles);
    
    % Create processing options content
    handles = createProcessingOptionsContent(middlePanel, handles);
    
    % Create progress and results content
    handles = createProgressResultsContent(rightPanel, handles);
end

function handles = createFileSelectionContent(parent, handles)
    % Create file selection interface
    colors = handles.colors;
    
    % Folder selection
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Data Folder:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.9, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.folder_path_text = uicontrol('Parent', parent, ...
                                        'Style', 'text', ...
                                        'String', 'No folder selected', ...
                                        'Units', 'normalized', ...
                                        'Position', [0.05, 0.85, 0.7, 0.04], ...
                                        'HorizontalAlignment', 'left', ...
                                        'BackgroundColor', colors.panel, ...
                                        'ForegroundColor', colors.textLight);
    
    handles.browse_folder_button = uicontrol('Parent', parent, ...
                                            'Style', 'pushbutton', ...
                                            'String', 'Browse', ...
                                            'Units', 'normalized', ...
                                            'Position', [0.77, 0.85, 0.18, 0.04], ...
                                            'BackgroundColor', colors.secondary, ...
                                            'ForegroundColor', 'white', ...
                                            'Callback', @browseDataFolder);
    
    % File selection mode
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Selection Mode:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.75, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.selection_mode_group = uibuttongroup('Parent', parent, ...
                                                'Units', 'normalized', ...
                                                'Position', [0.05, 0.6, 0.9, 0.15], ...
                                                'BackgroundColor', colors.panel, ...
                                                'SelectionChangedFcn', @selectionModeChanged);
    
    handles.all_files_radio = uicontrol('Parent', handles.selection_mode_group, ...
                                       'Style', 'radiobutton', ...
                                       'String', 'All files in folder', ...
                                       'Units', 'normalized', ...
                                       'Position', [0.1, 0.6, 0.8, 0.3], ...
                                       'BackgroundColor', colors.panel);
    
    handles.select_files_radio = uicontrol('Parent', handles.selection_mode_group, ...
                                          'Style', 'radiobutton', ...
                                          'String', 'Select specific files', ...
                                          'Units', 'normalized', ...
                                          'Position', [0.1, 0.1, 0.8, 0.3], ...
                                          'BackgroundColor', colors.panel);
    
    % File list
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Selected Files:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.5, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.file_listbox = uicontrol('Parent', parent, ...
                                    'Style', 'listbox', ...
                                    'Units', 'normalized', ...
                                    'Position', [0.05, 0.1, 0.9, 0.4], ...
                                    'BackgroundColor', 'white', ...
                                    'Max', 2, ... % Allow multiple selection
                                    'Min', 0);
    
    % Set default selection
    set(handles.selection_mode_group, 'SelectedObject', handles.all_files_radio);
end

function handles = createProcessingOptionsContent(parent, handles)
    % Create processing options interface
    colors = handles.colors;
    
    % Export format selection
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Export Format:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.9, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.export_format_popup = uicontrol('Parent', parent, ...
                                           'Style', 'popupmenu', ...
                                           'String', {'CSV', 'Parquet', 'MAT', 'JSON'}, ...
                                           'Units', 'normalized', ...
                                           'Position', [0.05, 0.85, 0.9, 0.04], ...
                                           'BackgroundColor', 'white', ...
                                           'Value', 1);
    
    % Batch size selection
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Batch Size (trials per file):', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.75, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.batch_size_popup = uicontrol('Parent', parent, ...
                                        'Style', 'popupmenu', ...
                                        'String', {'10', '25', '50', '100', '250', '500'}, ...
                                        'Units', 'normalized', ...
                                        'Position', [0.05, 0.7, 0.9, 0.04], ...
                                        'BackgroundColor', 'white', ...
                                        'Value', 3); % Default to 50
    
    % Processing options
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Processing Options:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.6, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.generate_features_checkbox = uicontrol('Parent', parent, ...
                                                 'Style', 'checkbox', ...
                                                 'String', 'Generate feature list for ML', ...
                                                 'Units', 'normalized', ...
                                                 'Position', [0.05, 0.55, 0.9, 0.04], ...
                                                 'BackgroundColor', colors.panel, ...
                                                 'Value', 1);
    
    handles.compress_data_checkbox = uicontrol('Parent', parent, ...
                                              'Style', 'checkbox', ...
                                              'String', 'Compress output files', ...
                                              'Units', 'normalized', ...
                                              'Position', [0.05, 0.5, 0.9, 0.04], ...
                                              'BackgroundColor', colors.panel, ...
                                              'Value', 0);
    
    handles.include_metadata_checkbox = uicontrol('Parent', parent, ...
                                                 'Style', 'checkbox', ...
                                                 'String', 'Include metadata', ...
                                                 'Units', 'normalized', ...
                                                 'Position', [0.05, 0.45, 0.9, 0.04], ...
                                                 'BackgroundColor', colors.panel, ...
                                                 'Value', 1);
    
    % Output folder selection
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Output Folder:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.35, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.output_path_text = uicontrol('Parent', parent, ...
                                        'Style', 'text', ...
                                        'String', 'Auto-generated', ...
                                        'Units', 'normalized', ...
                                        'Position', [0.05, 0.3, 0.7, 0.04], ...
                                        'HorizontalAlignment', 'left', ...
                                        'BackgroundColor', colors.panel, ...
                                        'ForegroundColor', colors.textLight);
    
    handles.browse_output_button = uicontrol('Parent', parent, ...
                                            'Style', 'pushbutton', ...
                                            'String', 'Browse', ...
                                            'Units', 'normalized', ...
                                            'Position', [0.77, 0.3, 0.18, 0.04], ...
                                            'BackgroundColor', colors.secondary, ...
                                            'ForegroundColor', 'white', ...
                                            'Callback', @browseOutputFolderPostProcessing);
    
    % Start processing button
    handles.start_processing_button = uicontrol('Parent', parent, ...
                                               'Style', 'pushbutton', ...
                                               'String', 'Start Processing', ...
                                               'Units', 'normalized', ...
                                               'Position', [0.05, 0.15, 0.9, 0.08], ...
                                               'BackgroundColor', colors.success, ...
                                               'ForegroundColor', 'white', ...
                                               'FontWeight', 'bold', ...
                                               'FontSize', 12, ...
                                               'Callback', @startPostProcessing);
end

function handles = createProgressResultsContent(parent, handles)
    % Create progress and results interface
    colors = handles.colors;
    
    % Progress section
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Processing Progress:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.9, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.progress_text = uicontrol('Parent', parent, ...
                                     'Style', 'text', ...
                                     'String', 'Ready to process', ...
                                     'Units', 'normalized', ...
                                     'Position', [0.05, 0.85, 0.9, 0.04], ...
                                     'HorizontalAlignment', 'left', ...
                                     'BackgroundColor', colors.panel, ...
                                     'ForegroundColor', colors.textLight);
    
    handles.progress_bar = uicontrol('Parent', parent, ...
                                    'Style', 'text', ...
                                    'String', '', ...
                                    'Units', 'normalized', ...
                                    'Position', [0.05, 0.8, 0.9, 0.03], ...
                                    'BackgroundColor', colors.border, ...
                                    'ForegroundColor', colors.success);
    
    % Results section
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Processing Results:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.7, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.results_text = uicontrol('Parent', parent, ...
                                    'Style', 'text', ...
                                    'String', 'No results yet', ...
                                    'Units', 'normalized', ...
                                    'Position', [0.05, 0.65, 0.9, 0.04], ...
                                    'HorizontalAlignment', 'left', ...
                                    'BackgroundColor', colors.panel, ...
                                    'ForegroundColor', colors.textLight);
    
    % Log section
    uicontrol('Parent', parent, ...
              'Style', 'text', ...
              'String', 'Processing Log:', ...
              'Units', 'normalized', ...
              'Position', [0.05, 0.55, 0.9, 0.05], ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.log_text = uicontrol('Parent', parent, ...
                                'Style', 'listbox', ...
                                'Units', 'normalized', ...
                                'Position', [0.05, 0.1, 0.9, 0.45], ...
                                'BackgroundColor', 'white', ...
                                'FontName', 'Monospaced', ...
                                'FontSize', 9);
end

% Tab switching functions
function switchToGenerationTab(~, ~)
    handles = guidata(gcbf);
    handles.current_tab = 1;
    
    % Update tab appearances
    set(handles.generation_tab, 'BackgroundColor', handles.colors.tabActive, 'FontWeight', 'bold');
    set(handles.postprocessing_tab, 'BackgroundColor', handles.colors.tabInactive, 'FontWeight', 'normal');
    
    % Show/hide panels
    set(handles.generation_panel, 'Visible', 'on');
    set(handles.postprocessing_panel, 'Visible', 'off');
    
    guidata(handles.fig, handles);
end

function switchToPostProcessingTab(~, ~)
    handles = guidata(gcbf);
    handles.current_tab = 2;
    
    % Update tab appearances
    set(handles.generation_tab, 'BackgroundColor', handles.colors.tabInactive, 'FontWeight', 'normal');
    set(handles.postprocessing_tab, 'BackgroundColor', handles.colors.tabActive, 'FontWeight', 'bold');
    
    % Show/hide panels
    set(handles.generation_panel, 'Visible', 'off');
    set(handles.postprocessing_panel, 'Visible', 'on');
    
    guidata(handles.fig, handles);
end

% Enhanced control functions
function togglePlayPause(~, ~)
    handles = guidata(gcbf);
    
    if handles.is_paused
        % Resume from pause
        handles.is_paused = false;
        set(handles.play_pause_button, 'String', 'Pause', 'BackgroundColor', handles.colors.warning);
        % Resume processing logic here
        resumeFromPause(handles);
    else
        % Start or pause
        if ~handles.should_stop && ~isempty(handles.checkpoint_data)
            % Pause current operation
            handles.is_paused = true;
            set(handles.play_pause_button, 'String', 'Resume', 'BackgroundColor', handles.colors.success);
        else
            % Start new operation
            startGeneration([], [], handles.fig);
        end
    end
    
    guidata(handles.fig, handles);
end

function saveCheckpoint(~, ~)
    handles = guidata(gcbf);
    
    % Create checkpoint data
    checkpoint = struct();
    checkpoint.timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
    checkpoint.gui_state = handles;
    checkpoint.progress = getCurrentProgress(handles);
    
    % Save to file
    checkpoint_file = sprintf('checkpoint_%s.mat', checkpoint.timestamp);
    save(checkpoint_file, 'checkpoint');
    
    % Update GUI
    handles.checkpoint_data = checkpoint;
            set(handles.checkpoint_button, 'String', 'Saved', 'BackgroundColor', handles.colors.success);
    
    % Reset button after 2 seconds
    timer_obj = timer('ExecutionMode', 'singleShot', 'StartDelay', 2);
    timer_obj.TimerFcn = @(src, event) resetCheckpointButton(handles);
    start(timer_obj);
    
    guidata(handles.fig, handles);
end

function resetCheckpointButton(handles)
            set(handles.checkpoint_button, 'String', 'Checkpoint', 'BackgroundColor', handles.colors.warning);
end

function resumeFromPause(handles)
    % Resume processing from checkpoint
    if ~isempty(handles.checkpoint_data)
        % Restore state and continue processing
        % Implementation depends on specific processing logic
        updateProgressText(handles, 'Resuming from checkpoint...');
    end
end

function progress = getCurrentProgress(handles)
    % Get current progress state
    progress = struct();
    progress.current_trial = 0;
    progress.total_trials = 0;
    progress.current_step = '';
end

% Post-processing functions
function browseDataFolder(~, ~)
    handles = guidata(gcbf);
    
    folder_path = uigetdir('', 'Select Data Folder');
    if folder_path ~= 0
        handles.data_folder = folder_path;
        set(handles.folder_path_text, 'String', folder_path, 'ForegroundColor', handles.colors.text);
        
        % Update file list
        updateFileList(handles);
    end
    
    guidata(handles.fig, handles);
end

function browseOutputFolderPostProcessing(~, ~)
    handles = guidata(gcbf);
    
    folder_path = uigetdir('', 'Select Output Folder');
    if folder_path ~= 0
        handles.output_folder = folder_path;
        set(handles.output_path_text, 'String', folder_path, 'ForegroundColor', handles.colors.text);
    end
    
    guidata(handles.fig, handles);
end

function selectionModeChanged(~, event)
    handles = guidata(gcbf);
    
    if event.NewValue == handles.all_files_radio
        % Show all files in folder
        updateFileList(handles);
    else
        % Allow manual file selection
        selectSpecificFiles(handles);
    end
    
    guidata(handles.fig, handles);
end

function updateFileList(handles)
    if isfield(handles, 'data_folder') && exist(handles.data_folder, 'dir')
        % Get all .mat files in the folder
        files = dir(fullfile(handles.data_folder, '*.mat'));
        file_names = {files.name};
        
        set(handles.file_listbox, 'String', file_names);
        
        if get(handles.selection_mode_group, 'SelectedObject') == handles.all_files_radio
            set(handles.file_listbox, 'Value', 1:length(file_names));
        end
    end
end

function selectSpecificFiles(handles)
    [file_names, path] = uigetfile({'*.mat', 'MATLAB Data Files (*.mat)'}, ...
                                  'Select Files', handles.data_folder, 'MultiSelect', 'on');
    
    if iscell(file_names)
        set(handles.file_listbox, 'String', file_names);
        set(handles.file_listbox, 'Value', 1:length(file_names));
    elseif file_names ~= 0
        set(handles.file_listbox, 'String', {file_names});
        set(handles.file_listbox, 'Value', 1);
    end
end

function startPostProcessing(~, ~)
    handles = guidata(gcbf);
    
    % Get selected files
    file_list = get(handles.file_listbox, 'String');
    selected_indices = get(handles.file_listbox, 'Value');
    
    if isempty(file_list) || isempty(selected_indices)
        errordlg('Please select files to process.', 'No Files Selected');
        return;
    end
    
    selected_files = file_list(selected_indices);
    
    % Get processing options
    export_format = get(handles.export_format_popup, 'String');
    export_format = export_format{get(handles.export_format_popup, 'Value')};
    
    batch_size_str = get(handles.batch_size_popup, 'String');
    batch_size = str2double(batch_size_str{get(handles.batch_size_popup, 'Value')});
    
    generate_features = get(handles.generate_features_checkbox, 'Value');
    compress_data = get(handles.compress_data_checkbox, 'Value');
    include_metadata = get(handles.include_metadata_checkbox, 'Value');
    
    % Get output folder
    if isfield(handles, 'output_folder')
        output_folder = handles.output_folder;
    else
        output_folder = fullfile(handles.data_folder, 'processed_data');
        if ~exist(output_folder, 'dir')
            mkdir(output_folder);
        end
    end
    
    % Start processing in background
    processing_data = struct();
    processing_data.selected_files = selected_files;
    processing_data.data_folder = handles.data_folder;
    processing_data.output_folder = output_folder;
    processing_data.export_format = export_format;
    processing_data.batch_size = batch_size;
    processing_data.generate_features = generate_features;
    processing_data.compress_data = compress_data;
    processing_data.include_metadata = include_metadata;
    processing_data.handles = handles;
    
    % Start background processing
    startBackgroundProcessing(processing_data);
end

function startBackgroundProcessing(processing_data)
    % Start processing in a separate thread/background
    % This is a simplified version - in practice, you might want to use
    % parallel processing or a timer-based approach
    
    % Update GUI to show processing started
    handles = processing_data.handles;
    set(handles.progress_text, 'String', 'Processing started...', 'ForegroundColor', handles.colors.text);
    set(handles.start_processing_button, 'Enable', 'off');
    
    % Simulate processing (replace with actual processing logic)
    processFiles(processing_data);
end

function processFiles(processing_data)
    % Process files according to specifications
    handles = processing_data.handles;
    
    try
        total_files = length(processing_data.selected_files);
        batch_size = processing_data.batch_size;
        num_batches = ceil(total_files / batch_size);
        
        % Initialize feature list if requested
        if processing_data.generate_features
            feature_list = initializeFeatureList();
        end
        
        for batch_idx = 1:num_batches
            % Update progress
            progress_msg = sprintf('Processing batch %d/%d...', batch_idx, num_batches);
            set(handles.progress_text, 'String', progress_msg);
            
            % Calculate batch indices
            start_idx = (batch_idx - 1) * batch_size + 1;
            end_idx = min(batch_idx * batch_size, total_files);
            batch_files = processing_data.selected_files(start_idx:end_idx);
            
            % Process batch
            batch_data = processBatch(batch_files, processing_data);
            
            % Export batch
            exportBatch(batch_data, batch_idx, processing_data);
            
            % Update feature list
            if processing_data.generate_features
                feature_list = updateFeatureList(feature_list, batch_data);
            end
            
            % Update progress bar
            progress_ratio = batch_idx / num_batches;
            updateProgressBar(handles, progress_ratio);
            
            % Add to log
            addToLog(handles, sprintf('Completed batch %d/%d (%d files)', batch_idx, num_batches, length(batch_files)));
        end
        
        % Finalize processing
        if processing_data.generate_features
            exportFeatureList(feature_list, processing_data.output_folder);
        end
        
        % Update results
        set(handles.results_text, 'String', sprintf('Processing complete! %d files processed in %d batches.', total_files, num_batches));
        set(handles.progress_text, 'String', 'Processing complete');
        set(handles.start_processing_button, 'Enable', 'on');
        
        addToLog(handles, 'Processing completed successfully');
        
    catch ME
        % Handle errors
        set(handles.results_text, 'String', sprintf('Error: %s', ME.message));
        set(handles.progress_text, 'String', 'Processing failed');
        set(handles.start_processing_button, 'Enable', 'on');
        
        addToLog(handles, sprintf('ERROR: %s', ME.message));
    end
end

function batch_data = processBatch(batch_files, processing_data)
    % Process a batch of files
    batch_data = struct();
    batch_data.trials = cell(length(batch_files), 1);
    
    for i = 1:length(batch_files)
        file_path = fullfile(processing_data.data_folder, batch_files{i});
        
        try
            % Load data
            data = load(file_path);
            
            % Process data (simplified - replace with actual processing)
            processed_trial = processTrialData(data);
            
            batch_data.trials{i} = processed_trial;
            
        catch ME
            warning('Failed to process file %s: %s', batch_files{i}, ME.message);
        end
    end
    
    % Remove empty trials
    batch_data.trials = batch_data.trials(~cellfun(@isempty, batch_data.trials));
end

function processed_trial = processTrialData(data)
    % Process individual trial data
    % This is a placeholder - implement actual data processing logic
    processed_trial = data;
end

function exportBatch(batch_data, batch_idx, processing_data)
    % Export batch data in specified format
    output_file = fullfile(processing_data.output_folder, ...
                          sprintf('batch_%03d.%s', batch_idx, lower(processing_data.export_format)));
    
    switch lower(processing_data.export_format)
        case 'csv'
            exportToCSV(batch_data, output_file);
        case 'parquet'
            exportToParquet(batch_data, output_file);
        case 'mat'
            exportToMAT(batch_data, output_file);
        case 'json'
            exportToJSON(batch_data, output_file);
    end
end

function exportToCSV(batch_data, output_file)
    % Export to CSV format
    % Implementation depends on data structure
    warning('CSV export not yet implemented');
end

function exportToParquet(batch_data, output_file)
    % Export to Parquet format
    % Implementation depends on data structure
    warning('Parquet export not yet implemented');
end

function exportToMAT(batch_data, output_file)
    % Export to MAT format
    save(output_file, '-struct', 'batch_data');
end

function exportToJSON(batch_data, output_file)
    % Export to JSON format
    % Implementation depends on data structure
    warning('JSON export not yet implemented');
end

function feature_list = initializeFeatureList()
    % Initialize feature list for machine learning
    feature_list = struct();
    feature_list.features = {};
    feature_list.descriptions = {};
    feature_list.units = {};
    feature_list.ranges = {};
    feature_list.categories = {};
end

function feature_list = updateFeatureList(feature_list, batch_data)
    % Update feature list with new data
    % This is a placeholder - implement actual feature extraction
end

function exportFeatureList(feature_list, output_folder)
    % Export feature list for Python/ML use
    feature_file = fullfile(output_folder, 'feature_list.json');
    
    % Convert to JSON-compatible format
    feature_data = struct();
    feature_data.features = feature_list.features;
    feature_data.descriptions = feature_list.descriptions;
    feature_data.units = feature_list.units;
    feature_data.ranges = feature_list.ranges;
    feature_data.categories = feature_list.categories;
    
    % Write to JSON file
    feature_json = jsonencode(feature_data, 'PrettyPrint', true);
    fid = fopen(feature_file, 'w');
    fprintf(fid, '%s', feature_json);
    fclose(fid);
end

function updateProgressBar(handles, ratio)
    % Update progress bar
    bar_width = ratio * 0.9;
    set(handles.progress_bar, 'Position', [0.05, 0.8, bar_width, 0.03]);
end

function addToLog(handles, message)
    % Add message to log
    current_log = get(handles.log_text, 'String');
    if ischar(current_log)
        current_log = {current_log};
    end
    
    timestamp = datestr(now, 'HH:MM:SS');
    new_entry = sprintf('[%s] %s', timestamp, message);
    
    updated_log = [current_log; {new_entry}];
    
    % Keep only last 100 entries
    if length(updated_log) > 100
        updated_log = updated_log(end-99:end);
    end
    
    set(handles.log_text, 'String', updated_log);
    set(handles.log_text, 'Value', length(updated_log));
    drawnow;
end

function updateProgressText(handles, message)
    % Update progress text
    set(handles.progress_text, 'String', message);
    drawnow;
end

% Include all the existing functions from the original Data_GUI.m
% (These would be copied from the original file)

% Essential functions from original Data_GUI.m
function handles = loadUserPreferences(handles)
    % Load user preferences
    try
        if exist('user_preferences.mat', 'file')
            prefs = load('user_preferences.mat');
            handles.preferences = prefs.preferences;
        end
    catch
        handles.preferences = struct();
    end
end

function applyUserPreferences(handles)
    % Apply user preferences to UI
    % This is a simplified version - implement as needed
end

function closeGUICallback(~, ~)
    % Close GUI callback
    delete(gcf);
end

function startGeneration(~, ~, fig)
    % Start generation
    handles = guidata(fig);
    handles.should_stop = false;
    guidata(fig, handles);
    
    % Update button states
            set(handles.play_pause_button, 'String', 'Pause', 'BackgroundColor', handles.colors.warning);
    
    % Start processing logic here
    fprintf('Starting data generation...\n');
end

function stopGeneration(~, ~)
    % Stop generation
    handles = guidata(gcbf);
    handles.should_stop = true;
    guidata(handles.fig, handles);
    
    % Update button states
            set(handles.play_pause_button, 'String', 'Start', 'BackgroundColor', handles.colors.success);
    
    fprintf('Stopping data generation...\n');
end

function saveConfiguration(~, ~)
    % Save configuration
    handles = guidata(gcbf);
    
    [filename, pathname] = uiputfile('*.mat', 'Save Configuration');
    if filename ~= 0
        config = struct();
        config.timestamp = datestr(now);
        config.handles = handles;
        save(fullfile(pathname, filename), 'config');
        fprintf('Configuration saved to %s\n', fullfile(pathname, filename));
    end
end

function loadConfiguration(~, ~)
    % Load configuration
    handles = guidata(gcbf);
    
    [filename, pathname] = uigetfile('*.mat', 'Load Configuration');
    if filename ~= 0
        try
            config = load(fullfile(pathname, filename));
            fprintf('Configuration loaded from %s\n', fullfile(pathname, filename));
        catch ME
            errordlg(sprintf('Error loading configuration: %s', ME.message), 'Load Error');
        end
    end
end



% Panel creation functions
function handles = createTrialAndDataPanel(parent, handles, yPos, height)
    % Configuration panel
    colors = handles.colors;
    
    panel = uipanel('Parent', parent, ...
                   'Title', 'Configuration', ...
                   'FontSize', 10, ...
                   'FontWeight', 'normal', ...
                   'Units', 'normalized', ...
                   'Position', [0.01, yPos, 0.98, height], ...
                   'BackgroundColor', colors.panel, ...
                   'ForegroundColor', colors.text);
    
    % Layout
    rowHeight = 0.030;  % Slightly smaller to fit more elements
    labelWidth = 0.22;
    fieldSpacing = 0.02;
    textBoxStart = 0.20;  % Move text boxes slightly to the right to avoid cutting off titles
    textBoxWidth = 0.48;  % Consistent width
    y = 0.95;  % Start higher to fit more elements
    
    % Input File
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Input File:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'FontWeight', 'normal', ...
              'BackgroundColor', colors.panel);
    
    handles.input_file_edit = uicontrol('Parent', panel, ...
                                       'Style', 'edit', ...
                                       'String', 'No file selected', ...
                                       'Units', 'normalized', ...
                                       'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                       'Enable', 'inactive', ...
                                       'BackgroundColor', [0.97, 0.97, 0.97], ...
                                       'FontSize', 9);
    
    handles.browse_input_btn = uicontrol('Parent', panel, ...
                                        'Style', 'pushbutton', ...
                                        'String', 'Browse', ...
                                        'Units', 'normalized', ...
                                        'Position', [0.72, y, 0.12, rowHeight], ...
                                        'BackgroundColor', colors.secondary, ...
                                        'ForegroundColor', 'white', ...
                                        'Callback', @browseInputFile);
    
    % Simulink Model
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Simulink Model:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.model_display = uicontrol('Parent', panel, ...
                                     'Style', 'edit', ...
                                     'String', 'GolfSwing3D_Kinetic', ...
                                     'Units', 'normalized', ...
                                     'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                     'Enable', 'inactive', ...
                                     'BackgroundColor', [0.97, 0.97, 0.97], ...
                                     'FontSize', 9);
    
    handles.model_browse_btn = uicontrol('Parent', panel, ...
                                        'Style', 'pushbutton', ...
                                        'String', 'Browse', ...
                                        'Units', 'normalized', ...
                                        'Position', [0.72, y, 0.12, rowHeight], ...
                                        'BackgroundColor', colors.secondary, ...
                                        'ForegroundColor', 'white', ...
                                        'Callback', @selectSimulinkModel);
    
    % Output Folder
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Output Folder:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.output_folder_edit = uicontrol('Parent', panel, ...
                                          'Style', 'edit', ...
                                          'String', pwd, ...
                                          'Units', 'normalized', ...
                                          'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                          'BackgroundColor', 'white', ...
                                          'FontSize', 9);
    
    handles.browse_button = uicontrol('Parent', panel, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Browse', ...
                                     'Units', 'normalized', ...
                                     'Position', [0.72, y, 0.12, rowHeight], ...
                                     'BackgroundColor', colors.secondary, ...
                                     'ForegroundColor', 'white', ...
                                     'Callback', @browseOutputFolder);
    
    % Dataset Name
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Dataset Name:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.folder_name_edit = uicontrol('Parent', panel, ...
                                        'Style', 'edit', ...
                                        'String', sprintf('golf_swing_dataset_%s', datestr(now, 'yyyymmdd')), ...
                                        'Units', 'normalized', ...
                                        'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                        'BackgroundColor', 'white', ...
                                        'FontSize', 9);
    
    % Output Format
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Output Format:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.format_popup = uicontrol('Parent', panel, ...
                                    'Style', 'popupmenu', ...
                                    'String', {'CSV Files', 'MAT Files', 'Both CSV and MAT'}, ...
                                    'Units', 'normalized', ...
                                    'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                    'BackgroundColor', 'white');
    
    % Execution Mode
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Execution Mode:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    % Check if parallel computing toolbox is available
    if license('test', 'Distrib_Computing_Toolbox')
        mode_options = {'Series', 'Parallel'};
    else
        mode_options = {'Series', 'Parallel (Toolbox Required)'};
    end
    
    handles.execution_mode_popup = uicontrol('Parent', panel, ...
                                            'Style', 'popupmenu', ...
                                            'String', mode_options, ...
                                            'Units', 'normalized', ...
                                            'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                            'BackgroundColor', 'white', ...
                                            'Callback', @autoUpdateSummary);
    
    % Verbosity
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Verbosity:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.verbosity_popup = uicontrol('Parent', panel, ...
                                       'Style', 'popupmenu', ...
                                       'String', {'Minimal', 'Standard', 'Detailed', 'Debug'}, ...
                                       'Units', 'normalized', ...
                                       'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                       'BackgroundColor', 'white');
    
    % Trial Parameters
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Trials:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.num_trials_edit = uicontrol('Parent', panel, ...
                                       'Style', 'edit', ...
                                       'String', '10', ...
                                       'Units', 'normalized', ...
                                       'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                       'BackgroundColor', 'white', ...
                                       'HorizontalAlignment', 'center', ...
                                       'Callback', @updateCoefficientsPreview);
    
    % Duration
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Duration (s):', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.sim_time_edit = uicontrol('Parent', panel, ...
                                     'Style', 'edit', ...
                                     'String', '0.3', ...
                                     'Units', 'normalized', ...
                                     'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                     'BackgroundColor', 'white', ...
                                     'HorizontalAlignment', 'center', ...
                                     'Callback', @autoUpdateSummary);
    
    % Sample Rate
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Sample Rate (Hz):', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.sample_rate_edit = uicontrol('Parent', panel, ...
                                        'Style', 'edit', ...
                                        'String', '100', ...
                                        'Units', 'normalized', ...
                                        'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                        'BackgroundColor', 'white', ...
                                        'HorizontalAlignment', 'center', ...
                                        'Callback', @autoUpdateSummary);
    
    % Torque Scenario
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Torque Scenario:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.torque_scenario_popup = uicontrol('Parent', panel, ...
                                             'Style', 'popupmenu', ...
                                             'String', {'Variable Torques', 'Zero Torque', 'Constant Torque'}, ...
                                             'Units', 'normalized', ...
                                             'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                             'BackgroundColor', 'white', ...
                                             'Callback', @torqueScenarioCallback);
    
    % Coefficient Range
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Coefficient Range (±):', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, labelWidth, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.coeff_range_edit = uicontrol('Parent', panel, ...
                                        'Style', 'edit', ...
                                        'String', '50', ...
                                        'Units', 'normalized', ...
                                        'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                        'BackgroundColor', 'white', ...
                                        'HorizontalAlignment', 'center', ...
                                        'Callback', @updateCoefficientsPreview);
    
    % Data Sources
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Data Sources:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.15, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    % First row of checkboxes
    handles.use_signal_bus = uicontrol('Parent', panel, ...
                                      'Style', 'checkbox', ...
                                      'String', 'CombinedSignalBus', ...
                                      'Units', 'normalized', ...
                                      'Position', [textBoxStart, y, 0.30, rowHeight], ...
                                      'Value', 1, ...
                                      'BackgroundColor', colors.panel);
    
    handles.use_logsout = uicontrol('Parent', panel, ...
                                   'Style', 'checkbox', ...
                                   'String', 'Logsout Dataset', ...
                                   'Units', 'normalized', ...
                                   'Position', [textBoxStart + 0.24, y, 0.30, rowHeight], ...
                                   'Value', 1, ...
                                   'BackgroundColor', colors.panel);
    
    % Second row of checkboxes
    y = y - 0.025;
    handles.use_simscape = uicontrol('Parent', panel, ...
                                    'Style', 'checkbox', ...
                                    'String', 'Simscape Results', ...
                                    'Units', 'normalized', ...
                                    'Position', [textBoxStart, y, 0.30, rowHeight], ...
                                    'Value', 1, ...
                                    'BackgroundColor', colors.panel);
    
    handles.capture_workspace_checkbox = uicontrol('Parent', panel, ...
                                                  'Style', 'checkbox', ...
                                                  'String', 'Model Workspace', ...
                                                  'Value', 1, ... % Default to checked
                                                  'Units', 'normalized', ...
                                                  'Position', [textBoxStart + 0.24, y, 0.30, rowHeight], ...
                                                  'BackgroundColor', colors.panel, ...
                                                  'ForegroundColor', colors.text, ...
                                                  'FontSize', 9, ...
                                                  'TooltipString', 'Include model workspace variables (segment lengths, masses, inertias, etc.) in the output dataset');
    
    % Animation and Monitoring Options
    y = y - 0.05;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Options:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.15, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    % First row of options
    handles.enable_animation = uicontrol('Parent', panel, ...
                                        'Style', 'checkbox', ...
                                        'String', 'Animation', ...
                                        'Units', 'normalized', ...
                                        'Position', [textBoxStart, y, 0.30, rowHeight], ...
                                        'Value', 0, ...
                                        'BackgroundColor', colors.panel);
    
    handles.enable_performance_monitoring = uicontrol('Parent', panel, ...
                                                     'Style', 'checkbox', ...
                                                     'String', 'Performance Monitoring', ...
                                                     'Value', 1, ...
                                                     'Units', 'normalized', ...
                                                     'Position', [textBoxStart + 0.24, y, 0.30, rowHeight], ...
                                                     'BackgroundColor', colors.panel, ...
                                                     'ForegroundColor', colors.text, ...
                                                     'FontSize', 9, ...
                                                     'TooltipString', 'Track execution times, memory usage, and performance metrics');
    
    % Second row of options
    y = y - 0.025;
    handles.enable_memory_monitoring = uicontrol('Parent', panel, ...
                                                'Style', 'checkbox', ...
                                                'String', 'Memory Monitoring', ...
                                                'Value', 1, ...
                                                'Units', 'normalized', ...
                                                'Position', [textBoxStart, y, 0.30, rowHeight], ...
                                                'BackgroundColor', colors.panel, ...
                                                'ForegroundColor', colors.text, ...
                                                'FontSize', 9, ...
                                                'TooltipString', 'Monitor system memory and automatically manage parallel workers');
    
    % Third row of options - Checkpoint Resume
    y = y - 0.025;
    handles.enable_checkpoint_resume = uicontrol('Parent', panel, ...
                                                'Style', 'checkbox', ...
                                                'String', 'Resume from checkpoint', ...
                                                'Value', 0, ...
                                                'Units', 'normalized', ...
                                                'Position', [textBoxStart, y, 0.30, rowHeight], ...
                                                'BackgroundColor', colors.panel, ...
                                                'ForegroundColor', colors.text, ...
                                                'FontSize', 9, ...
                                                'TooltipString', 'When checked, resume from existing checkpoint. When unchecked, always start fresh.');
    
    % Clear Checkpoints Button
    handles.clear_checkpoint_button = uicontrol('Parent', panel, ...
                                              'Style', 'pushbutton', ...
                                              'String', 'Clear Checkpoints', ...
                                              'Units', 'normalized', ...
                                              'Position', [textBoxStart + 0.24, y, 0.20, rowHeight], ...
                                              'BackgroundColor', colors.danger, ...
                                              'ForegroundColor', 'white', ...
                                              'FontSize', 9, ...
                                              'Callback', @clearAllCheckpoints, ...
                                              'TooltipString', 'Delete all checkpoint files to force fresh start');
    
    % Batch Settings Section - Moved to more visible position
    y = y - 0.04;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Batch Size:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.15, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel, ...
              'FontWeight', 'bold');  % Make it bold to be more visible
    
    handles.batch_size_edit = uicontrol('Parent', panel, ...
                                       'Style', 'edit', ...
                                       'String', '50', ...
                                       'Units', 'normalized', ...
                                       'Position', [textBoxStart, y, 0.15, rowHeight], ...
                                       'BackgroundColor', 'white', ...
                                       'HorizontalAlignment', 'center', ...
                                       'FontSize', 9, ...
                                       'TooltipString', 'Number of simulations to process in each batch (recommended: 25-100)');
    
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'trials', ...
              'Units', 'normalized', ...
              'Position', [textBoxStart + 0.16, y, 0.08, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel, ...
              'FontSize', 9);
    
    % Save Interval
    y = y - 0.04;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Save Interval:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.15, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel, ...
              'FontWeight', 'bold');  % Make it bold to be more visible
    
    handles.save_interval_edit = uicontrol('Parent', panel, ...
                                          'Style', 'edit', ...
                                          'String', '25', ...
                                          'Units', 'normalized', ...
                                          'Position', [textBoxStart, y, 0.15, rowHeight], ...
                                          'BackgroundColor', 'white', ...
                                          'HorizontalAlignment', 'center', ...
                                          'FontSize', 9, ...
                                          'TooltipString', 'Save checkpoint every N batches (recommended: 10-50)');
    
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'batches', ...
              'Units', 'normalized', ...
              'Position', [textBoxStart + 0.16, y, 0.08, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel, ...
              'FontSize', 9);
    
    % Progress Section
    y = y - 0.04;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Progress:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.15, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.progress_text = uicontrol('Parent', panel, ...
                                     'Style', 'edit', ...
                                     'String', 'Ready to start generation...', ...
                                     'Units', 'normalized', ...
                                     'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                     'FontWeight', 'normal', ...
                                     'FontSize', 9, ...
                                     'HorizontalAlignment', 'left', ...
                                     'BackgroundColor', colors.panel, ...
                                     'Max', 2, ... % Allow multiple lines
                                     'Min', 0, ... % Allow selection
                                     'Enable', 'inactive'); % Read-only but selectable
    
    % Status Section
    y = y - 0.04;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Status:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.15, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.status_text = uicontrol('Parent', panel, ...
                                   'Style', 'edit', ...
                                   'String', 'Status: Ready', ...
                                   'Units', 'normalized', ...
                                   'Position', [textBoxStart, y, textBoxWidth, rowHeight], ...
                                   'HorizontalAlignment', 'left', ...
                                   'BackgroundColor', [0.97, 0.97, 0.97], ...
                                   'ForegroundColor', colors.success, ...
                                   'FontSize', 9, ...
                                   'Max', 2, ... % Allow multiple lines
                                   'Min', 0, ... % Allow selection
                                   'Enable', 'inactive'); % Read-only but selectable
    
    % Initialize
    handles.model_name = 'GolfSwing3D_Kinetic';
    handles.model_path = '';
    handles.selected_input_file = '';
    
    % Try to find default model in multiple locations
    possible_paths = {
        'Model/GolfSwing3D_Kinetic.slx',
        'GolfSwing3D_Kinetic.slx',
        fullfile(pwd, 'Model', 'GolfSwing3D_Kinetic.slx'),
        fullfile(pwd, 'GolfSwing3D_Kinetic.slx'),
        which('GolfSwing3D_Kinetic.slx'),
        which('GolfSwing3D_Kinetic')
    };
    
    for i = 1:length(possible_paths)
        if ~isempty(possible_paths{i}) && exist(possible_paths{i}, 'file')
            handles.model_path = possible_paths{i};
            fprintf('Found model at: %s\n', handles.model_path);
            break;
        end
    end
    
    if isempty(handles.model_path)
        fprintf('Warning: Could not find model file automatically\n');
    end
end

function handles = createPreviewPanel(parent, handles, yPos, height)
    % Parameters Summary Panel
    colors = handles.colors;
    
    panel = uipanel('Parent', parent, ...
                   'Title', 'Summary', ...
                   'FontSize', 10, ...
                   'FontWeight', 'normal', ...
                   'Units', 'normalized', ...
                   'Position', [0.01, yPos, 0.98, height], ...
                   'BackgroundColor', colors.panel, ...
                   'ForegroundColor', colors.text);
    
    % Summary table (full height since no button needed)
    handles.preview_table = uitable('Parent', panel, ...
                                   'Units', 'normalized', ...
                                   'Position', [0.02, 0.02, 0.96, 0.96], ...
                                   'ColumnName', {'Parameter', 'Value', 'Description'}, ...
                                   'ColumnWidth', {150, 150, 'auto'}, ...
                                   'RowStriping', 'on', ...
                                   'FontSize', 9);
end

function handles = createJointEditorPanel(parent, handles, yPos, height)
    % Joint Editor Panel
    colors = handles.colors;
    param_info = getPolynomialParameterInfo();
    
    panel = uipanel('Parent', parent, ...
                   'Title', 'Joint Coefficient Editor', ...
                   'FontSize', 10, ...
                   'FontWeight', 'normal', ...
                   'Units', 'normalized', ...
                   'Position', [0.01, yPos, 0.98, height], ...
                   'BackgroundColor', colors.panel, ...
                   'ForegroundColor', colors.text);
    
    % Selection row - leave more room for the panel title
    y = 0.75;  % Moved down to give more space at top
    rowHeight = 0.156;  % Increased by 30% (0.12 * 1.3) to prevent dropdown cutoff
    
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Joint:', ...
              'Units', 'normalized', ...
              'Position', [0.02, y, 0.08, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.joint_selector = uicontrol('Parent', panel, ...
                                      'Style', 'popupmenu', ...
                                      'String', param_info.joint_names, ...
                                      'Units', 'normalized', ...
                                      'Position', [0.10, y+0.10, 0.35, 0.08], ...
                                      'BackgroundColor', 'white', ...
                                      'Callback', @updateJointCoefficients);
    
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Apply to:', ...
              'Units', 'normalized', ...
              'Position', [0.48, y, 0.10, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.trial_selection_popup = uicontrol('Parent', panel, ...
                                             'Style', 'popupmenu', ...
                                             'String', {'All Trials', 'Specific Trial'}, ...
                                             'Units', 'normalized', ...
                                             'Position', [0.58, y+0.10, 0.20, 0.08], ...
                                             'BackgroundColor', 'white', ...
                                             'Callback', @updateTrialSelectionMode);
    
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Trial:', ...
              'Units', 'normalized', ...
              'Position', [0.80, y, 0.06, rowHeight], ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', colors.panel);
    
    handles.trial_number_edit = uicontrol('Parent', panel, ...
                                         'Style', 'edit', ...
                                         'String', '1', ...
                                         'Units', 'normalized', ...
                                         'Position', [0.87, y+0.10, 0.08, 0.08], ...
                                         'BackgroundColor', 'white', ...
                                         'HorizontalAlignment', 'center', ...
                                         'Enable', 'off');
    
    % Coefficient labels row
    y = y - 0.15;  % Reduced spacing to move row up
    coeff_labels = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
    coeff_powers = {'t⁶', 't⁵', 't⁴', 't³', 't²', 't', '1'};  % Powers for each coefficient
    handles.joint_coeff_edits = gobjects(1, 7);
    
    coeffWidth = 0.12;
    coeffSpacing = (0.96 - 7*coeffWidth) / 8;
    
    for i = 1:7
        xPos = coeffSpacing + (i-1) * (coeffWidth + coeffSpacing);
        
        % Color code G coefficient (constant term)
        if i == 7
            labelColor = colors.success;  % Highlight G as constant
        else
            labelColor = colors.text;
        end
        
        % Coefficient label with power
        uicontrol('Parent', panel, ...
                  'Style', 'text', ...
                  'String', [coeff_labels{i} ' (' coeff_powers{i} ')'], ...
                  'Units', 'normalized', ...
                  'Position', [xPos, y, coeffWidth, 0.086], ...  % Increased by 30%
                  'FontWeight', 'normal', ...
                  'FontSize', 9, ...
                  'ForegroundColor', labelColor, ...
                  'BackgroundColor', colors.panel, ...
                  'HorizontalAlignment', 'center');
    end
    
    % Coefficient text boxes row
    y = y - 0.10;  % Reduced spacing between labels and text boxes
    
    for i = 1:7
        xPos = coeffSpacing + (i-1) * (coeffWidth + coeffSpacing);
        
        handles.joint_coeff_edits(i) = uicontrol('Parent', panel, ...
                                                'Style', 'edit', ...
                                                'String', '0.00', ...
                                                'Units', 'normalized', ...
                                                'Position', [xPos, y, coeffWidth, 0.088], ...  % Increased by 10%
                                                'BackgroundColor', 'white', ...
                                                'HorizontalAlignment', 'center', ...
                                                'Callback', @validateCoefficientInput);
    end
    
    % Action buttons row
    y = y - 0.195;  % Increased by 30%
    
    % Action buttons
    buttonHeight = 0.097;  % Increased by 10% (0.088 * 1.1 = 0.097)
    
    handles.apply_joint_button = uicontrol('Parent', panel, ...
                                          'Style', 'pushbutton', ...
                                          'String', 'Apply to Table', ...
                                          'Units', 'normalized', ...
                                          'Position', [0.02, y, 0.22, buttonHeight], ...
                                          'BackgroundColor', colors.success, ...
                                          'ForegroundColor', 'white', ...
                                          'Callback', @applyJointToTable);
    
    handles.load_joint_button = uicontrol('Parent', panel, ...
                                         'Style', 'pushbutton', ...
                                         'String', 'Load from Table', ...
                                         'Units', 'normalized', ...
                                         'Position', [0.26, y, 0.22, buttonHeight], ...
                                         'BackgroundColor', colors.warning, ...
                                         'ForegroundColor', 'white', ...
                                         'Callback', @loadJointFromTable);
    
    % Status
    handles.joint_status = uicontrol('Parent', panel, ...
                                    'Style', 'text', ...
                                    'String', sprintf('Ready - %s selected', param_info.joint_names{1}), ...
                                    'Units', 'normalized', ...
                                    'Position', [0.50, y, 0.48, buttonHeight], ...
                                    'HorizontalAlignment', 'center', ...
                                    'BackgroundColor', [0.97, 0.97, 0.97], ...
                                    'ForegroundColor', colors.textLight, ...
                                    'FontSize', 9);
    
    % Equation display row
    y = y - 0.195;  % Increased by 30%
    handles.equation_display = uicontrol('Parent', panel, ...
                                       'Style', 'text', ...
                                       'String', 'τ(t) = At⁶ + Bt⁵ + Ct⁴ + Dt³ + Et² + Ft + G', ...
                                       'Units', 'normalized', ...
                                       'Position', [0.02, y, 0.96, 0.114], ...  % Increased by 30%
                                       'FontSize', 11, ...
                                       'FontWeight', 'normal', ...
                                       'ForegroundColor', colors.primary, ...
                                       'BackgroundColor', [0.98, 0.98, 1], ...
                                       'HorizontalAlignment', 'center');
    
    handles.param_info = param_info;
end

function handles = createCoefficientsPanel(parent, handles, yPos, height)
    % Coefficients Table Panel
    colors = handles.colors;
    param_info = getPolynomialParameterInfo();
    
    panel = uipanel('Parent', parent, ...
                   'Title', 'Coefficients Table', ...
                   'FontSize', 10, ...
                   'FontWeight', 'normal', ...
                   'Units', 'normalized', ...
                   'Position', [0.01, yPos, 0.98, height], ...
                   'BackgroundColor', colors.panel, ...
                   'ForegroundColor', colors.text);
    
    % Search bar
    searchY = 0.88;
    uicontrol('Parent', panel, ...
              'Style', 'text', ...
              'String', 'Search:', ...
              'Units', 'normalized', ...
              'Position', [0.02, searchY, 0.08, 0.10], ...
              'BackgroundColor', colors.panel);
    
    handles.search_edit = uicontrol('Parent', panel, ...
                                   'Style', 'edit', ...
                                   'String', '', ...
                                   'Units', 'normalized', ...
                                   'Position', [0.11, searchY, 0.20, 0.10], ...
                                   'BackgroundColor', 'white', ...
                                   'FontSize', 9, ...
                                   'Callback', @searchCoefficients);
    
    handles.clear_search_button = uicontrol('Parent', panel, ...
                                           'Style', 'pushbutton', ...
                                           'String', 'Clear', ...
                                           'Units', 'normalized', ...
                                           'Position', [0.32, searchY, 0.08, 0.10], ...
                                           'BackgroundColor', colors.danger, ...
                                           'ForegroundColor', 'white', ...
                                           'Callback', @clearSearch);
    
    % Control buttons
    buttonY = 0.76;
    buttonHeight = 0.09;
    buttonWidth = 0.13;
    buttonSpacing = 0.01;
    
    % Button configuration
    buttons = {
        {'Reset', 'reset_coeffs', colors.danger, @resetCoefficientsToGenerated},
        {'Apply Row', 'apply_row', colors.primary, @applyRowToAll},
        {'Export', 'export', colors.success, @exportCoefficientsToCSV},
        {'Import', 'import', colors.warning, @importCoefficientsFromCSV},
        {'Save Set', 'save_scenario', colors.secondary, @saveScenario},
        {'Load Set', 'load_scenario', colors.secondary, @loadScenario}
    };
    
    for i = 1:length(buttons)
        xPos = 0.02 + (i-1) * (buttonWidth + buttonSpacing);
        btn_name = [buttons{i}{2} '_button'];
        handles.(btn_name) = uicontrol('Parent', panel, ...
                                      'Style', 'pushbutton', ...
                                      'String', buttons{i}{1}, ...
                                      'Units', 'normalized', ...
                                      'Position', [xPos, buttonY, buttonWidth, buttonHeight], ...
                                      'BackgroundColor', buttons{i}{3}, ...
                                      'ForegroundColor', 'white', ...
                                      'Callback', buttons{i}{4});
    end
    
    % Coefficients table
    col_names = {'Trial'};
    col_widths = {50};
    col_editable = false;
    
    % Add columns for joints
    for i = 1:length(param_info.joint_names)
        joint_name = param_info.joint_names{i};
        coeffs = param_info.joint_coeffs{i};
        short_name = getShortenedJointName(joint_name);
        
        for j = 1:length(coeffs)
            coeff = coeffs(j);
            col_names{end+1} = sprintf('%s_%s', short_name, coeff);
            col_widths{end+1} = 55;
            col_editable(end+1) = true;
        end
    end
    
    handles.coefficients_table = uitable('Parent', panel, ...
                                        'Units', 'normalized', ...
                                        'Position', [0.02, 0.05, 0.96, 0.80], ...
                                        'ColumnName', col_names, ...
                                        'ColumnWidth', col_widths, ...
                                        'RowStriping', 'on', ...
                                        'ColumnEditable', col_editable, ...
                                        'FontSize', 8, ...
                                        'CellEditCallback', @coefficientCellEditCallback);
    
    % Initialize tracking
    handles.edited_cells = {};
    handles.param_info = param_info;
end

% Additional callback functions
function browseInputFile(~, ~)
    handles = guidata(gcbf);
    
    [filename, pathname] = uigetfile('*.mat', 'Select Input File');
    if filename ~= 0
        set(handles.input_file_edit, 'String', fullfile(pathname, filename));
    end
end

function autoUpdateSummary(~, ~, fig)
    if nargin < 3 || isempty(fig)
        fig = gcbf;
    end
    handles = guidata(fig);
    
    % Update both summary and coefficients preview
    updatePreview([], [], fig);
    updateCoefficientsPreview([], [], fig);
end

function torqueScenarioCallback(src, ~)
    handles = guidata(gcbf);
    scenario_idx = get(src, 'Value');
    
    % Enable/disable controls
    switch scenario_idx
        case 1 % Variable Torques
            set(handles.coeff_range_edit, 'Enable', 'on');
        case 2 % Zero Torque
            set(handles.coeff_range_edit, 'Enable', 'off');
        case 3 % Constant Torque
            set(handles.coeff_range_edit, 'Enable', 'off');
    end
    
    autoUpdateSummary([], [], gcbf);
    guidata(handles.fig, handles);
end

function browseOutputFolder(src, ~)
    handles = guidata(gcbf);
    folder = uigetdir(get(handles.output_folder_edit, 'String'), 'Select Output Folder');
    if folder ~= 0
        set(handles.output_folder_edit, 'String', folder);
        autoUpdateSummary([], [], gcbf);
        guidata(handles.fig, handles);
        saveUserPreferences(handles);
    end
end

function updatePreview(~, ~, fig)
    if nargin < 3 || isempty(fig)
        fig = gcbf;
    end
    handles = guidata(fig);
    
    try
        % Get current settings
        num_trials = str2double(get(handles.num_trials_edit, 'String'));
        sim_time = str2double(get(handles.sim_time_edit, 'String'));
        sample_rate = str2double(get(handles.sample_rate_edit, 'String'));
        scenario_idx = get(handles.torque_scenario_popup, 'Value');
        
        % Create preview data
        scenarios = {'Variable Torques', 'Zero Torque', 'Constant Torque'};
        preview_data = {
            'Number of Trials', num2str(num_trials), 'Total simulation runs';
            'Simulation Time', [num2str(sim_time) ' s'], 'Duration per trial';
            'Sample Rate', [num2str(sample_rate) ' Hz'], 'Data sampling frequency';
            'Data Points', num2str(round(sim_time * sample_rate)), 'Per trial time series';
            'Torque Scenario', scenarios{scenario_idx}, 'Coefficient generation method';
        };
        
        % Add scenario-specific info
        if scenario_idx == 1
            coeff_range = str2double(get(handles.coeff_range_edit, 'String'));
            preview_data = [preview_data; {
                'Coefficient Range', ['±' num2str(coeff_range)], 'Random variation bounds'
            }];
        elseif scenario_idx == 3
            constant_value = 10.0; % Default constant value
            preview_data = [preview_data; {
                'Constant Value', num2str(constant_value), 'G coefficient value'
            }];
        end
        
        % Add data sampling info
        expected_points = round(sim_time * sample_rate);
        preview_data = [preview_data; {
            'Expected Data Points', num2str(expected_points), 'Per trial after resampling'
        }];
        
        % Add output info
        output_folder = get(handles.output_folder_edit, 'String');
        folder_name = get(handles.folder_name_edit, 'String');
        preview_data = [preview_data; {
            'Output Location', fullfile(output_folder, folder_name), 'File destination'
        }];
        
        set(handles.preview_table, 'Data', preview_data);
        
    catch ME
        error_data = {'Error', 'Check inputs', ME.message};
        set(handles.preview_table, 'Data', error_data);
    end
end

function updateCoefficientsPreview(~, ~, fig)
    if nargin < 3 || isempty(fig)
        fig = gcbf;
    end
    handles = guidata(fig);
    
    try
        % Get current settings
        num_trials = str2double(get(handles.num_trials_edit, 'String'));
        if isnan(num_trials) || num_trials <= 0
            num_trials = 5;
        end
        display_trials = num_trials; % Show all trials
        % Use actual num_trials for simulation, display_trials for preview
        
        scenario_idx = get(handles.torque_scenario_popup, 'Value');
        coeff_range = str2double(get(handles.coeff_range_edit, 'String'));
        constant_value = 10.0; % Default constant value since we removed the input field
        
        % Get parameter info
        param_info = getPolynomialParameterInfo();
        total_columns = 1 + param_info.total_params;
        
        % Generate coefficient data for display (limited to 100 for performance)
        coeff_data = cell(display_trials, total_columns);
        
        for i = 1:display_trials
            coeff_data{i, 1} = i; % Trial number
            
            col_idx = 2;
            for joint_idx = 1:length(param_info.joint_names)
                coeffs = param_info.joint_coeffs{joint_idx};
                for coeff_idx = 1:length(coeffs)
                    coeff_letter = coeffs(coeff_idx);
                    
                    switch scenario_idx
                        case 1 % Variable Torques
                            if ~isnan(coeff_range) && coeff_range > 0
                                % Generate random coefficient within specified range with bounds validation
                                random_value = (rand - 0.5) * 2 * coeff_range;
                                % Ensure value is within bounds [-coeff_range, +coeff_range]
                                random_value = max(-coeff_range, min(coeff_range, random_value));
                                coeff_data{i, col_idx} = sprintf('%.2f', random_value);
                            else
                                coeff_data{i, col_idx} = sprintf('%.2f', (rand - 0.5) * 100);
                            end
                        case 2 % Zero Torque
                            coeff_data{i, col_idx} = '0.00';
                        case 3 % Constant Torque
                            % FIXED: G is the constant term (last coefficient)
                            if coeff_letter == 'G'
                                if ~isnan(constant_value)
                                    coeff_data{i, col_idx} = sprintf('%.2f', constant_value);
                                else
                                    coeff_data{i, col_idx} = '10.00';
                                end
                            else
                                coeff_data{i, col_idx} = '0.00';
                            end
                    end
                    col_idx = col_idx + 1;
                end
            end
        end
        
        % Update table
        set(handles.coefficients_table, 'Data', coeff_data);
        handles.edited_cells = {}; % Clear edit tracking
        
        % Store original data
        handles.original_coefficients_data = coeff_data;
        handles.original_coefficients_columns = get(handles.coefficients_table, 'ColumnName');
        guidata(handles.fig, handles);
        
    catch ME
        fprintf('Error in updateCoefficientsPreview: %s\n', ME.message);
    end
end

% Joint Editor callbacks
function updateJointCoefficients(src, evt)
    handles = guidata(gcbf);
    selected_idx = get(handles.joint_selector, 'Value');
    joint_names = get(handles.joint_selector, 'String');
    
    % Load coefficients from table if available
    loadJointFromTable([], [], gcbf);
    
    % Update status
    set(handles.joint_status, 'String', sprintf('Ready - %s selected', joint_names{selected_idx}));
    guidata(handles.fig, handles);
end

function updateTrialSelectionMode(src, evt)
    handles = guidata(gcbf);
    selection_idx = get(handles.trial_selection_popup, 'Value');
    
    if selection_idx == 1 % All Trials
        set(handles.trial_number_edit, 'Enable', 'off');
    else % Specific Trial
        set(handles.trial_number_edit, 'Enable', 'on');
    end
    
    guidata(handles.fig, handles);
end

function validateCoefficientInput(src, evt)
    value = get(src, 'String');
    num_value = str2double(value);
    
    if isnan(num_value)
        set(src, 'String', '0.00');
        msgbox('Please enter a valid number', 'Invalid Input', 'warn');
    else
        set(src, 'String', sprintf('%.2f', num_value));
    end
end

function applyJointToTable(src, evt)
    handles = guidata(gcbf);
    
    try
        % Get selected joint
        joint_idx = get(handles.joint_selector, 'Value');
        param_info = handles.param_info;
        
        % Get coefficient values
        coeff_values = zeros(1, 7);
        for i = 1:7
            coeff_values(i) = str2double(get(handles.joint_coeff_edits(i), 'String'));
        end
        
        % Get current table data
        table_data = get(handles.coefficients_table, 'Data');
        
        % Determine which trials to apply to
        apply_mode = get(handles.trial_selection_popup, 'Value');
        if apply_mode == 1 % All Trials
            trials = 1:size(table_data, 1);
        else % Specific Trial
            trial_num = str2double(get(handles.trial_number_edit, 'String'));
            if isnan(trial_num) || trial_num < 1 || trial_num > size(table_data, 1)
                msgbox('Invalid trial number', 'Error', 'error');
                return;
            end
            trials = trial_num;
        end
        
        % Calculate column indices
        col_start = 2 + (joint_idx - 1) * 7;
        
        % Apply values
        for trial = trials
            for i = 1:7
                table_data{trial, col_start + i - 1} = sprintf('%.2f', coeff_values(i));
            end
        end
        
        % Update table
        set(handles.coefficients_table, 'Data', table_data);
        
        % Update status
        if apply_mode == 1
            status_msg = sprintf('Applied %s coefficients to all trials', param_info.joint_names{joint_idx});
        else
            status_msg = sprintf('Applied %s coefficients to trial %d', param_info.joint_names{joint_idx}, trials);
        end
        set(handles.joint_status, 'String', status_msg);
        
    catch ME
        msgbox(['Error applying coefficients: ' ME.message], 'Error', 'error');
    end
end

function loadJointFromTable(src, evt, fig)
    if nargin < 3
        fig = gcbf;
    end
    handles = guidata(fig);
    
    try
        % Get selected joint
        joint_idx = get(handles.joint_selector, 'Value');
        
        % Get table data
        table_data = get(handles.coefficients_table, 'Data');
        
        if isempty(table_data)
            return;
        end
        
        % Determine which trial to load from
        apply_mode = get(handles.trial_selection_popup, 'Value');
        if apply_mode == 2 % Specific Trial
            trial_num = str2double(get(handles.trial_number_edit, 'String'));
            if isnan(trial_num) || trial_num < 1 || trial_num > size(table_data, 1)
                trial_num = 1;
            end
        else
            trial_num = 1; % Default to first trial
        end
        
        % Calculate column indices
        col_start = 2 + (joint_idx - 1) * 7;
        
        % Load values
        for i = 1:7
            value_str = table_data{trial_num, col_start + i - 1};
            if ischar(value_str)
                value = str2double(value_str);
            else
                value = value_str;
            end
            set(handles.joint_coeff_edits(i), 'String', sprintf('%.2f', value));
        end
        
    catch ME
        % Silently fail or set defaults
        for i = 1:7
            set(handles.joint_coeff_edits(i), 'String', '0.00');
        end
    end
end

% Coefficients table callbacks
function resetCoefficientsToGenerated(src, evt)
    handles = guidata(gcbf);
    
    if isfield(handles, 'original_coefficients_data')
        set(handles.coefficients_table, 'Data', handles.original_coefficients_data);
        handles.edited_cells = {};
        guidata(handles.fig, handles);
        msgbox('Coefficients reset to generated values', 'Reset Complete', 'help');
    else
        updateCoefficientsPreview([], [], gcbf);
    end
end

function coefficientCellEditCallback(src, evt)
    handles = guidata(gcbf);
    
    if evt.Column > 1 % Only coefficient columns are editable
        % Validate input
        new_value = evt.NewData;
        if ischar(new_value)
            num_value = str2double(new_value);
        else
            num_value = new_value;
        end
        
        if isnan(num_value)
            % Revert to old value
            table_data = get(src, 'Data');
            table_data{evt.Row, evt.Column} = evt.PreviousData;
            set(src, 'Data', table_data);
            msgbox('Please enter a valid number', 'Invalid Input', 'warn');
        else
            % Format and update
            table_data = get(src, 'Data');
            table_data{evt.Row, evt.Column} = sprintf('%.2f', num_value);
            set(src, 'Data', table_data);
            
            % Track edit
            cell_id = sprintf('%d,%d', evt.Row, evt.Column);
            if ~ismember(cell_id, handles.edited_cells)
                handles.edited_cells{end+1} = cell_id;
            end
            guidata(handles.fig, handles);
        end
    end
end

function applyRowToAll(src, evt)
    handles = guidata(gcbf);
    
    table_data = get(handles.coefficients_table, 'Data');
    if isempty(table_data)
        return;
    end
    
    % Ask which row to copy
    prompt = sprintf('Enter row number to copy (1-%d):', size(table_data, 1));
    answer = inputdlg(prompt, 'Apply Row', 1, {'1'});
    
    if ~isempty(answer)
        row_num = str2double(answer{1});
        if ~isnan(row_num) && row_num >= 1 && row_num <= size(table_data, 1)
            % Copy row to all others
            row_data = table_data(row_num, 2:end);
            for i = 1:size(table_data, 1)
                if i ~= row_num
                    table_data(i, 2:end) = row_data;
                end
            end
            set(handles.coefficients_table, 'Data', table_data);
            msgbox(sprintf('Row %d applied to all trials', row_num), 'Success');
        else
            msgbox('Invalid row number', 'Error', 'error');
        end
    end
end

function exportCoefficientsToCSV(src, evt)
    handles = guidata(gcbf);
    
    [filename, pathname] = uiputfile('*.csv', 'Save Coefficients As');
    if filename ~= 0
        try
            % Get table data
            table_data = get(handles.coefficients_table, 'Data');
            col_names = get(handles.coefficients_table, 'ColumnName');
            
            % Convert to table
            T = cell2table(table_data, 'VariableNames', col_names);
            
            % Write to CSV
            writetable(T, fullfile(pathname, filename));
            msgbox('Coefficients exported successfully', 'Success');
        catch ME
            msgbox(['Error exporting: ' ME.message], 'Error', 'error');
        end
    end
end

function importCoefficientsFromCSV(src, evt)
    handles = guidata(gcbf);
    
    [filename, pathname] = uigetfile('*.csv', 'Select Coefficients File');
    if filename ~= 0
        try
            % Read CSV
            T = readtable(fullfile(pathname, filename));
            
            % Convert to cell array
            table_data = table2cell(T);
            
            % Update table
            set(handles.coefficients_table, 'Data', table_data);
            msgbox('Coefficients imported successfully', 'Success');
        catch ME
            msgbox(['Error importing: ' ME.message], 'Error', 'error');
        end
    end
end

function saveScenario(src, evt)
    handles = guidata(gcbf);
    
    prompt = 'Enter name for this scenario:';
    answer = inputdlg(prompt, 'Save Scenario', 1, {'My Scenario'});
    
    if ~isempty(answer)
        try
            scenario.name = answer{1};
            scenario.coefficients = get(handles.coefficients_table, 'Data');
            scenario.settings = struct();
            scenario.settings.torque_scenario = get(handles.torque_scenario_popup, 'Value');
            scenario.settings.coeff_range = str2double(get(handles.coeff_range_edit, 'String'));
            scenario.settings.constant_value = 10.0; % Default constant value
            
            % Save to file
            filename = sprintf('scenario_%s.mat', matlab.lang.makeValidName(answer{1}));
            save(filename, 'scenario');
            msgbox(['Scenario saved as ' filename], 'Success');
        catch ME
            msgbox(['Error saving scenario: ' ME.message], 'Error', 'error');
        end
    end
end

function loadScenario(src, evt)
    handles = guidata(gcbf);
    
    [filename, pathname] = uigetfile('scenario_*.mat', 'Select Scenario File');
    if filename ~= 0
        try
            loaded = load(fullfile(pathname, filename));
            scenario = loaded.scenario;
            
            % Apply settings
            set(handles.coefficients_table, 'Data', scenario.coefficients);
            set(handles.torque_scenario_popup, 'Value', scenario.settings.torque_scenario);
            set(handles.coeff_range_edit, 'String', num2str(scenario.settings.coeff_range));
            % Note: constant_value_edit removed from GUI, using default value
            
            % Trigger scenario callback
            torqueScenarioCallback(handles.torque_scenario_popup, []);
            
            msgbox(['Loaded scenario: ' scenario.name], 'Success');
        catch ME
            msgbox(['Error loading scenario: ' ME.message], 'Error', 'error');
        end
    end
end

function searchCoefficients(src, evt)
    handles = guidata(gcbf);
    search_term = lower(get(handles.search_edit, 'String'));
    
    if isempty(search_term)
        return;
    end
    
    % Get column names
    col_names = get(handles.coefficients_table, 'ColumnName');
    
    % Find matching columns
    matching_cols = [];
    for i = 2:length(col_names) % Skip trial column
        if contains(lower(col_names{i}), search_term)
            matching_cols(end+1) = i;
        end
    end
    
    if ~isempty(matching_cols)
        msgbox(sprintf('Found %d matching columns', length(matching_cols)), 'Search Results');
        % Could add highlighting functionality here
    else
        msgbox('No matching columns found', 'Search Results');
    end
end

function clearSearch(src, evt)
    handles = guidata(gcbf);
    set(handles.search_edit, 'String', '');
end

% Additional helper functions
function selectSimulinkModel(src, evt)
    handles = guidata(gcbf);
    
    % Get list of open models
    open_models = find_system('type', 'block_diagram');
    
    if isempty(open_models)
        % No models open, try to find models in the project
        possible_models = {};
        possible_paths = {};
        
        % Check common locations
        search_paths = {
            'Model',
            '.',
            fullfile(pwd, 'Model'),
            fullfile(pwd, '..', 'Model')
        };
        
        for i = 1:length(search_paths)
            if exist(search_paths{i}, 'dir')
                slx_files = dir(fullfile(search_paths{i}, '*.slx'));
                mdl_files = dir(fullfile(search_paths{i}, '*.mdl'));
                
                for j = 1:length(slx_files)
                    model_name = slx_files(j).name(1:end-4); % Remove .slx
                    possible_models{end+1} = model_name;
                    possible_paths{end+1} = fullfile(search_paths{i}, slx_files(j).name);
                end
                
                for j = 1:length(mdl_files)
                    model_name = mdl_files(j).name(1:end-4); % Remove .mdl
                    possible_models{end+1} = model_name;
                    possible_paths{end+1} = fullfile(search_paths{i}, mdl_files(j).name);
                end
            end
        end
        
        if isempty(possible_models)
            msgbox('No Simulink models found. Please ensure you have .slx or .mdl files in the Model directory or current directory.', 'No Models Found', 'warn');
            return;
        end
        
        % Let user select from found models
        [selection, ok] = listdlg('ListString', possible_models, ...
                                  'SelectionMode', 'single', ...
                                  'Name', 'Select Model', ...
                                  'PromptString', 'Select a Simulink model:');
        
        if ok
            handles.model_name = possible_models{selection};
            handles.model_path = possible_paths{selection};
            set(handles.model_display, 'String', handles.model_name);
            guidata(handles.fig, handles);
        end
        
    else
        % Models are open, let user select from open models
        [selection, ok] = listdlg('ListString', open_models, ...
                                  'SelectionMode', 'single', ...
                                  'Name', 'Select Model', ...
                                  'PromptString', 'Select a Simulink model:');
        
        if ok
            handles.model_name = open_models{selection};
            handles.model_path = which(handles.model_name);
            set(handles.model_display, 'String', handles.model_name);
            guidata(handles.fig, handles);
        end
    end
end

function clearAllCheckpoints(~, ~)
    handles = guidata(gcbf);
    
    % Find all checkpoint files
    checkpoint_files = dir('checkpoint_*.mat');
    
    if isempty(checkpoint_files)
        msgbox('No checkpoint files found to clear.', 'No Checkpoints', 'help');
        return;
    end
    
    % Ask for confirmation
    answer = questdlg(sprintf('Delete %d checkpoint files? This action cannot be undone.', length(checkpoint_files)), ...
                     'Clear Checkpoints', 'Yes', 'No', 'No');
    
    if strcmp(answer, 'Yes')
        try
            for i = 1:length(checkpoint_files)
                delete(checkpoint_files(i).name);
            end
            msgbox(sprintf('Deleted %d checkpoint files.', length(checkpoint_files)), 'Checkpoints Cleared', 'help');
        catch ME
            msgbox(['Error clearing checkpoints: ' ME.message], 'Error', 'error');
        end
    end
end

function saveUserPreferences(handles)
    % Save user preferences to file
    try
        preferences = struct();
        preferences.last_input_file_path = handles.selected_input_file;
        preferences.output_folder = get(handles.output_folder_edit, 'String');
        preferences.model_name = handles.model_name;
        
        save('user_preferences.mat', 'preferences');
    catch ME
        fprintf('Warning: Could not save preferences: %s\n', ME.message);
    end
end

% Helper functions that need to be implemented
function param_info = getPolynomialParameterInfo()
    % Get polynomial parameter information for joints
    % This is a placeholder - implement based on your model structure
    param_info = struct();
    param_info.joint_names = {'Hip', 'Knee', 'Ankle', 'Shoulder', 'Elbow', 'Wrist'};
    param_info.joint_coeffs = {'ABCDEFG', 'ABCDEFG', 'ABCDEFG', 'ABCDEFG', 'ABCDEFG', 'ABCDEFG'};
    param_info.total_params = 42; % 6 joints * 7 coefficients
end

function short_name = getShortenedJointName(joint_name)
    % Get shortened joint name for table columns
    switch joint_name
        case 'Hip'
            short_name = 'H';
        case 'Knee'
            short_name = 'K';
        case 'Ankle'
            short_name = 'A';
        case 'Shoulder'
            short_name = 'S';
        case 'Elbow'
            short_name = 'E';
        case 'Wrist'
            short_name = 'W';
        otherwise
            short_name = joint_name(1);
    end
end

function handles = createLeftColumnContent(parent, handles)
    % Create left column panels
    panelSpacing = 0.015;
    panelPadding = 0.01;
    
    % Calculate heights
    numPanels = 1;  % Just Configuration (includes modeling and progress)
    totalSpacing = panelPadding + (numPanels-1)*panelSpacing + panelPadding;
    availableHeight = 1 - totalSpacing;
    
    h1 = 1.0 * availableHeight;  % Configuration panel takes full height (increased to show all elements)
    
    % Calculate positions
    y1 = panelPadding;
    
    % Create panels
    handles = createTrialAndDataPanel(parent, handles, y1, h1);
end

function handles = createRightColumnContent(parent, handles)
    % Create right column panels
    panelSpacing = 0.015;
    panelPadding = 0.01;
    
    % Calculate heights
    numPanels = 4;
    totalSpacing = panelPadding + (numPanels-1)*panelSpacing + panelPadding;
    availableHeight = 1 - totalSpacing;
    
    h1 = 0.35 * availableHeight;  % Summary section height
    h2 = 0.252 * availableHeight;  % Joint editor height increased by 5% more (0.24 * 1.05 = 0.252)
    h3 = 0.36 * availableHeight;  % Coefficients panel height increased by 20% (0.30 * 1.2 = 0.36)
    h4 = 0.05 * availableHeight;  % Reduced batch settings to make room
    
    % Calculate positions
    y4 = panelPadding;
    y3 = y4 + h4 + panelSpacing;
    y2 = y3 + h3 + panelSpacing;
    y1 = y2 + h2 + panelSpacing;
    
    % Create panels
    handles = createPreviewPanel(parent, handles, y1, h1);
    handles = createJointEditorPanel(parent, handles, y2, h2);
    handles = createCoefficientsPanel(parent, handles, y3, h3);
end 