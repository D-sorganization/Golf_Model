%% Fix Data Export Format for Golf GUI
% This script helps convert the current data export format to be GUI-compatible
% The GUI expects simple numeric arrays, not MatlabOpaque objects

clear; clc;

fprintf('=== Fixing Data Export Format for Golf GUI ===\n\n');

%% 1. Load Current Data Files
fprintf('1. Loading current data files...\n');

% Check for existing files
files_to_fix = {'BASEQ.mat', 'ZTCFQ.mat', 'DELTAQ.mat'};
existing_files = {};

for i = 1:length(files_to_fix)
    if exist(files_to_fix{i}, 'file')
        existing_files{end+1} = files_to_fix{i};
        fprintf('   Found: %s\n', files_to_fix{i});
    else
        fprintf('   Missing: %s\n', files_to_fix{i});
    end
end

if isempty(existing_files)
    fprintf('❌ No data files found to fix!\n');
    fprintf('Please ensure you are in the correct directory with your .mat files.\n');
    return;
end

%% 2. Analyze Current Format
fprintf('\n2. Analyzing current data format...\n');

for i = 1:length(existing_files)
    filename = existing_files{i};
    fprintf('\n   --- %s ---\n', filename);
    
    try
        % Load the file
        data = load(filename);
        
        % Get the main variable name (should be the filename without .mat)
        var_name = filename(1:end-4);
        
        if isfield(data, var_name)
            current_data = data.(var_name);
            fprintf('   Current format: %s\n', class(current_data));
            
            if isstruct(current_data)
                fprintf('   Structure fields: %s\n', strjoin(fieldnames(current_data), ', '));
                
                % Check if it's the problematic MatlabOpaque format
                if isfield(current_data, 's0') && isfield(current_data, 's1') && ...
                   isfield(current_data, 's2') && isfield(current_data, 'arr')
                    fprintf('   ⚠️  Detected MatlabOpaque format - needs conversion\n');
                else
                    fprintf('   ✅ Standard structure format\n');
                end
            else
                fprintf('   ✅ Numeric array format\n');
            end
        else
            fprintf('   ❌ Expected variable %s not found\n', var_name);
        end
        
    catch ME
        fprintf('   ❌ Error loading %s: %s\n', filename, ME.message);
    end
end

%% 3. Create GUI-Compatible Export Function
fprintf('\n3. Creating GUI-compatible export function...\n');

% This function should be called after your simulation to export data
export_function = sprintf([...
    'function export_gui_compatible_data(sim_data, filename)\n', ...
    '%% Export simulation data in GUI-compatible format\n', ...
    '%% Inputs:\n', ...
    '%%   sim_data - Simulation output structure\n', ...
    '%%   filename - Output filename (without .mat extension)\n\n', ...
    '%% Extract time and position data from signal bus\n', ...
    'if isfield(sim_data, ''logsout'')\n', ...
    '    logsout = sim_data.logsout;\n', ...
    '    \n', ...
    '    %% Find the signal bus\n', ...
    '    bus_signals = logsout.find(''SignalBus'');\n', ...
    '    \n', ...
    '    if ~isempty(bus_signals)\n', ...
    '        %% Extract time vector\n', ...
    '        time = bus_signals(1).Values.Time;\n', ...
    '        \n', ...
    '        %% Extract position data (assuming 6 DOF)\n', ...
    '        positions = zeros(length(time), 6);\n', ...
    '        \n', ...
    '        %% You may need to adjust these based on your signal names\n', ...
    '        for i = 1:length(bus_signals)\n', ...
    '            signal_name = bus_signals(i).Name;\n', ...
    '            signal_data = bus_signals(i).Values.Data;\n', ...
    '            \n', ...
    '            %% Map signals to positions based on your model\n', ...
    '            %% This is a template - adjust for your specific signals\n', ...
    '            switch signal_name\n', ...
    '                case ''Position_X''\n', ...
    '                    positions(:, 1) = signal_data;\n', ...
    '                case ''Position_Y''\n', ...
    '                    positions(:, 2) = signal_data;\n', ...
    '                case ''Position_Z''\n', ...
    '                    positions(:, 3) = signal_data;\n', ...
    '                case ''Rotation_X''\n', ...
    '                    positions(:, 4) = signal_data;\n', ...
    '                case ''Rotation_Y''\n', ...
    '                    positions(:, 5) = signal_data;\n', ...
    '                case ''Rotation_Z''\n', ...
    '                    positions(:, 6) = signal_data;\n', ...
    '            end\n', ...
    '        end\n', ...
    '        \n', ...
    '        %% Combine time and positions\n', ...
    '        gui_data = [time, positions];\n', ...
    '        \n', ...
    '        %% Save in GUI-compatible format\n', ...
    '        save([filename ''.mat''], ''gui_data'');\n', ...
    '        fprintf(''✅ Exported %%s.mat in GUI-compatible format\\n'', filename);\n', ...
    '    else\n', ...
    '        fprintf(''❌ No SignalBus found in simulation data\\n'');\n', ...
    '    end\n', ...
    'else\n', ...
    '    fprintf(''❌ No logsout field found in simulation data\\n'');\n', ...
    'end\n', ...
    'end']);

fprintf('   Created export function template\n');
fprintf('   Save this as: export_gui_compatible_data.m\n\n');

%% 4. Generate Test Data in Correct Format
fprintf('4. Generating test data in correct format...\n');

% Create sample data in the format the GUI expects
time = (0:0.001:0.1)';  % 101 time points
positions = zeros(length(time), 6);  % 6 DOF positions

% Add some realistic motion
positions(:, 1) = sin(2*pi*10*time) * 0.1;  % X position
positions(:, 2) = cos(2*pi*10*time) * 0.1;  % Y position
positions(:, 3) = time * 2;                 % Z position (rising)
positions(:, 4) = sin(2*pi*5*time) * 0.05;  % X rotation
positions(:, 5) = cos(2*pi*5*time) * 0.05;  % Y rotation
positions(:, 6) = time * 0.5;               % Z rotation

% Combine time and positions
gui_data = [time, positions];

% Save test files
test_files = {'test_BASEQ', 'test_ZTCFQ', 'test_DELTAQ'};

for i = 1:length(test_files)
    filename = test_files{i};
    save([filename '.mat'], 'gui_data');
    fprintf('   Created: %s.mat (shape: %s)\n', filename, mat2str(size(gui_data)));
end

%% 5. Instructions for Integration
fprintf('\n5. Integration Instructions:\n');
fprintf('   📋 To fix your data export:\n\n');
fprintf('   1. Save the export function above as ''export_gui_compatible_data.m''\n');
fprintf('   2. Modify it to match your specific signal names and structure\n');
fprintf('   3. Call it after your simulation:\n');
fprintf('      >> export_gui_compatible_data(sim_data, ''BASEQ'');\n');
fprintf('      >> export_gui_compatible_data(sim_data, ''ZTCFQ'');\n');
fprintf('      >> export_gui_compatible_data(sim_data, ''DELTAQ'');\n\n');
fprintf('   4. Replace your current .mat files with the new ones\n');
fprintf('   5. Test the GUI with the new data format\n\n');

%% 6. Performance Recommendations
fprintf('6. Performance Recommendations:\n');
fprintf('   ✅ Disable Simscape Results Explorer: 5%% speed improvement\n');
fprintf('   ✅ Use signal bus logging instead of individual signals\n');
fprintf('   ✅ Export only required data (not all simulation variables)\n');
fprintf('   ✅ Consider using Fast Restart for multiple simulations\n\n');

fprintf('=== Fix Complete ===\n');
fprintf('Test the GUI with the generated test_*.mat files to verify compatibility.\n'); 