function TestSkeletonPlotter(BASEQ, ZTCFQ, DELTAQ)
% === SkeletonPlotter - FINAL BUNDLED VERSION ===
% Golf Swing Visualizer with Playback, Zoom, Recording, Multi-Dataset Forces

% --- Save initial workspace variables ---
vars_before = who;

%% === 1. Settings and Constants ===
shirt_color = [0.6, 0.8, 1];
skin_color = [1, 0.8, 0.6];
figure_background_color = [0.9, 1, 0.9];
axes_background_color = [1, 1, 0.8];
panel_background = [0.8, 1, 0.8];
text_background = [1, 1, 1];
record_idle_color = [1.0 0.6 0.0];  % Orange (idle)
record_active_color = [1.0 0.4 0.4]; % Red (recording)
font_size = 10;

% Sizes
inches_to_meters = 0.0254;
clubhead_diameter = 4 * inches_to_meters;
shaft_diameter = 0.5 * inches_to_meters;
forearm_diameter = 3 * inches_to_meters;
upperarm_diameter = 4 * inches_to_meters;
shoulderneck_diameter = 5 * inches_to_meters;

% Datasets
datasets = {'BASE', BASEQ; 'ZTCF', ZTCFQ; 'DELTA', DELTAQ};
colors_force = {[1 0 0], [0 0 1], [1 0.5 0]};
colors_torque = {[0.5 0 0.5], [0 1 1], [1 0 1]};

% Frames
num_frames = length(BASEQ.Buttx);

% Scaling
Max_force_mag = max(vecnorm(BASEQ.TotalHandForceGlobal,2,2));
Max_torque_mag = max(vecnorm(BASEQ.EquivalentMidpointCoupleGlobal,2,2));

%% === 2. Create Main Figure ===
fig = figure('Name', 'Golf Swing Plotter', ...
             'NumberTitle', 'off', ...
             'Color', figure_background_color, ...
             'Position', [100, 100, 1400, 800]);

%% === 3. Create 3D Axes ===
handles.ax = axes('Parent', fig, ...
                  'Color', axes_background_color, ...
                  'Position', [0.25 0.05 0.6 0.9]);
axis(handles.ax, 'equal');
grid(handles.ax, 'on');
xlabel(handles.ax, 'X (m)');
ylabel(handles.ax, 'Y (m)');
zlabel(handles.ax, 'Z (m)');
hold(handles.ax, 'on');
view(handles.ax, 3);

% Set Plot Limits based on BASEQ
all_x = [BASEQ.Buttx; BASEQ.CHx; BASEQ.MPx; BASEQ.LWx; BASEQ.LEx; BASEQ.LSx; BASEQ.RWx; BASEQ.REx; BASEQ.RSx; BASEQ.HUBx];
all_y = [BASEQ.Butty; BASEQ.CHy; BASEQ.MPy; BASEQ.LWy; BASEQ.LEy; BASEQ.LSy; BASEQ.RWy; BASEQ.REy; BASEQ.RSy; BASEQ.HUBy];
all_z = [BASEQ.Buttz; BASEQ.CHz; BASEQ.MPz; BASEQ.LWz; BASEQ.LEz; BASEQ.LSz; BASEQ.RWz; BASEQ.REz; BASEQ.RSz; BASEQ.HUBz];
margin = 0.3;
xlim(handles.ax, [min(all_x)-margin, max(all_x)+margin]);
ylim(handles.ax, [min(all_y)-margin, max(all_y)+margin]);
zlim(handles.ax, [min(all_z)-margin, max(all_z)+margin]);
axis manual

camlight(handles.ax, 'headlight');
lighting(handles.ax, 'gouraud');
material(handles.ax, 'dull');
shading(handles.ax, 'interp');
%% === 4. Create GUI Panels and Controls ===

% --- 4.1 Checkbox Panel (Left Center) ---
handles.panel_checkboxes = uipanel('Parent', fig, ...
    'Title', 'Segments and Vectors', ...
    'FontSize', font_size, ...
    'BackgroundColor', panel_background, ...
    'Units', 'normalized', 'Position', [0.01 0.4 0.22 0.55]);

checkbox_names = { ...
    'Force BASE', 'Force ZTCF', 'Force DELTA', ...
    'Torque BASE', 'Torque ZTCF', 'Torque DELTA', ...
    'Shaft', 'Face Normal', ...
    'Left Forearm', 'Left Upper Arm', 'Left Shoulder-Neck', ...
    'Right Forearm', 'Right Upper Arm', 'Right Shoulder-Neck'};

handles.checkbox_list = gobjects(length(checkbox_names),1);

for k = 1:length(checkbox_names)
    handles.checkbox_list(k) = uicontrol('Parent', handles.panel_checkboxes, ...
        'Style', 'checkbox', ...
        'String', checkbox_names{k}, ...
        'Units', 'normalized', ...
        'Position', [0.05, 1-k*0.065, 0.9, 0.05], ...
        'BackgroundColor', panel_background, ...
        'FontSize', 9, ...
        'Value', 1);
end

% --- 4.2 Sliders + Play/Pause Button Panel (Bottom Left) ---
handles.panel_sliders = uipanel('Parent', fig, ...
    'Title', 'Playback and Scaling', ...
    'FontSize', font_size, ...
    'BackgroundColor', panel_background, ...
    'Units', 'normalized', 'Position', [0.01 0.05 0.22 0.35]);

% Playback Speed Slider
handles.speed_slider = uicontrol('Parent', handles.panel_sliders, 'Style', 'slider', ...
    'Min', 0.1, 'Max', 3, 'Value', 1, ...
    'Units', 'normalized', 'Position', [0.05 0.8 0.9 0.08], ...
    'BackgroundColor', [1 1 1], 'FontSize', 9);
uicontrol('Parent', handles.panel_sliders, 'Style', 'text', 'String', 'Playback Speed', ...
          'Units', 'normalized', 'Position', [0.05 0.88 0.9 0.08], ...
          'BackgroundColor', panel_background, 'FontSize', 9, 'HorizontalAlignment', 'center');

% Vector Scale Slider
handles.scale_slider = uicontrol('Parent', handles.panel_sliders, 'Style', 'slider', ...
    'Min', 0.1, 'Max', 9, 'Value', 1, ...
    'Units', 'normalized', 'Position', [0.05 0.6 0.9 0.08], ...
    'BackgroundColor', [1 1 1], 'FontSize', 9);
uicontrol('Parent', handles.panel_sliders, 'Style', 'text', 'String', 'Vector Scale', ...
          'Units', 'normalized', 'Position', [0.05 0.68 0.9 0.08], ...
          'BackgroundColor', panel_background, 'FontSize', 9, 'HorizontalAlignment', 'center');

% Frame Slider
handles.slider = uicontrol('Parent', handles.panel_sliders, 'Style', 'slider', ...
    'Min', 1, 'Max', num_frames, 'Value', 1, ...
    'Units', 'normalized', 'Position', [0.05 0.4 0.9 0.08], ...
    'BackgroundColor', [1 1 1], 'FontSize', 9, ...
    'SliderStep', [1/(num_frames-1) 10/(num_frames-1)], ...
    'Callback', @updatePlot);
uicontrol('Parent', handles.panel_sliders, 'Style', 'text', 'String', 'Frame', ...
          'Units', 'normalized', 'Position', [0.05 0.48 0.9 0.08], ...
          'BackgroundColor', panel_background, 'FontSize', 9, 'HorizontalAlignment', 'center');

% --- Single Play/Pause Button inside panel (Dark Green) ---
handles.play_pause_button = uicontrol('Parent', handles.panel_sliders, 'Style', 'togglebutton', ...
    'String', 'Play', ...
    'Units', 'normalized', 'Position', [0.25 0.1 0.5 0.2], ...
    'FontSize', 10, ...
    'BackgroundColor', [0.4 0.8 0.4], ... % <-- Darker green
    'Callback', @togglePlayPause);
% --- 4.3 Zoom Panel (Top Left) ---
handles.panel_zoom = uipanel('Parent', fig, ...
    'Title', 'Zoom', ...
    'FontSize', font_size, ...
    'BackgroundColor', panel_background, ...
    'Units', 'normalized', 'Position', [0.01 0.93 0.22 0.05]);

% Zoom Slider (Controls camera zoom for the entire view)
handles.zoom_slider = uicontrol('Parent', handles.panel_zoom, 'Style', 'slider', ...
    'Min', 0.5, 'Max', 2.0, 'Value', 1, ...
    'Units', 'normalized', 'Position', [0.05 0.2 0.9 0.6], ...
    'BackgroundColor', [1 1 1], 'FontSize', 9, ...
    'Callback', @(src,~) updateZoom(src.Value));

% Zoom Update Function (inverted zoom direction)
function updateZoom(zoom_factor)
    % Invert the zoom direction: right should zoom in, left should zoom out
    zoom_factor = 3 - zoom_factor; % Invert the factor (to make right zoom in)

    % Calculate new axis limits based on zoom factor
    margin = 0.3;  % Keep the margin the same
    all_x = [BASEQ.Buttx; BASEQ.CHx; BASEQ.MPx; BASEQ.LWx; BASEQ.LEx; BASEQ.LSx; BASEQ.RWx; BASEQ.REx; BASEQ.RSx; BASEQ.HUBx];
    all_y = [BASEQ.Butty; BASEQ.CHy; BASEQ.MPy; BASEQ.LWy; BASEQ.LEy; BASEQ.LSy; BASEQ.RWy; BASEQ.REy; BASEQ.RSy; BASEQ.HUBy];
    all_z = [BASEQ.Buttz; BASEQ.CHz; BASEQ.MPz; BASEQ.LWz; BASEQ.LEz; BASEQ.LSz; BASEQ.RWz; BASEQ.REz; BASEQ.RSz; BASEQ.HUBz];

    % Apply zoom scaling to axis limits
    xlim(handles.ax, [min(all_x) - margin, max(all_x) + margin] * zoom_factor);
    ylim(handles.ax, [min(all_y) - margin, max(all_y) + margin] * zoom_factor);
    zlim(handles.ax, [min(all_z) - margin, max(all_z) + margin] * zoom_factor);
end

% --- 4.4 Record Button (Bottom Right, Orange) ---
handles.record_button = uicontrol('Parent', fig, 'Style', 'togglebutton', ...
    'String', 'Record', ...
    'Units', 'normalized', 'Position', [0.86 0.01 0.12 0.04], ...
    'BackgroundColor', [1.0 0.6 0.0], ... % <-- New orange color!
    'FontSize', 10, ...
    'Callback', @toggleRecord);

% --- 4.5 Legend Panel (Right Center) ---
handles.panel_legend = uipanel('Parent', fig, ...
    'Title', 'Legend', ...
    'FontSize', font_size, ...
    'BackgroundColor', [1 1 1], ...
    'Units', 'normalized', 'Position', [0.86 0.35 0.12 0.3]);

legend_entries = {
    'BASE (Force)', [1 0 0];
    'ZTCF (Force)', [0 0 1];
    'DELTA (Force)', [1 0.5 0];
    'BASE (Torque)', [0.5 0 0.5];
    'ZTCF (Torque)', [0 1 1];
    'DELTA (Torque)', [1 0 1];
};

for k = 1:size(legend_entries,1)
    uicontrol('Parent', handles.panel_legend, 'Style', 'text', ...
        'String', legend_entries{k,1}, ...
        'ForegroundColor', legend_entries{k,2}, ...
        'BackgroundColor', [1 1 1], ...
        'Units', 'normalized', ...
        'Position', [0.05 1-k*0.15 0.9 0.1], ...
        'FontSize', 9, ...
        'HorizontalAlignment', 'left');
end
% --- 4.6 Camera View Buttons (Shifted Up and Closer Together) ---
button_width = 0.12;
button_height = 0.05;
button_x_position = 0.86; % Near the right edge
button_spacing = 0.06; % Spacing between buttons

% Starting position for the camera buttons and the Show/Hide Legend button
initial_y_position = 0.92; % Shift the buttons up slightly

% Face-On View Button
uicontrol('Style', 'pushbutton', 'String', 'Face-On', ...
          'Units', 'normalized', 'Position', [button_x_position, initial_y_position, button_width, button_height], ...
          'FontSize', 10, 'Callback', @(~,~) setView('faceon'), ...
          'BackgroundColor', [0.8 0.8 0.8]);

% Down-the-Line View Button
uicontrol('Style', 'pushbutton', 'String', 'Down-the-Line', ...
          'Units', 'normalized', 'Position', [button_x_position, initial_y_position - button_spacing, button_width, button_height], ...
          'FontSize', 10, 'Callback', @(~,~) setView('downline'), ...
          'BackgroundColor', [0.8 0.8 0.8]);

% Top-Down View Button
uicontrol('Style', 'pushbutton', 'String', 'Top-Down', ...
          'Units', 'normalized', 'Position', [button_x_position, initial_y_position - 2 * button_spacing, button_width, button_height], ...
          'FontSize', 10, 'Callback', @(~,~) setView('topdown'), ...
          'BackgroundColor', [0.8 0.8 0.8]);

% Isometric View Button
uicontrol('Style', 'pushbutton', 'String', 'Isometric', ...
          'Units', 'normalized', 'Position', [button_x_position, initial_y_position - 3 * button_spacing, button_width, button_height], ...
          'FontSize', 10, 'Callback', @(~,~) setView('iso'), ...
          'BackgroundColor', [0.8 0.8 0.8]);

% Show/Hide Legend Button (new size and position)
uicontrol('Style', 'togglebutton', ...
    'String', 'Show/Hide Legend', ...
    'Units', 'normalized', ...
    'Position', [button_x_position, initial_y_position - 4 * button_spacing, button_width, button_height], ...  % Positioned below other buttons
    'BackgroundColor', [0.8 0.8 0.8], ...
    'FontSize', 10, ...
    'Callback', @toggleLegendVisibility);

%% === 5. Create Plot Handles (Initialize Empty Graphics) ===

% --- Shaft and Clubhead ---
handles.shaft_cylinder = surf(handles.ax, nan(2), nan(2), nan(2), ...
    'FaceColor', [0.5 0.5 0.5], 'EdgeColor', 'none');

handles.clubhead_half = surf(handles.ax, nan(2), nan(2), nan(2), ...
    'FaceColor', 'b', 'EdgeColor', 'none');

% --- Force and Torque Vectors ---
for k = 1:3
    handles.force_quivers{k} = quiver3(handles.ax, 0, 0, 0, 0, 0, 0, ...
        'Color', colors_force{k}, 'LineWidth', 2, 'MaxHeadSize', 0.5, 'AutoScale', 'off');
    handles.torque_quivers{k} = quiver3(handles.ax, 0, 0, 0, 0, 0, 0, ...
        'Color', colors_torque{k}, 'LineWidth', 2, 'MaxHeadSize', 0.5, 'AutoScale', 'off');
end

% --- Face Normal Vector ---
handles.face_normal_quiver = quiver3(handles.ax, 0, 0, 0, 0, 0, 0, ...
    'Color', [0 1 0], 'LineWidth', 2, 'MaxHeadSize', 0.5, 'AutoScale', 'off');
end
