function GolfSwingDataGeneratorGUI()
    % GolfSwingDataGeneratorGUI - Enhanced GUI for generating golf swing training data
    % This GUI provides an intuitive interface with detailed explanations for
    % configuring and running multiple simulation trials with different torque scenarios.

    % Create main figure with modern styling
    fig = figure('Name', 'Golf Swing Data Generator - Enhanced', ...
                 'Position', [50, 50, 1400, 900], ...
                 'MenuBar', 'none', ...
                 'ToolBar', 'none', ...
                 'Resize', 'on', ...
                 'Color', [0.96, 0.96, 0.98], ...
                 'NumberTitle', 'off');

    % Initialize handles structure
    handles = struct();
    handles.should_stop = false;
    handles.trial_table_data = [];

    % Create main layout with panels
    createMainLayout(fig, handles);

    % Store handles in figure
    guidata(fig, handles);

    % Initialize preview
    updatePreview([], [], handles);
end

function createMainLayout(fig, handles)
    % Create the main layout with all panels and controls

    % Title panel with gradient effect
    title_panel = uipanel('Parent', fig, ...
                         'Title', '', ...
                         'Position', [0.02, 0.92, 0.96, 0.07], ...
                         'BackgroundColor', [0.2, 0.4, 0.8], ...
                         'BorderType', 'none');

    uicontrol('Parent', title_panel, ...
              'Style', 'text', ...
              'String', 'Golf Swing Data Generator - Enhanced', ...
              'Position', [20, 5, 400, 30], ...
              'FontSize', 18, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', 'white', ...
              'BackgroundColor', [0.2, 0.4, 0.8], ...
              'HorizontalAlignment', 'left');

    % Subtitle
    uicontrol('Parent', title_panel, ...
              'Style', 'text', ...
              'String', 'Generate comprehensive training datasets with detailed parameter control', ...
              'Position', [20, -5, 600, 20], ...
              'FontSize', 10, ...
              'ForegroundColor', [0.9, 0.9, 0.9], ...
              'BackgroundColor', [0.2, 0.4, 0.8], ...
              'HorizontalAlignment', 'left');

    % Main content area with scrollable panels
    main_panel = uipanel('Parent', fig, ...
                        'Position', [0.02, 0.05, 0.96, 0.85], ...
                        'BackgroundColor', [0.96, 0.96, 0.98]);

    % Create left and right columns
    left_column = uipanel('Parent', main_panel, ...
                         'Position', [0.02, 0.02, 0.48, 0.96], ...
                         'BackgroundColor', [0.96, 0.96, 0.98]);

    right_column = uipanel('Parent', main_panel, ...
                          'Position', [0.52, 0.02, 0.46, 0.96], ...
                          'BackgroundColor', [0.96, 0.96, 0.98]);

    % Create panels in left column
    createTrialSettingsPanel(left_column, handles);
    createDataSourcesPanel(left_column, handles);
    createModelingPanel(left_column, handles);
    createHelpPanel(left_column, handles);

    % Create panels in right column
    createOutputSettingsPanel(right_column, handles);
    createTrialTablePanel(right_column, handles);
    createProgressPanel(right_column, handles);

    % Store panel references
    handles.left_column = left_column;
    handles.right_column = right_column;
    handles.main_panel = main_panel;
end

function createTrialSettingsPanel(parent, handles)
    % Trial Settings Panel with enhanced explanations
    trial_panel = uipanel('Parent', parent, ...
                         'Title', 'Trial Settings', ...
                         'TitlePosition', 'centertop', ...
                         'FontSize', 12, ...
                         'FontWeight', 'bold', ...
                         'Position', [0.02, 0.75, 0.96, 0.23], ...
                         'BackgroundColor', [0.97, 0.97, 0.97]);

    % Number of trials with explanation
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Number of Trials:', ...
              'Position', [10, 120, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.num_trials_edit = uicontrol('Parent', trial_panel, ...
                                       'Style', 'edit', ...
                                       'String', '10', ...
                                       'Position', [140, 120, 80, 25], ...
                                       'FontSize', 10, ...
                                       'TooltipString', 'Number of independent simulation runs. Each trial will have different random torque coefficients.');

    % Explanation for number of trials
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Each trial generates unique torque coefficients for comprehensive training data', ...
              'Position', [230, 120, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Simulation duration with explanation
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Simulation Duration (s):', ...
              'Position', [10, 85, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.sim_time_edit = uicontrol('Parent', trial_panel, ...
                                     'Style', 'edit', ...
                                     'String', '0.3', ...
                                     'Position', [140, 85, 80, 25], ...
                                     'FontSize', 10, ...
                                     'TooltipString', 'Duration of each simulation in seconds. Typical golf swing duration is 0.2-0.4 seconds.');

    % Explanation for simulation duration
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Duration of each swing simulation. Golf swings typically last 0.2-0.4 seconds', ...
              'Position', [230, 85, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Sample rate with explanation
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Sample Rate (Hz):', ...
              'Position', [10, 50, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.sample_rate_edit = uicontrol('Parent', trial_panel, ...
                                        'Style', 'edit', ...
                                        'String', '100', ...
                                        'Position', [140, 50, 80, 25], ...
                                        'FontSize', 10, ...
                                        'TooltipString', 'Data sampling frequency. Higher rates provide more detailed motion capture but increase file size.');

    % Explanation for sample rate
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Data sampling frequency. Higher rates = more detailed motion capture', ...
              'Position', [230, 50, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Execution mode with explanation
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Execution Mode:', ...
              'Position', [10, 15, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.execution_mode_popup = uicontrol('Parent', trial_panel, ...
                                            'Style', 'popupmenu', ...
                                            'String', {'Sequential', 'Parallel'}, ...
                                            'Position', [140, 15, 100, 25], ...
                                            'FontSize', 10, ...
                                            'TooltipString', 'Sequential: Run trials one by one. Parallel: Use multiple CPU cores for faster execution.');

    % Explanation for execution mode
    uicontrol('Parent', trial_panel, ...
              'Style', 'text', ...
              'String', 'Sequential: One by one. Parallel: Multiple CPU cores for speed', ...
              'Position', [230, 15, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Store panel reference
    handles.trial_panel = trial_panel;
end

function createDataSourcesPanel(parent, handles)
    % Data Sources Panel with detailed explanations
    data_panel = uipanel('Parent', parent, ...
                        'Title', 'Data Sources', ...
                        'TitlePosition', 'centertop', ...
                        'FontSize', 12, ...
                        'FontWeight', 'bold', ...
                        'Position', [0.02, 0.50, 0.96, 0.23], ...
                        'BackgroundColor', [0.97, 0.97, 0.97]);

    % Title with explanation
    uicontrol('Parent', data_panel, ...
              'Style', 'text', ...
              'String', 'Select which data sources to extract from your Simulink model:', ...
              'Position', [10, 140, 420, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.2, 0.2, 0.2]);

    % Checkboxes for data sources with tooltips
    handles.use_model_workspace = uicontrol('Parent', data_panel, ...
                                           'Style', 'checkbox', ...
                                           'String', 'Model Workspace (Parameters)', ...
                                           'Position', [10, 120, 200, 25], ...
                                           'Value', 1, ...
                                           'FontSize', 10, ...
                                           'TooltipString', 'Extract model parameters, variables, and workspace data. Includes model configuration settings.');

    % Explanation for model workspace
    uicontrol('Parent', data_panel, ...
              'Style', 'text', ...
              'String', 'Model parameters, variables, and configuration settings', ...
              'Position', [220, 120, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    handles.use_logsout = uicontrol('Parent', data_panel, ...
                                   'Style', 'checkbox', ...
                                   'String', 'Logsout (Standard Logging)', ...
                                   'Position', [10, 90, 200, 25], ...
                                   'Value', 1, ...
                                   'FontSize', 10, ...
                                   'TooltipString', 'Extract data from Simulink''s standard logging system. Includes scope data and logged signals.');

    % Explanation for logsout
    uicontrol('Parent', data_panel, ...
              'Style', 'text', ...
              'String', 'Standard Simulink logging data, scope outputs, and logged signals', ...
              'Position', [220, 90, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    handles.use_signal_bus = uicontrol('Parent', data_panel, ...
                                      'Style', 'checkbox', ...
                                      'String', 'Signal Bus (ToWorkspace Blocks)', ...
                                      'Position', [10, 60, 200, 25], ...
                                      'Value', 1, ...
                                      'FontSize', 10, ...
                                      'TooltipString', 'Extract data from ToWorkspace blocks and signal buses. Custom signal logging and bus data.');

    % Explanation for signal bus
    uicontrol('Parent', data_panel, ...
              'Style', 'text', ...
              'String', 'ToWorkspace blocks, signal buses, and custom signal logging', ...
              'Position', [220, 60, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    handles.use_simscape = uicontrol('Parent', data_panel, ...
                                    'Style', 'checkbox', ...
                                    'String', 'Simscape Results (Primary Data)', ...
                                    'Position', [10, 30, 200, 25], ...
                                    'Value', 1, ...
                                    'FontSize', 10, ...
                                    'TooltipString', 'Extract primary simulation data from Simscape blocks. Joint positions, velocities, forces, and torques.');

    % Explanation for simscape
    uicontrol('Parent', data_panel, ...
              'Style', 'text', ...
              'String', 'Primary simulation data: joint states, forces, torques, and motion data', ...
              'Position', [220, 30, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Data extraction process explanation
    extraction_text = sprintf(['Data Extraction Process:\n', ...
                              '1. Model loads with specified parameters\n', ...
                              '2. Simulation runs with generated torque coefficients\n', ...
                              '3. Selected data sources are extracted and combined\n', ...
                              '4. Data is formatted into CSV files for training']);

    uicontrol('Parent', data_panel, ...
              'Style', 'text', ...
              'String', extraction_text, ...
              'Position', [10, 5, 420, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'ForegroundColor', [0.3, 0.3, 0.3]);

    % Store panel reference
    handles.data_panel = data_panel;
end

function createModelingPanel(parent, handles)
    % Modeling Mode & Torque Scenarios Panel with detailed explanations
    modeling_panel = uipanel('Parent', parent, ...
                            'Title', 'Modeling Mode & Torque Scenarios', ...
                            'TitlePosition', 'centertop', ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'Position', [0.02, 0.25, 0.96, 0.23], ...
                            'BackgroundColor', [0.97, 0.97, 0.97]);

    % Torque scenario selection with detailed explanation
    uicontrol('Parent', modeling_panel, ...
              'Style', 'text', ...
              'String', 'Torque Scenario:', ...
              'Position', [10, 120, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.torque_scenario_popup = uicontrol('Parent', modeling_panel, ...
                                             'Style', 'popupmenu', ...
                                             'String', {'Variable Torques', 'Zero Torque', 'Constant Torque'}, ...
                                             'Position', [140, 120, 150, 25], ...
                                             'FontSize', 10, ...
                                             'Callback', @torqueScenarioCallback, ...
                                             'TooltipString', 'Choose how joint torques are generated for each trial. Variable Torques creates diverse training data.');

    % Coefficient range (for variable torques) with explanation
    uicontrol('Parent', modeling_panel, ...
              'Style', 'text', ...
              'String', 'Coefficient Range:', ...
              'Position', [10, 85, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.coeff_range_edit = uicontrol('Parent', modeling_panel, ...
                                        'Style', 'edit', ...
                                        'String', '0.1', ...
                                        'Position', [140, 85, 80, 25], ...
                                        'FontSize', 10, ...
                                        'TooltipString', 'Range for random coefficient variation. Coefficients A-G will be randomly generated between ±this value.');

    % Explanation for coefficient range
    uicontrol('Parent', modeling_panel, ...
              'Style', 'text', ...
              'String', 'Random variation range for polynomial coefficients A-G (±value)', ...
              'Position', [230, 85, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Constant value (for constant torque) with explanation
    uicontrol('Parent', modeling_panel, ...
              'Style', 'text', ...
              'String', 'Constant Value:', ...
              'Position', [10, 50, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.constant_value_edit = uicontrol('Parent', modeling_panel, ...
                                           'Style', 'edit', ...
                                           'String', '1.0', ...
                                           'Position', [140, 50, 80, 25], ...
                                           'FontSize', 10, ...
                                           'TooltipString', 'Constant value for G coefficient when using Constant Torque scenario. A-F coefficients will be zero.');

    % Explanation for constant value
    uicontrol('Parent', modeling_panel, ...
              'Style', 'text', ...
              'String', 'G coefficient value for constant torque (A-F=0)', ...
              'Position', [230, 50, 200, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Detailed explanation text with step-by-step process
    explanation_text = sprintf(['Torque Generation Process:\n', ...
                               '1. Variable Torques: Random coefficients A-G (±range) for diverse motion patterns\n', ...
                               '2. Zero Torque: All coefficients = 0 (passive motion simulation)\n', ...
                               '3. Constant Torque: A-F=0, G=constant (steady torque simulation)\n', ...
                               'Polynomial: τ(t) = A*t⁶ + B*t⁵ + C*t⁴ + D*t³ + E*t² + F*t + G']);

    uicontrol('Parent', modeling_panel, ...
              'Style', 'text', ...
              'String', explanation_text, ...
              'Position', [10, 5, 420, 40], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'ForegroundColor', [0.3, 0.3, 0.3]);

    % Store panel reference
    handles.modeling_panel = modeling_panel;
end

function createOutputSettingsPanel(parent, handles)
    % Output Settings Panel with enhanced styling
    output_panel = uipanel('Parent', parent, ...
                          'Title', 'Output Settings', ...
                          'TitlePosition', 'centertop', ...
                          'FontSize', 12, ...
                          'FontWeight', 'bold', ...
                          'Position', [0.02, 0.75, 0.96, 0.23], ...
                          'BackgroundColor', [0.97, 0.97, 0.97]);

    % Output folder selection with explanation
    uicontrol('Parent', output_panel, ...
              'Style', 'text', ...
              'String', 'Output Folder:', ...
              'Position', [10, 120, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.output_folder_edit = uicontrol('Parent', output_panel, ...
                                          'Style', 'edit', ...
                                          'String', pwd, ...
                                          'Position', [140, 120, 200, 25], ...
                                          'FontSize', 10, ...
                                          'TooltipString', 'Base folder where the training data will be saved. A subfolder will be created with the specified name.');

    handles.browse_button = uicontrol('Parent', output_panel, ...
                                     'Style', 'pushbutton', ...
                                     'String', 'Browse...', ...
                                     'Position', [350, 120, 80, 25], ...
                                     'FontSize', 10, ...
                                     'Callback', @browseOutputFolder, ...
                                     'BackgroundColor', [0.8, 0.8, 0.8]);

    % Explanation for output folder
    uicontrol('Parent', output_panel, ...
              'Style', 'text', ...
              'String', 'Base folder for saving training data (subfolder will be created)', ...
              'Position', [10, 100, 420, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Folder name with explanation
    uicontrol('Parent', output_panel, ...
              'Style', 'text', ...
              'String', 'Folder Name:', ...
              'Position', [10, 75, 120, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.folder_name_edit = uicontrol('Parent', output_panel, ...
                                        'Style', 'edit', ...
                                        'String', 'training_data_csv', ...
                                        'Position', [140, 75, 200, 25], ...
                                        'FontSize', 10, ...
                                        'TooltipString', 'Name of the subfolder that will be created to store all trial data files.');

    % Explanation for folder name
    uicontrol('Parent', output_panel, ...
              'Style', 'text', ...
              'String', 'Subfolder name for organizing trial data files', ...
              'Position', [10, 55, 420, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);

    % Control buttons with modern styling
    handles.start_button = uicontrol('Parent', output_panel, ...
                                    'Style', 'pushbutton', ...
                                    'String', '▶ Start Generation', ...
                                    'Position', [140, 20, 140, 35], ...
                                    'FontSize', 12, ...
                                    'FontWeight', 'bold', ...
                                    'BackgroundColor', [0.2, 0.7, 0.2], ...
                                    'ForegroundColor', 'white', ...
                                    'Callback', @startGeneration, ...
                                    'TooltipString', 'Begin generating training data with current settings');

    handles.stop_button = uicontrol('Parent', output_panel, ...
                                   'Style', 'pushbutton', ...
                                   'String', '⏹ Stop', ...
                                   'Position', [290, 20, 100, 35], ...
                                   'FontSize', 12, ...
                                   'FontWeight', 'bold', ...
                                   'BackgroundColor', [0.8, 0.2, 0.2], ...
                                   'ForegroundColor', 'white', ...
                                   'Callback', @stopGeneration, ...
                                   'Enable', 'off', ...
                                   'TooltipString', 'Stop the current generation process');

    % Store panel reference
    handles.output_panel = output_panel;
end

function createTrialTablePanel(parent, handles)
    % Trial Table Panel with pre-generated trial data
    trial_table_panel = uipanel('Parent', parent, ...
                                'Title', 'Generated Trials & Pre-Generated Parameters', ...
                                'TitlePosition', 'centertop', ...
                                'FontSize', 12, ...
                                'FontWeight', 'bold', ...
                                'Position', [0.02, 0.25, 0.96, 0.48], ...
                                'BackgroundColor', [0.97, 0.97, 0.97]);

    % Pre-generate button
    handles.pregenerate_button = uicontrol('Parent', trial_table_panel, ...
                                          'Style', 'pushbutton', ...
                                          'String', '🔄 Pre-Generate Trial Parameters', ...
                                          'Position', [10, 220, 200, 30], ...
                                          'FontSize', 10, ...
                                          'FontWeight', 'bold', ...
                                          'BackgroundColor', [0.3, 0.5, 0.8], ...
                                          'ForegroundColor', 'white', ...
                                          'Callback', @pregenerateTrialParameters, ...
                                          'TooltipString', 'Generate all trial parameters in advance to preview the data');

    % Export parameters button
    handles.export_params_button = uicontrol('Parent', trial_table_panel, ...
                                            'Style', 'pushbutton', ...
                                            'String', '📊 Export Parameters', ...
                                            'Position', [220, 220, 150, 30], ...
                                            'FontSize', 10, ...
                                            'FontWeight', 'bold', ...
                                            'BackgroundColor', [0.6, 0.4, 0.8], ...
                                            'ForegroundColor', 'white', ...
                                            'Callback', @exportTrialParameters, ...
                                            'Enable', 'off', ...
                                            'TooltipString', 'Export pre-generated parameters to CSV file');

    % Trial table with enhanced columns
    handles.trial_table = uitable('Parent', trial_table_panel, ...
                                   'Position', [10, 10, 460, 200], ...
                                   'ColumnName', {'Trial ID', 'Status', 'Data Points', 'Columns', 'Coefficients'}, ...
                                   'ColumnWidth', {80, 80, 80, 80, 140}, ...
                                   'FontSize', 9, ...
                                   'ColumnEditable', false, ...
                                   'CellSelectionCallback', @trialTableSelectionCallback);

    % Status indicator
    handles.table_status = uicontrol('Parent', trial_table_panel, ...
                                     'Style', 'text', ...
                                     'String', 'No trials generated yet. Click "Pre-Generate" to create trial parameters.', ...
                                     'Position', [10, 180, 460, 20], ...
                                     'HorizontalAlignment', 'left', ...
                                     'FontSize', 9, ...
                                     'ForegroundColor', [0.5, 0.5, 0.5]);

    % Store panel reference
    handles.trial_table_panel = trial_table_panel;
end

function createProgressPanel(parent, handles)
    % Progress Panel with enhanced styling and features
    progress_panel = uipanel('Parent', parent, ...
                            'Title', 'Progress & Log', ...
                            'TitlePosition', 'centertop', ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'Position', [0.02, 0.02, 0.96, 0.21], ...
                            'BackgroundColor', [0.97, 0.97, 0.97]);

    % Progress bar with visual indicator
    uicontrol('Parent', progress_panel, ...
              'Style', 'text', ...
              'String', 'Progress:', ...
              'Position', [10, 120, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.progress_bar = uicontrol('Parent', progress_panel, ...
                                    'Style', 'text', ...
                                    'String', 'Ready to start', ...
                                    'Position', [100, 120, 370, 20], ...
                                    'HorizontalAlignment', 'left', ...
                                    'FontSize', 10, ...
                                    'BackgroundColor', [0.9, 0.95, 0.9], ...
                                    'BorderType', 'beveledin');

    % Status text with icon
    uicontrol('Parent', progress_panel, ...
              'Style', 'text', ...
              'String', 'Status:', ...
              'Position', [10, 95, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    handles.status_text = uicontrol('Parent', progress_panel, ...
                                   'Style', 'text', ...
                                   'String', 'Ready', ...
                                   'Position', [100, 95, 370, 20], ...
                                   'HorizontalAlignment', 'left', ...
                                   'FontSize', 10, ...
                                   'ForegroundColor', [0.2, 0.6, 0.2]);

    % Log controls
    uicontrol('Parent', progress_panel, ...
              'Style', 'text', ...
              'String', 'Activity Log:', ...
              'Position', [10, 70, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold');

    % Clear log button
    handles.clear_log_button = uicontrol('Parent', progress_panel, ...
                                        'Style', 'pushbutton', ...
                                        'String', '🗑 Clear', ...
                                        'Position', [380, 70, 90, 20], ...
                                        'FontSize', 9, ...
                                        'BackgroundColor', [0.9, 0.9, 0.9], ...
                                        'Callback', @clearLog);

    % Log text area with better styling
    handles.log_text = uicontrol('Parent', progress_panel, ...
                                'Style', 'listbox', ...
                                'String', {'[System] Golf Swing Data Generator initialized successfully', ...
                                          '[System] Ready to generate training data...'}, ...
                                'Position', [10, 10, 460, 55], ...
                                'FontSize', 9, ...
                                'BackgroundColor', [0.98, 0.98, 0.98], ...
                                'ForegroundColor', [0.2, 0.2, 0.2]);

    % Store panel reference
    handles.progress_panel = progress_panel;
end

function clearLog(hObject, ~)
    % Clear the log display
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    set(handles.log_text, 'String', {'[System] Log cleared'});
    set(handles.log_text, 'Value', 1);
end

function createHelpPanel(parent, handles)
    % Help Panel
    help_panel = uipanel('Parent', parent, ...
                         'Title', 'Help', ...
                         'TitlePosition', 'centertop', ...
                         'FontSize', 12, ...
                         'FontWeight', 'bold', ...
                         'Position', [0.02, 0.02, 0.96, 0.21], ...
                         'BackgroundColor', [0.97, 0.97, 0.97]);

    % Help text
    help_text = sprintf(['This GUI allows you to generate comprehensive training datasets for golf swing analysis.\n\n', ...
                         '1. Trial Settings:\n', ...
                         '   - Define the number of trials to run.\n', ...
                         '   - Set the simulation duration (e.g., 0.3s).\n', ...
                         '   - Select the sample rate (e.g., 100Hz).\n', ...
                         '   - Choose between sequential or parallel execution.\n\n', ...
                         '2. Data Sources:\n', ...
                         '   - Select which data to extract from your Simulink model.\n', ...
                         '   - Model Workspace: Extract parameters from your model''s workspace.\n', ...
                         '   - Logsout: Extract data from the standard logging system.\n', ...
                         '   - Signal Bus: Extract data from ToWorkspace blocks.\n', ...
                         '   - Simscape Results: Extract primary simulation data.\n\n', ...
                         '3. Modeling Mode & Torque Scenarios:\n', ...
                         '   - Choose the polynomial input function mode (Hex Polynomial).\n', ...
                         '   - Select a torque scenario (Variable Torques, Zero Torque, Constant Torque).\n', ...
                         '   - For Variable Torques, specify the coefficient variation range.\n', ...
                         '   - For Constant Torque, set the G coefficient value.\n\n', ...
                         '4. Output Settings:\n', ...
                         '   - Select an output folder to save the generated data.\n', ...
                         '   - Enter a folder name for the output files.\n', ...
                         '   - Click "Start Generation" to begin the process.\n', ...
                         '   - Click "Stop" to interrupt the generation.\n\n', ...
                         '5. Preview & Generated Trials:\n', ...
                         '   - The preview table shows the current settings and a summary of the trials to be run.\n', ...
                         '   - The generated trials table displays the status of each trial after completion.\n', ...
                         '   - The progress bar and status text provide real-time feedback.\n', ...
                         '   - The log area records all actions and errors.\n\n', ...
                         'Note: The generation process can be time-consuming, especially with many trials.\n', ...
                         'You can interrupt the generation at any time by clicking "Stop".']);

    uicontrol('Parent', help_panel, ...
              'Style', 'text', ...
              'String', help_text, ...
              'Position', [10, 10, 440, 180], ...
              'FontSize', 10, ...
              'BackgroundColor', [0.95, 0.95, 0.95]);

    % Store panel reference
    handles.help_panel = help_panel;
end

% Callback functions
function torqueScenarioCallback(hObject, ~)
    % Handle torque scenario selection
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    scenario_idx = get(hObject, 'Value');

    % Enable/disable controls based on scenario
    switch scenario_idx
        case 1 % Variable Torques
            set(handles.coeff_range_edit, 'Enable', 'on');
            set(handles.constant_value_edit, 'Enable', 'off');
        case 2 % Zero Torque
            set(handles.coeff_range_edit, 'Enable', 'off');
            set(handles.constant_value_edit, 'Enable', 'off');
        case 3 % Constant Torque
            set(handles.coeff_range_edit, 'Enable', 'off');
            set(handles.constant_value_edit, 'Enable', 'on');
    end

    % Update preview
    updatePreview([], [], handles);
end

function browseOutputFolder(hObject, ~)
    % Browse for output folder
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    folder = uigetdir(get(handles.output_folder_edit, 'String'), 'Select Output Folder');
    if folder ~= 0
        set(handles.output_folder_edit, 'String', folder);
    end
end

function updatePreview(hObject, ~, handles)
    % Update the preview table with current settings
    try
        % Collect current settings
        num_trials = str2double(get(handles.num_trials_edit, 'String'));
        sim_time = str2double(get(handles.sim_time_edit, 'String'));
        sample_rate = str2double(get(handles.sample_rate_edit, 'String'));
        scenario_idx = get(handles.torque_scenario_popup, 'Value');
        coeff_range = str2double(get(handles.coeff_range_edit, 'String'));
        constant_value = str2double(get(handles.constant_value_edit, 'String'));

        % Create preview data
        preview_data = {
            'Number of Trials', num2str(num_trials), 'Total simulations to run';
            'Simulation Time', [num2str(sim_time) ' s'], 'Duration of each simulation';
            'Sample Rate', [num2str(sample_rate) ' Hz'], 'Data sampling frequency';
            'Modeling Mode', '3 (Hex Polynomial)', 'Polynomial input function mode';
            'Torque Scenario', get(handles.torque_scenario_popup, 'String'), 'Joint torque generation method';
        };

        % Add scenario-specific parameters
        switch scenario_idx
            case 1 % Variable Torques
                preview_data = [preview_data; {'Coefficient Range', num2str(coeff_range), 'Random variation range for all coefficients'}];
            case 2 % Zero Torque
                preview_data = [preview_data; {'All Coefficients', '0', 'No joint torques applied'}];
            case 3 % Constant Torque
                preview_data = [preview_data; {'Constant Value', num2str(constant_value), 'G coefficient value (A-F=0)'}];
        end

        % Add data sources
        data_sources = {};
        if get(handles.use_model_workspace, 'Value')
            data_sources{end+1} = 'Model Workspace';
        end
        if get(handles.use_logsout, 'Value')
            data_sources{end+1} = 'Logsout';
        end
        if get(handles.use_signal_bus, 'Value')
            data_sources{end+1} = 'Signal Bus';
        end
        if get(handles.use_simscape, 'Value')
            data_sources{end+1} = 'Simscape Results';
        end

        preview_data = [preview_data; {'Data Sources', strjoin(data_sources, ', '), 'Data extraction methods'}];

        % Calculate estimated data size
        estimated_points = num_trials * round(sim_time * sample_rate);
        preview_data = [preview_data; {'Estimated Data Points', num2str(estimated_points), 'Total data points across all trials'}];

        % Update status in trial table panel if it exists
        if isfield(handles, 'table_status')
            set(handles.table_status, 'String', sprintf('Ready to generate %d trials with %d total data points', num_trials, estimated_points));
        end

    catch ME
        % Handle errors gracefully
        if isfield(handles, 'table_status')
            set(handles.table_status, 'String', 'Error: Invalid input settings');
        end
    end
end

function startGeneration(hObject, ~)
    % Start the data generation process
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    try
        % Validate inputs
        config = validateInputs(handles);
        if isempty(config)
            return;
        end

        % Update UI state
        set(handles.start_button, 'Enable', 'off');
        set(handles.stop_button, 'Enable', 'on');
        handles.should_stop = false;

        % Store config in handles
        handles.config = config;
        guidata(fig, handles);

        % Start generation in background
        run_generation(handles);

    catch ME
        update_log(sprintf('Error starting generation: %s', ME.message), handles);
        set(handles.start_button, 'Enable', 'on');
        set(handles.stop_button, 'Enable', 'off');
    end
end

function stopGeneration(hObject, ~)
    % Stop the data generation process
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    handles.should_stop = true;
    guidata(fig, handles);

    update_log('Stopping generation...', handles);
end

function config = validateInputs(handles)
    % Validate user inputs and create config structure
    try
        % Get basic settings
        num_trials = str2double(get(handles.num_trials_edit, 'String'));
        sim_time = str2double(get(handles.sim_time_edit, 'String'));
        sample_rate = str2double(get(handles.sample_rate_edit, 'String'));

        % Validate numeric inputs
        if isnan(num_trials) || num_trials <= 0
            error('Number of trials must be a positive number');
        end
        if isnan(sim_time) || sim_time <= 0
            error('Simulation time must be a positive number');
        end
        if isnan(sample_rate) || sample_rate <= 0
            error('Sample rate must be a positive number');
        end

        % Get torque scenario settings
        scenario_idx = get(handles.torque_scenario_popup, 'Value');
        coeff_range = str2double(get(handles.coeff_range_edit, 'String'));
        constant_value = str2double(get(handles.constant_value_edit, 'String'));

        if scenario_idx == 1 && (isnan(coeff_range) || coeff_range <= 0)
            error('Coefficient range must be a positive number for variable torques');
        end
        if scenario_idx == 3 && isnan(constant_value)
            error('Constant value must be a valid number');
        end

        % Get output settings
        output_folder = get(handles.output_folder_edit, 'String');
        folder_name = get(handles.folder_name_edit, 'String');

        if isempty(output_folder) || isempty(folder_name)
            error('Please specify output folder and folder name');
        end

        % Create config structure
        config = struct();
        config.model_name = 'GolfSwing3D_Kinetic';
        config.num_simulations = num_trials;
        config.simulation_time = sim_time;
        config.sample_rate = sample_rate;
        config.modeling_mode = 3; % Always use hex polynomial mode
        config.torque_scenario = scenario_idx;
        config.coeff_range = coeff_range;
        config.constant_value = constant_value;
        config.use_model_workspace = get(handles.use_model_workspace, 'Value');
        config.use_logsout = get(handles.use_logsout, 'Value');
        config.use_signal_bus = get(handles.use_signal_bus, 'Value');
        config.use_simscape = get(handles.use_simscape, 'Value');
        config.execution_mode = get(handles.execution_mode_popup, 'String');
        config.execution_mode = config.execution_mode{get(handles.execution_mode_popup, 'Value')};
        config.output_folder = fullfile(output_folder, folder_name);

        % Validate that at least one data source is selected
        if ~config.use_model_workspace && ~config.use_logsout && ~config.use_signal_bus && ~config.use_simscape
            error('Please select at least one data source');
        end

    catch ME
        errordlg(ME.message, 'Validation Error');
        config = [];
    end
end

function run_generation(handles)
    % Main generation function with enhanced trial tracking
    try
        config = handles.config;

        % Create output folder
        if ~exist(config.output_folder, 'dir')
            mkdir(config.output_folder);
            update_log(sprintf('✓ Created output folder: %s', config.output_folder), handles);
        else
            update_log(sprintf('✓ Using existing folder: %s', config.output_folder), handles);
        end

        % Initialize results and trial tracking
        results = cell(config.num_simulations, 1);
        successful_trials = 0;
        failed_trials = 0;

        % Update trial table with initial status
        if ~isempty(handles.trial_table_data)
            for i = 1:config.num_simulations
                handles.trial_table_data{i, 2} = 'Running...';
            end
            set(handles.trial_table, 'Data', handles.trial_table_data);
        end

        update_log(sprintf('Starting generation of %d trials...', config.num_simulations), handles);
        update_status('Initializing...', handles);

        % Run trials based on execution mode
        if strcmp(config.execution_mode, 'parallel')
            update_log('Running trials in parallel...', handles);

            % Use parfor for parallel execution
            parfor sim_idx = 1:config.num_simulations
                try
                    result = runSingleTrial(sim_idx, config);
                    results{sim_idx} = result;
                catch ME
                    results{sim_idx} = struct('success', false, 'error', ME.message);
                end
            end

            % Process results after parallel execution
            for sim_idx = 1:config.num_simulations
                if handles.should_stop
                    update_log('Generation stopped by user', handles);
                    break;
                end

                result = results{sim_idx};
                if result.success
                    successful_trials = successful_trials + 1;
                    update_log(sprintf('Trial %d: Success (%d rows, %d columns)', ...
                        sim_idx, result.data_points, result.columns), handles);

                    % Update trial table
                    if ~isempty(handles.trial_table_data) && sim_idx <= size(handles.trial_table_data, 1)
                        handles.trial_table_data{sim_idx, 2} = 'Success';
                        handles.trial_table_data{sim_idx, 3} = result.data_points;
                        handles.trial_table_data{sim_idx, 4} = result.columns;
                        set(handles.trial_table, 'Data', handles.trial_table_data);
                    end
                else
                    failed_trials = failed_trials + 1;
                    update_log(sprintf('Trial %d: Failed - %s', sim_idx, result.error), handles);

                    % Update trial table
                    if ~isempty(handles.trial_table_data) && sim_idx <= size(handles.trial_table_data, 1)
                        handles.trial_table_data{sim_idx, 2} = 'Failed';
                        handles.trial_table_data{sim_idx, 3} = 0;
                        handles.trial_table_data{sim_idx, 4} = 0;
                        set(handles.trial_table, 'Data', handles.trial_table_data);
                    end
                end

                % Update progress
                progress = sim_idx / config.num_simulations * 100;
                update_progress(sprintf('Trial %d/%d (%.1f%%)', sim_idx, config.num_simulations, progress), handles);
                update_status(sprintf('Processing trial %d...', sim_idx), handles);
            end
        else
            update_log('Running trials sequentially...', handles);
            for sim_idx = 1:config.num_simulations
                if handles.should_stop
                    update_log('Generation stopped by user', handles);
                    break;
                end

                % Update progress
                progress = (sim_idx - 1) / config.num_simulations * 100;
                update_progress(sprintf('Trial %d/%d (%.1f%%)', sim_idx, config.num_simulations, progress), handles);
                update_status(sprintf('Processing trial %d...', sim_idx), handles);

                try
                    result = runSingleTrial(sim_idx, config);
                    results{sim_idx} = result;

                    if result.success
                        successful_trials = successful_trials + 1;
                        update_log(sprintf('Trial %d: Success (%d rows, %d columns)', ...
                            sim_idx, result.data_points, result.columns), handles);

                        % Update trial table
                        if ~isempty(handles.trial_table_data) && sim_idx <= size(handles.trial_table_data, 1)
                            handles.trial_table_data{sim_idx, 2} = 'Success';
                            handles.trial_table_data{sim_idx, 3} = result.data_points;
                            handles.trial_table_data{sim_idx, 4} = result.columns;
                            set(handles.trial_table, 'Data', handles.trial_table_data);
                        end
                    else
                        failed_trials = failed_trials + 1;
                        update_log(sprintf('Trial %d: Failed - %s', sim_idx, result.error), handles);

                        % Update trial table
                        if ~isempty(handles.trial_table_data) && sim_idx <= size(handles.trial_table_data, 1)
                            handles.trial_table_data{sim_idx, 2} = 'Failed';
                            handles.trial_table_data{sim_idx, 3} = 0;
                            handles.trial_table_data{sim_idx, 4} = 0;
                            set(handles.trial_table, 'Data', handles.trial_table_data);
                        end
                    end

                catch ME
                    failed_trials = failed_trials + 1;
                    results{sim_idx} = struct('success', false, 'error', ME.message);
                    update_log(sprintf('Trial %d: Error - %s', sim_idx, ME.message), handles);

                    % Update trial table
                    if ~isempty(handles.trial_table_data) && sim_idx <= size(handles.trial_table_data, 1)
                        handles.trial_table_data{sim_idx, 2} = 'Error';
                        handles.trial_table_data{sim_idx, 3} = 0;
                        handles.trial_table_data{sim_idx, 4} = 0;
                        set(handles.trial_table, 'Data', handles.trial_table_data);
                    end
                end
            end
        end

        % Final summary
        update_log(sprintf('Generation complete! Success: %d, Failed: %d', successful_trials, failed_trials), handles);
        update_progress(sprintf('Complete! Success rate: %.1f%%', 100 * successful_trials / config.num_simulations), handles);
        update_status('Generation complete', handles);

        % Update final status in trial table
        if ~isempty(handles.trial_table_data)
            set(handles.table_status, 'String', sprintf('✓ Generation complete: %d successful, %d failed', successful_trials, failed_trials), 'ForegroundColor', [0.2, 0.6, 0.2]);
        end

    catch ME
        update_log(sprintf('Generation error: %s', ME.message), handles);
        update_status('Error occurred', handles);
    end

    % Reset UI state
    fig = ancestor(handles.start_button, 'figure');
    set(handles.start_button, 'Enable', 'on');
    set(handles.stop_button, 'Enable', 'off');
    handles.should_stop = false;
    guidata(fig, handles);
end

% Helper functions for UI updates
function update_log(message, handles)
    % Add message to log
    current_log = get(handles.log_text, 'String');
    if ischar(current_log)
        current_log = {current_log};
    end

    % Add timestamp
    timestamp = datestr(now, 'HH:MM:SS');
    new_message = sprintf('[%s] %s', timestamp, message);

    % Add to log (keep last 100 messages)
    current_log{end+1} = new_message;
    if length(current_log) > 100
        current_log = current_log(end-99:end);
    end

    set(handles.log_text, 'String', current_log);
    set(handles.log_text, 'Value', length(current_log));
    drawnow;
end

function update_progress(message, handles)
    % Update progress display
    set(handles.progress_bar, 'String', message);
    drawnow;
end

function update_status(message, handles)
    % Update status display
    set(handles.status_text, 'String', sprintf('Status: %s', message));
    drawnow;
end

function trialTableSelectionCallback(hObject, ~)
    % Callback for when a row is selected in the trial table
    selected_row = get(hObject, 'Value');
    if ~isempty(selected_row)
        fig = ancestor(hObject, 'figure');
        handles = guidata(fig);

        if ~isempty(handles.trial_table_data) && selected_row <= size(handles.trial_table_data, 1)
            trial_data = handles.trial_table_data(selected_row, :);

            % Display trial details in a new figure
            detail_fig = figure('Name', sprintf('Trial %d Details', trial_data{1}), ...
                               'Position', [500, 100, 700, 500], ...
                               'NumberTitle', 'off', ...
                               'Color', [0.96, 0.96, 0.98]);

            % Title
            uicontrol('Parent', detail_fig, ...
                      'Style', 'text', ...
                      'String', sprintf('Trial %d - Parameter Details', trial_data{1}), ...
                      'FontSize', 16, ...
                      'FontWeight', 'bold', ...
                      'Position', [20, 450, 660, 30]);

            % Basic info
            y_pos = 420;
            uicontrol('Parent', detail_fig, ...
                      'Style', 'text', ...
                      'String', sprintf('Status: %s', trial_data{2}), ...
                      'Position', [20, y_pos, 300, 20], ...
                      'FontSize', 12, ...
                      'FontWeight', 'bold');

            y_pos = y_pos - 25;
            uicontrol('Parent', detail_fig, ...
                      'Style', 'text', ...
                      'String', sprintf('Data Points: %d', trial_data{3}), ...
                      'Position', [20, y_pos, 300, 20], ...
                      'FontSize', 12);

            y_pos = y_pos - 25;
            uicontrol('Parent', detail_fig, ...
                      'Style', 'text', ...
                      'String', sprintf('Columns: %d', trial_data{4}), ...
                      'Position', [20, y_pos, 300, 20], ...
                      'FontSize', 12);

            % Coefficients table
            y_pos = y_pos - 40;
            uicontrol('Parent', detail_fig, ...
                      'Style', 'text', ...
                      'String', 'Generated Polynomial Coefficients:', ...
                      'Position', [20, y_pos, 400, 20], ...
                      'FontSize', 12, ...
                      'FontWeight', 'bold');

            y_pos = y_pos - 25;
            if length(trial_data) >= 5 && ~isempty(trial_data{5})
                coeff_table = uitable('Parent', detail_fig, ...
                                     'Position', [20, y_pos - 150, 660, 150], ...
                                     'ColumnName', {'Coefficient', 'Value', 'Description'}, ...
                                     'ColumnWidth', {120, 120, 400}, ...
                                     'FontSize', 10, ...
                                     'ColumnEditable', false);

                % Parse coefficients string and create table data
                coeff_str = trial_data{5};
                coeff_data = parseCoefficientsString(coeff_str);
                set(coeff_table, 'Data', coeff_data);
            end

            % Action buttons
            button_y = 50;
            uicontrol('Parent', detail_fig, ...
                      'Style', 'pushbutton', ...
                      'String', '📊 View Generated Data', ...
                      'Position', [20, button_y, 180, 30], ...
                      'FontSize', 10, ...
                      'BackgroundColor', [0.2, 0.6, 0.2], ...
                      'ForegroundColor', 'white', ...
                      'Callback', @(~,~) openGeneratedDataFile(trial_data{1}, handles.config.output_folder));

            uicontrol('Parent', detail_fig, ...
                      'Style', 'pushbutton', ...
                      'String', '📋 Copy Parameters', ...
                      'Position', [220, button_y, 150, 30], ...
                      'FontSize', 10, ...
                      'BackgroundColor', [0.4, 0.4, 0.8], ...
                      'ForegroundColor', 'white', ...
                      'Callback', @(~,~) copyTrialParameters(trial_data));

            uicontrol('Parent', detail_fig, ...
                      'Style', 'pushbutton', ...
                      'String', '❌ Close', ...
                      'Position', [390, button_y, 100, 30], ...
                      'FontSize', 10, ...
                      'BackgroundColor', [0.8, 0.2, 0.2], ...
                      'ForegroundColor', 'white', ...
                      'Callback', @(~,~) close(detail_fig));
        end
    end
end

function coeff_data = parseCoefficientsString(coeff_str)
    % Parse the coefficients string into table data
    coeff_data = {};

    % Extract coefficients from string like "A=0.1, B=-0.2, C=0.05..."
    coeff_pairs = strsplit(coeff_str, ', ');
    for i = 1:length(coeff_pairs)
        if contains(coeff_pairs{i}, '=')
            parts = strsplit(coeff_pairs{i}, '=');
            if length(parts) == 2
                coeff_name = strtrim(parts{1});
                coeff_value = strtrim(parts{2});

                % Add description based on coefficient
                switch coeff_name
                    case 'A'
                        desc = '6th order term coefficient';
                    case 'B'
                        desc = '5th order term coefficient';
                    case 'C'
                        desc = '4th order term coefficient';
                    case 'D'
                        desc = '3rd order term coefficient';
                    case 'E'
                        desc = '2nd order term coefficient';
                    case 'F'
                        desc = '1st order term coefficient';
                    case 'G'
                        desc = 'Constant term coefficient';
                    otherwise
                        desc = 'Polynomial coefficient';
                end

                coeff_data{end+1, 1} = coeff_name;
                coeff_data{end, 2} = coeff_value;
                coeff_data{end, 3} = desc;
            end
        end
    end
end

function copyTrialParameters(trial_data)
    % Copy trial parameters to clipboard
    if length(trial_data) >= 5
        coeff_str = trial_data{5};
        clipboard('copy', coeff_str);
        msgbox('Trial parameters copied to clipboard!', 'Copy Successful');
    end
end

function openGeneratedDataFile(trial_id, output_folder)
    % Open the generated CSV file for a specific trial
    csv_file = fullfile(output_folder, sprintf('trial_%d.csv', trial_id));
    if exist(csv_file, 'file')
        try
            web(sprintf('file://%s', csv_file), '-browser');
        catch
            errordlg(sprintf('Could not open file: %s', csv_file), 'Error');
        end
    else
        errordlg(sprintf('Generated data file not found for trial %d: %s', trial_id, csv_file), 'Error');
    end
end

function pregenerateTrialParameters(hObject, ~)
    % Pre-generate all trial parameters
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    try
        % Validate inputs first
        config = validateInputs(handles);
        if isempty(config)
            return;
        end

        % Update button state
        set(hObject, 'Enable', 'off', 'String', '🔄 Generating...');
        set(handles.table_status, 'String', 'Generating trial parameters...', 'ForegroundColor', [0.2, 0.6, 0.2]);
        drawnow;

        % Generate all trial parameters
        num_trials = config.num_simulations;
        trial_data = cell(num_trials, 5);

        for i = 1:num_trials
            % Generate coefficients based on scenario
            switch config.torque_scenario
                case 1 % Variable Torques
                    coeffs = generateVariableCoefficients(config.coeff_range);
                case 2 % Zero Torque
                    coeffs = [0, 0, 0, 0, 0, 0, 0];
                case 3 % Constant Torque
                    coeffs = [0, 0, 0, 0, 0, 0, config.constant_value];
            end

            % Format coefficients string
            coeff_str = sprintf('A=%.3f, B=%.3f, C=%.3f, D=%.3f, E=%.3f, F=%.3f, G=%.3f', coeffs);

            % Create trial data row
            trial_data{i, 1} = i; % Trial ID
            trial_data{i, 2} = 'Pre-generated'; % Status
            trial_data{i, 3} = round(config.simulation_time * config.sample_rate); % Data points
            trial_data{i, 4} = 'TBD'; % Columns (will be determined during generation)
            trial_data{i, 5} = coeff_str; % Coefficients
        end

        % Update table and handles
        set(handles.trial_table, 'Data', trial_data);
        handles.trial_table_data = trial_data;
        handles.config = config;
        guidata(fig, handles);

        % Update status
        set(handles.table_status, 'String', sprintf('✓ Generated %d trial parameters successfully', num_trials), 'ForegroundColor', [0.2, 0.6, 0.2]);
        set(handles.export_params_button, 'Enable', 'on');
        set(hObject, 'Enable', 'on', 'String', '🔄 Pre-Generate Trial Parameters');

        % Show summary
        msgbox(sprintf('Successfully pre-generated %d trial parameters!\n\nYou can now:\n• Review parameters in the table\n• Export parameters to CSV\n• Start the actual generation', num_trials), 'Pre-Generation Complete');

    catch ME
        % Handle errors
        set(handles.table_status, 'String', sprintf('Error: %s', ME.message), 'ForegroundColor', [0.8, 0.2, 0.2]);
        set(hObject, 'Enable', 'on', 'String', '🔄 Pre-Generate Trial Parameters');
        errordlg(sprintf('Error pre-generating parameters: %s', ME.message), 'Pre-Generation Error');
    end
end

function exportTrialParameters(hObject, ~)
    % Export pre-generated parameters to CSV
    fig = ancestor(hObject, 'figure');
    handles = guidata(fig);

    if isempty(handles.trial_table_data)
        errordlg('No trial parameters to export. Please pre-generate parameters first.', 'Export Error');
        return;
    end

    try
        % Get save location
        [filename, pathname] = uiputfile('*.csv', 'Save Trial Parameters', 'trial_parameters.csv');
        if filename == 0
            return;
        end

        % Create export data
        export_data = cell(size(handles.trial_table_data, 1) + 1, 7);
        export_data{1, 1} = 'Trial_ID';
        export_data{1, 2} = 'Status';
        export_data{1, 3} = 'Data_Points';
        export_data{1, 4} = 'Columns';
        export_data{1, 5} = 'Coeff_A';
        export_data{1, 6} = 'Coeff_B';
        export_data{1, 7} = 'Coeff_C';
        export_data{1, 8} = 'Coeff_D';
        export_data{1, 9} = 'Coeff_E';
        export_data{1, 10} = 'Coeff_F';
        export_data{1, 11} = 'Coeff_G';

        % Parse and export each trial
        for i = 1:size(handles.trial_table_data, 1)
            trial_row = handles.trial_table_data(i, :);
            export_data{i+1, 1} = trial_row{1}; % Trial ID
            export_data{i+1, 2} = trial_row{2}; % Status
            export_data{i+1, 3} = trial_row{3}; % Data Points
            export_data{i+1, 4} = trial_row{4}; % Columns

            % Parse coefficients
            if length(trial_row) >= 5 && ~isempty(trial_row{5})
                coeffs = parseCoefficientsToArray(trial_row{5});
                for j = 1:7
                    export_data{i+1, 4+j} = coeffs(j);
                end
            end
        end

        % Write to CSV
        full_path = fullfile(pathname, filename);
        writecell(export_data, full_path);

        msgbox(sprintf('Trial parameters exported successfully to:\n%s', full_path), 'Export Complete');

    catch ME
        errordlg(sprintf('Error exporting parameters: %s', ME.message), 'Export Error');
    end
end

function coeffs = parseCoefficientsToArray(coeff_str)
    % Parse coefficients string to numeric array
    coeffs = zeros(1, 7);

    % Extract coefficients from string like "A=0.1, B=-0.2, C=0.05..."
    coeff_pairs = strsplit(coeff_str, ', ');
    for i = 1:length(coeff_pairs)
        if contains(coeff_pairs{i}, '=')
            parts = strsplit(coeff_pairs{i}, '=');
            if length(parts) == 2
                coeff_name = strtrim(parts{1});
                coeff_value = str2double(strtrim(parts{2}));

                % Map coefficient to array position
                switch coeff_name
                    case 'A'
                        coeffs(1) = coeff_value;
                    case 'B'
                        coeffs(2) = coeff_value;
                    case 'C'
                        coeffs(3) = coeff_value;
                    case 'D'
                        coeffs(4) = coeff_value;
                    case 'E'
                        coeffs(5) = coeff_value;
                    case 'F'
                        coeffs(6) = coeff_value;
                    case 'G'
                        coeffs(7) = coeff_value;
                end
            end
        end
    end
end

function coeffs = generateVariableCoefficients(range)
    % Generate random coefficients within the specified range
    coeffs = (rand(1, 7) - 0.5) * 2 * range; % Random values between -range and +range
end

% Note: The following functions have been moved to standalone files to enable parallel execution:
% - runSingleTrial.m
% - generatePolynomialCoefficients.m
% - setPolynomialVariables.m
% - extractCompleteTrialData.m
% - GolfSwingDataGeneratorHelpers.m (contains all helper functions)

% Include helper functions from GolfSwingDataGeneratorHelpers.m
% These functions are defined in the separate helper file
end
