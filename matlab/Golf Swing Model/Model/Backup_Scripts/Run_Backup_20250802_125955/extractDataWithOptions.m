function [signal_table, signal_info] = extractDataWithOptions(simOut)
    % EXTRACTDATAWITHOPTIONS - GUI for selecting data extraction options
    %
    % This function provides a simple GUI interface for selecting which data
    % sources to extract from the Simulink simulation output.
    %
    % Inputs:
    %   simOut - The Simulink simulation output object
    %
    % Outputs:
    %   signal_table - Table containing all extracted signals with time column
    %   signal_info  - Structure containing metadata about extracted signals
    %
    % Example:
    %   simOut = sim('YourModel');
    %   [data, info] = extractDataWithOptions(simOut);

    % Check what data sources are available
    available_sources = struct();
    available_sources.combined_bus = isprop(simOut, 'CombinedSignalBus');
    available_sources.logsout = isprop(simOut, 'logsout');

    % Check for Simscape Results Explorer
    try
        simscapeRuns = Simulink.sdi.getAllRunIDs;
        available_sources.simscape = ~isempty(simscapeRuns);
    catch
        available_sources.simscape = false;
    end

    % Create GUI figure
    fig = figure('Name', 'Data Extraction Options', ...
                 'Position', [300, 300, 400, 300], ...
                 'MenuBar', 'none', ...
                 'NumberTitle', 'off', ...
                 'Resize', 'off');

    % Create main panel
    mainPanel = uipanel('Parent', fig, ...
                       'Units', 'normalized', ...
                       'Position', [0.05, 0.05, 0.9, 0.9], ...
                       'Title', 'Select Data Sources to Extract', ...
                       'FontSize', 12, ...
                       'FontWeight', 'bold');

    % Title
    uicontrol('Parent', mainPanel, ...
              'Style', 'text', ...
              'String', 'Choose which data sources to extract:', ...
              'Units', 'normalized', ...
              'Position', [0.1, 0.85, 0.8, 0.1], ...
              'FontSize', 11, ...
              'HorizontalAlignment', 'left');

    % Checkboxes for data sources
    y_pos = 0.75;
    spacing = 0.15;

    % CombinedSignalBus checkbox
    combined_bus_cb = uicontrol('Parent', mainPanel, ...
                               'Style', 'checkbox', ...
                               'String', 'CombinedSignalBus', ...
                               'Units', 'normalized', ...
                               'Position', [0.1, y_pos, 0.8, 0.08], ...
                               'Value', available_sources.combined_bus, ...
                               'Enable', ifelse(available_sources.combined_bus, 'on', 'off'), ...
                               'FontSize', 10);

    if ~available_sources.combined_bus
        uicontrol('Parent', mainPanel, ...
                  'Style', 'text', ...
                  'String', '(Not available)', ...
                  'Units', 'normalized', ...
                  'Position', [0.7, y_pos, 0.2, 0.08], ...
                  'FontSize', 8, ...
                  'ForegroundColor', [0.6, 0.6, 0.6], ...
                  'HorizontalAlignment', 'left');
    end

    y_pos = y_pos - spacing;

    % Logsout checkbox
    logsout_cb = uicontrol('Parent', mainPanel, ...
                          'Style', 'checkbox', ...
                          'String', 'Logsout', ...
                          'Units', 'normalized', ...
                          'Position', [0.1, y_pos, 0.8, 0.08], ...
                          'Value', available_sources.logsout, ...
                          'Enable', ifelse(available_sources.logsout, 'on', 'off'), ...
                          'FontSize', 10);

    if ~available_sources.logsout
        uicontrol('Parent', mainPanel, ...
                  'Style', 'text', ...
                  'String', '(Not available)', ...
                  'Units', 'normalized', ...
                  'Position', [0.7, y_pos, 0.2, 0.08], ...
                  'FontSize', 8, ...
                  'ForegroundColor', [0.6, 0.6, 0.6], ...
                  'HorizontalAlignment', 'left');
    end

    y_pos = y_pos - spacing;

    % Simscape Results Explorer checkbox
    simscape_cb = uicontrol('Parent', mainPanel, ...
                           'Style', 'checkbox', ...
                           'String', 'Simscape Results Explorer', ...
                           'Units', 'normalized', ...
                           'Position', [0.1, y_pos, 0.8, 0.08], ...
                           'Value', available_sources.simscape, ...
                           'Enable', ifelse(available_sources.simscape, 'on', 'off'), ...
                           'FontSize', 10);

    if ~available_sources.simscape
        uicontrol('Parent', mainPanel, ...
                  'Style', 'text', ...
                  'String', '(Not available)', ...
                  'Units', 'normalized', ...
                  'Position', [0.7, y_pos, 0.2, 0.08], ...
                  'FontSize', 8, ...
                  'ForegroundColor', [0.6, 0.6, 0.6], ...
                  'HorizontalAlignment', 'left');
    end

    y_pos = y_pos - spacing;

    % Verbose output checkbox
    verbose_cb = uicontrol('Parent', mainPanel, ...
                          'Style', 'checkbox', ...
                          'String', 'Verbose Output', ...
                          'Units', 'normalized', ...
                          'Position', [0.1, y_pos, 0.8, 0.08], ...
                          'Value', 1, ...
                          'FontSize', 10);

    y_pos = y_pos - spacing;

    % Buttons
    button_width = 0.35;
    button_height = 0.08;

    % Extract button
    extract_btn = uicontrol('Parent', mainPanel, ...
                           'Style', 'pushbutton', ...
                           'String', 'Extract Data', ...
                           'Units', 'normalized', ...
                           'Position', [0.1, y_pos, button_width, button_height], ...
                           'FontSize', 11, ...
                           'FontWeight', 'bold', ...
                           'BackgroundColor', [0.2, 0.6, 0.2], ...
                           'ForegroundColor', 'white', ...
                           'Callback', @extractCallback);

    % Cancel button
    cancel_btn = uicontrol('Parent', mainPanel, ...
                          'Style', 'pushbutton', ...
                          'String', 'Cancel', ...
                          'Units', 'normalized', ...
                          'Position', [0.55, y_pos, button_width, button_height], ...
                          'FontSize', 11, ...
                          'BackgroundColor', [0.6, 0.2, 0.2], ...
                          'ForegroundColor', 'white', ...
                          'Callback', @cancelCallback);

    % Initialize output variables
    signal_table = [];
    signal_info = struct();

    % Wait for user input
    uiwait(fig);

    function extractCallback(~, ~)
        % Get user selections
        options = struct();
        options.extract_combined_bus = get(combined_bus_cb, 'Value');
        options.extract_logsout = get(logsout_cb, 'Value');
        options.extract_simscape = get(simscape_cb, 'Value');
        options.verbose = get(verbose_cb, 'Value');

        % Check if at least one source is selected
        if ~options.extract_combined_bus && ~options.extract_logsout && ~options.extract_simscape
            errordlg('Please select at least one data source to extract.', 'No Source Selected');
            return;
        end

        % Close the GUI
        delete(fig);

        % Extract data using the enhanced function
        [signal_table, signal_info] = extractAllSignalsFromBus(simOut, options);

        % Show results
        if ~isempty(signal_table)
            msg = sprintf('Successfully extracted %d signals!\n\n', signal_info.total_signals);
            msg = [msg sprintf('Table size: %d rows Ã— %d columns\n', height(signal_table), width(signal_table))];
            msg = [msg sprintf('Time points: %d\n\n', signal_info.time_points)];

            if isfield(signal_info, 'source_info')
                if signal_info.source_info.combined_bus.extracted
                    msg = [msg sprintf('CombinedSignalBus: %d signals\n', signal_info.source_info.combined_bus.signals)];
                end
                if signal_info.source_info.logsout.extracted
                    msg = [msg sprintf('Logsout: %d signals\n', signal_info.source_info.logsout.signals)];
                end
                if signal_info.source_info.simscape.extracted
                    msg = [msg sprintf('Simscape: %d signals\n', signal_info.source_info.simscape.signals)];
                end
            end

            msgbox(msg, 'Extraction Complete', 'help');
        else
            errordlg('No data was extracted. Please check your simulation output.', 'Extraction Failed');
        end
    end

    function cancelCallback(~, ~)
        % Close the GUI without extracting
        delete(fig);
    end
end

function result = ifelse(condition, true_value, false_value)
    % Simple if-else function for inline use
    if condition
        result = true_value;
    else
        result = false_value;
    end
end